
File: Working with schemas

remoteStorage.js is designed to primarily deal with JSON data. It automatically (de-)serializes it whenever data has the Content-Type "application/json", offers specific methods to store (<BaseClient.getObject>) and retrieve (<BaseClient.storeObject>) JSON objects.

In addition to the basic format handling, remoteStorage.js can also *validate* JSON data against a *schema*. The *schema format* used is JSON-Schema, which is described at <json-schema.org at http://json-schema.org>.

This tutorial aims to lead you through the process of declaring and using typed JSON data.

Section: Declaring a type

*Declaring* a type means creating a *type alias* that is associated with a *type URI* and a *schema*. Each type being declared is only valid within the current module.

* The *alias* is a String, that is used to refer to the type later on. It has to be unique within each module. An example would be "drink".
* The *URI* is also a String, used to uniquely identify a type. It is common to point this URI to a public copy of the schema. When the URI is ommitted, remoteStorage.js generates one based on the current module name and the alias. The URI is also stored in the typed object itself as an attribute called "@context".
* The *schema* is a JSON object containing a JSON schema, as described in the <specification at http://tools.ietf.org/html/draft-zyp-json-schema>

This is a complete example of how to declare a type called "event":
(start code)
client.declareType('event', 'http://json-schema.org/calendar', {
	"description": "A representation of an event",
	"type": "object",
	"properties": {
		"dtstart": {
			"format": "date-time",
			"type": "string",
			"description": "Event starting time",
			"required": true
		},
		"dtend": {
			"format": "date-time",
			"type": "string",
			"description": "Event ending time"
		},
		"summary": { "type": "string", "required": true },
		"location": { "type": "string" },
		"url": { "type": "string", "format": "uri" },
		"duration": {
			"format": "time",
			"type": "string",
			"description": "Event duration"
		},
		"rdate": {
			"format": "date-time",
			"type": "string",
			"description": "Recurrence date"
		},
		"rrule": {
			"type": "string",
			"description": "Recurrence rule"
		},
		"category": { "type": "string" },
		"description": { "type": "string" },
		"geo": { "$ref": "http: //json-schema.org/geo" }
	}
});
(end code)

Section: Storing typed objects

When storing objects you always need to specify a type (-alias). This is even true when you have not declared any types. In that case storeObject will print a warning and proceed.

When a type has been declared under the alias given to storeObject, the given object will be validated before being stored. If validation fails, the object will *not* have been saved and storeObject will return an array of validation errors.

Example:
(start code)
var event = { "location": "Berlin", "id": baseClient.uuid() };
var errors = client.storeObject('event', event.id, event);
console.log(errors);
// [{ "property":"dtstart", "message":"is missing and is required" },
//  { "property":"summary", "message":"is missing and is required" }]
(end code)

These errors can then be used to display a message to the user.

Section: Preparing and validating typed objects

In order to validate an object, it first needs to be assigned the "@context" property. This is usually done by storeObject, based on the given type alias.
If you want to validate an object before saving it, you need to pull in that @context property first. You could either do this manually, or remoteStorage.js can do that job for you, via <BaseClient.buildObject>:
(start code)
var event = client.buildObject('event');
console.log(event);
// { "@context":"http://json-schema.org/calendar" }
(end code)

Now you have a typed object, which can be passed to validateObject:
(start code)
var errors = client.validateObject(event);
console.log(errors);
// [{ "property":"dtstart", "message":"is missing and is required" },
//  { "property":"summary", "message":"is missing and is required" }]
(end code)

Section: Automatic ID handling and saveObject

Another benefit you can gain from declaring a schema is automatic ID handling.

To use it, you need to add another property to your schema
(start code)
client.declareType('event', 'http://json-schema.org/calendar', {
  // (...)
  "properties": {
    "id": {
      "description": "Unique identifier for this event",
      "type": "string",
      "format": "id" // this tells remoteStorage.js to use the attribute as an ID.
    }
    // (...)
  }
});
(end code)

Now <BaseClient.buildObject> will generate an ID for you, if needed
(start code)
var event = client.buildObject('event');
console.log(event);
// { "@context":"http://json-schema.org/calendar",
//   "id": "uuid:24599E26-F5F8-4698-88C2-1EDB319B9960" }
(end code)

If you already specified an ID yourself, it won't overwrite it
(start code)
var event = client.buildObject('event', { "id": "my-own-id" });
console.log(event);
// { "@context":"http://json-schema.org/calendar",
//   "id": "my-own-id" }
(end code)

Using saveObject with typed objects:

When your app works with typed objects that have an ID attribute, you can use <BaseClient.saveObject> instead of <BaseClient.storeObject> to save them.

saveObject needs only one parameter, the object
(start code)
var event = client.buildObject('event');
event.dtstart = new Date();
event.summary = "Something happening";

client.saveObject(event).
  then(function() {
    // success
  }, function(error) {
    // failed, error.errors holds validation errors
  }).
  then(function() {
    // verify it was saved (just for demonstration, you don't need to do that):
    return client.getObject(event.id);
  }).then(function(reloadedEvent) {
    console.log(reloadedEvent);
    // { "@context": "http://json-schema.org/calendar",
    //   "id": "uuid:DA115EF9-42F6-4A73-8AFB-F5DC773F5AA3",
    //   "dtstart": "2012-11-01T18:07:37.373Z",
    //   "summary": "Something happening" }
  });
(end code)
