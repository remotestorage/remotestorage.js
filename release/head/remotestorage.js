!function(Q,B){"object"==typeof exports&&"object"==typeof module?module.exports=B():"function"==typeof define&&define.amd?define("RemoteStorage",[],B):"object"==typeof exports?exports.RemoteStorage=B():Q.RemoteStorage=B()}(this,function(){return function(Q){function B(F){if(I[F])return I[F].exports;var g=I[F]={exports:{},id:F,loaded:!1};return Q[F].call(g.exports,g,g.exports,B),g.loaded=!0,g.exports}var I={};return B.m=Q,B.c=I,B.p="",B(0)}([function(Q,B,I){Q.exports=I(16)},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar config = __webpack_require__(5);\n\n/**\n * Method: log\n *\n * Log using console.log, when remoteStorage logging is enabled.\n *\n * You can enable logging with <enableLog>.\n *\n * (In node.js you can also enable logging during remoteStorage object\n * creation. See: <RemoteStorage>).\n */\nfunction log() {\n  if (config.logging) {\n    console.log.apply(console, arguments);\n  }\n}\n\nmodule.exports = log;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbG9nLmpzPzkzMjAiXSwibmFtZXMiOlsiY29uZmlnIiwicmVxdWlyZSIsImxvZyIsImxvZ2dpbmciLCJjb25zb2xlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLFNBQVMsbUJBQUFDLENBQVEsQ0FBUixDQUFiOztBQUVBOzs7Ozs7Ozs7O0FBVUEsU0FBU0MsR0FBVCxHQUFlO0FBQ2IsTUFBSUYsT0FBT0csT0FBWCxFQUFvQjtBQUNsQkMsWUFBUUYsR0FBUixDQUFZRyxLQUFaLENBQWtCRCxPQUFsQixFQUEyQkUsU0FBM0I7QUFDRDtBQUNGOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCTixHQUFqQiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG5cbi8qKlxuICogTWV0aG9kOiBsb2dcbiAqXG4gKiBMb2cgdXNpbmcgY29uc29sZS5sb2csIHdoZW4gcmVtb3RlU3RvcmFnZSBsb2dnaW5nIGlzIGVuYWJsZWQuXG4gKlxuICogWW91IGNhbiBlbmFibGUgbG9nZ2luZyB3aXRoIDxlbmFibGVMb2c+LlxuICpcbiAqIChJbiBub2RlLmpzIHlvdSBjYW4gYWxzbyBlbmFibGUgbG9nZ2luZyBkdXJpbmcgcmVtb3RlU3RvcmFnZSBvYmplY3RcbiAqIGNyZWF0aW9uLiBTZWU6IDxSZW1vdGVTdG9yYWdlPikuXG4gKi9cbmZ1bmN0aW9uIGxvZygpIHtcbiAgaWYgKGNvbmZpZy5sb2dnaW5nKSB7XG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbG9nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports){eval("/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n// Reusable utility functions\n\n\n/**\n * Function: fixArrayBuffers\n *\n * Takes an object and its copy as produced by the _deepClone function\n * below, and finds and fixes any ArrayBuffers that were cast to `{}` instead\n * of being cloned to new ArrayBuffers with the same content.\n *\n * It recurses into sub-objects, but skips arrays if they occur.\n */\nfunction fixArrayBuffers(srcObj, dstObj) {\n  var field, srcArr, dstArr;\n  if ((typeof srcObj === 'undefined' ? 'undefined' : _typeof(srcObj)) !== 'object' || Array.isArray(srcObj) || srcObj === null) {\n    return;\n  }\n  for (field in srcObj) {\n    if (_typeof(srcObj[field]) === 'object' && srcObj[field] !== null) {\n      if (srcObj[field].toString() === '[object ArrayBuffer]') {\n        dstObj[field] = new ArrayBuffer(srcObj[field].byteLength);\n        srcArr = new Int8Array(srcObj[field]);\n        dstArr = new Int8Array(dstObj[field]);\n        dstArr.set(srcArr);\n      } else {\n        fixArrayBuffers(srcObj[field], dstObj[field]);\n      }\n    }\n  }\n}\n\nvar util = {\n  logError: function logError(error) {\n    if (typeof error === 'string') {\n      console.error(error);\n    } else {\n      console.error(error.message, error.stack);\n    }\n  },\n\n\n  globalContext: typeof window !== 'undefined' ? window : global,\n\n  getGlobalContext: function getGlobalContext() {\n    return typeof window !== 'undefined' ? window : global;\n  },\n  extend: function extend(target) {\n    var sources = Array.prototype.slice.call(arguments, 1);\n    sources.forEach(function (source) {\n      for (var key in source) {\n        target[key] = source[key];\n      }\n    });\n    return target;\n  },\n  asyncEach: function asyncEach(array, callback) {\n    return this.asyncMap(array, callback).then(function () {\n      return array;\n    });\n  },\n  asyncMap: function asyncMap(array, callback) {\n    var pending = Promise.defer();\n    var n = array.length,\n        i = 0;\n    var results = [],\n        errors = [];\n\n    function oneDone() {\n      i++;\n      if (i === n) {\n        pending.resolve(results, errors);\n      }\n    }\n\n    array.forEach(function (item, index) {\n      var result;\n      try {\n        result = callback(item);\n      } catch (exc) {\n        oneDone();\n        errors[index] = exc;\n      }\n      if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object' && typeof result.then === 'function') {\n        result.then(function (res) {\n          results[index] = res;oneDone();\n        }, function (error) {\n          errors[index] = error;oneDone();\n        });\n      } else {\n        oneDone();\n        results[index] = result;\n      }\n    });\n\n    return pending.promise;\n  },\n  containingFolder: function containingFolder(path) {\n    if (path === '') {\n      return '/';\n    }\n    if (!path) {\n      throw \"Path not given!\";\n    }\n\n    return path.replace(/\\/+/g, '/').replace(/[^\\/]+\\/?$/, '');\n  },\n  isFolder: function isFolder(path) {\n    return path.substr(-1) === '/';\n  },\n  isDocument: function isDocument(path) {\n    return !util.isFolder(path);\n  },\n  baseName: function baseName(path) {\n    var parts = path.split('/');\n    if (util.isFolder(path)) {\n      return parts[parts.length - 2] + '/';\n    } else {\n      return parts[parts.length - 1];\n    }\n  },\n  cleanPath: function cleanPath(path) {\n    return path.replace(/\\/+/g, '/').split('/').map(encodeURIComponent).join('/').replace(/'/g, '%27');\n  },\n  bindAll: function bindAll(object) {\n    for (var key in this) {\n      if (typeof object[key] === 'function') {\n        object[key] = object[key].bind(object);\n      }\n    }\n  },\n  equal: function equal(a, b, seen) {\n    var key;\n    seen = seen || [];\n\n    if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== (typeof b === 'undefined' ? 'undefined' : _typeof(b))) {\n      return false;\n    }\n\n    if (typeof a === 'number' || typeof a === 'boolean' || typeof a === 'string') {\n      return a === b;\n    }\n\n    if (typeof a === 'function') {\n      return a.toString() === b.toString();\n    }\n\n    if (a instanceof ArrayBuffer && b instanceof ArrayBuffer) {\n      // Without the following conversion the browsers wouldn't be able to\n      // tell the ArrayBuffer instances apart.\n      a = new Uint8Array(a);\n      b = new Uint8Array(b);\n    }\n\n    // If this point has been reached, a and b are either arrays or objects.\n\n    if (a instanceof Array) {\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      for (var i = 0, c = a.length; i < c; i++) {\n        if (!util.equal(a[i], b[i], seen)) {\n          return false;\n        }\n      }\n    } else {\n      // Check that keys from a exist in b\n      for (key in a) {\n        if (a.hasOwnProperty(key) && !(key in b)) {\n          return false;\n        }\n      }\n\n      // Check that keys from b exist in a, and compare the values\n      for (key in b) {\n        if (!b.hasOwnProperty(key)) {\n          continue;\n        }\n\n        if (!(key in a)) {\n          return false;\n        }\n\n        var seenArg;\n\n        if (_typeof(b[key]) === 'object') {\n          if (seen.indexOf(b[key]) >= 0) {\n            // Circular reference, don't attempt to compare this object.\n            // If nothing else returns false, the objects match.\n            continue;\n          }\n\n          seenArg = seen.slice();\n          seenArg.push(b[key]);\n        }\n\n        if (!util.equal(a[key], b[key], seenArg)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  },\n  equalObj: function equalObj(obj1, obj2) {\n    console.warn('DEPRECATION WARNING: util.equalObj has been replaced by util.equal.');\n    return util.equal(obj1, obj2);\n  },\n  deepClone: function deepClone(obj) {\n    var clone;\n    if (obj === undefined) {\n      return undefined;\n    } else {\n      clone = JSON.parse(JSON.stringify(obj));\n      fixArrayBuffers(obj, clone);\n      return clone;\n    }\n  },\n  pathsFromRoot: function pathsFromRoot(path) {\n    var paths = [path];\n    var parts = path.replace(/\\/$/, '').split('/');\n\n    while (parts.length > 1) {\n      parts.pop();\n      paths.push(parts.join('/') + '/');\n    }\n    return paths;\n  },\n\n\n  /* jshint ignore:start */\n  md5sum: function md5sum(str) {\n    //\n    // http://www.myersdaily.org/joseph/javascript/md5.js\n    //\n    function md5cycle(x, k) {\n      var a = x[0],\n          b = x[1],\n          c = x[2],\n          d = x[3];\n\n      a = ff(a, b, c, d, k[0], 7, -680876936);\n      d = ff(d, a, b, c, k[1], 12, -389564586);\n      c = ff(c, d, a, b, k[2], 17, 606105819);\n      b = ff(b, c, d, a, k[3], 22, -1044525330);\n      a = ff(a, b, c, d, k[4], 7, -176418897);\n      d = ff(d, a, b, c, k[5], 12, 1200080426);\n      c = ff(c, d, a, b, k[6], 17, -1473231341);\n      b = ff(b, c, d, a, k[7], 22, -45705983);\n      a = ff(a, b, c, d, k[8], 7, 1770035416);\n      d = ff(d, a, b, c, k[9], 12, -1958414417);\n      c = ff(c, d, a, b, k[10], 17, -42063);\n      b = ff(b, c, d, a, k[11], 22, -1990404162);\n      a = ff(a, b, c, d, k[12], 7, 1804603682);\n      d = ff(d, a, b, c, k[13], 12, -40341101);\n      c = ff(c, d, a, b, k[14], 17, -1502002290);\n      b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n      a = gg(a, b, c, d, k[1], 5, -165796510);\n      d = gg(d, a, b, c, k[6], 9, -1069501632);\n      c = gg(c, d, a, b, k[11], 14, 643717713);\n      b = gg(b, c, d, a, k[0], 20, -373897302);\n      a = gg(a, b, c, d, k[5], 5, -701558691);\n      d = gg(d, a, b, c, k[10], 9, 38016083);\n      c = gg(c, d, a, b, k[15], 14, -660478335);\n      b = gg(b, c, d, a, k[4], 20, -405537848);\n      a = gg(a, b, c, d, k[9], 5, 568446438);\n      d = gg(d, a, b, c, k[14], 9, -1019803690);\n      c = gg(c, d, a, b, k[3], 14, -187363961);\n      b = gg(b, c, d, a, k[8], 20, 1163531501);\n      a = gg(a, b, c, d, k[13], 5, -1444681467);\n      d = gg(d, a, b, c, k[2], 9, -51403784);\n      c = gg(c, d, a, b, k[7], 14, 1735328473);\n      b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n      a = hh(a, b, c, d, k[5], 4, -378558);\n      d = hh(d, a, b, c, k[8], 11, -2022574463);\n      c = hh(c, d, a, b, k[11], 16, 1839030562);\n      b = hh(b, c, d, a, k[14], 23, -35309556);\n      a = hh(a, b, c, d, k[1], 4, -1530992060);\n      d = hh(d, a, b, c, k[4], 11, 1272893353);\n      c = hh(c, d, a, b, k[7], 16, -155497632);\n      b = hh(b, c, d, a, k[10], 23, -1094730640);\n      a = hh(a, b, c, d, k[13], 4, 681279174);\n      d = hh(d, a, b, c, k[0], 11, -358537222);\n      c = hh(c, d, a, b, k[3], 16, -722521979);\n      b = hh(b, c, d, a, k[6], 23, 76029189);\n      a = hh(a, b, c, d, k[9], 4, -640364487);\n      d = hh(d, a, b, c, k[12], 11, -421815835);\n      c = hh(c, d, a, b, k[15], 16, 530742520);\n      b = hh(b, c, d, a, k[2], 23, -995338651);\n\n      a = ii(a, b, c, d, k[0], 6, -198630844);\n      d = ii(d, a, b, c, k[7], 10, 1126891415);\n      c = ii(c, d, a, b, k[14], 15, -1416354905);\n      b = ii(b, c, d, a, k[5], 21, -57434055);\n      a = ii(a, b, c, d, k[12], 6, 1700485571);\n      d = ii(d, a, b, c, k[3], 10, -1894986606);\n      c = ii(c, d, a, b, k[10], 15, -1051523);\n      b = ii(b, c, d, a, k[1], 21, -2054922799);\n      a = ii(a, b, c, d, k[8], 6, 1873313359);\n      d = ii(d, a, b, c, k[15], 10, -30611744);\n      c = ii(c, d, a, b, k[6], 15, -1560198380);\n      b = ii(b, c, d, a, k[13], 21, 1309151649);\n      a = ii(a, b, c, d, k[4], 6, -145523070);\n      d = ii(d, a, b, c, k[11], 10, -1120210379);\n      c = ii(c, d, a, b, k[2], 15, 718787259);\n      b = ii(b, c, d, a, k[9], 21, -343485551);\n\n      x[0] = add32(a, x[0]);\n      x[1] = add32(b, x[1]);\n      x[2] = add32(c, x[2]);\n      x[3] = add32(d, x[3]);\n    }\n\n    function cmn(q, a, b, x, s, t) {\n      a = add32(add32(a, q), add32(x, t));\n      return add32(a << s | a >>> 32 - s, b);\n    }\n\n    function ff(a, b, c, d, x, s, t) {\n      return cmn(b & c | ~b & d, a, b, x, s, t);\n    }\n\n    function gg(a, b, c, d, x, s, t) {\n      return cmn(b & d | c & ~d, a, b, x, s, t);\n    }\n\n    function hh(a, b, c, d, x, s, t) {\n      return cmn(b ^ c ^ d, a, b, x, s, t);\n    }\n\n    function ii(a, b, c, d, x, s, t) {\n      return cmn(c ^ (b | ~d), a, b, x, s, t);\n    }\n\n    function md51(s) {\n      txt = '';\n      var n = s.length,\n          state = [1732584193, -271733879, -1732584194, 271733878],\n          i;\n      for (i = 64; i <= s.length; i += 64) {\n        md5cycle(state, md5blk(s.substring(i - 64, i)));\n      }\n      s = s.substring(i - 64);\n      var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      for (i = 0; i < s.length; i++) {\n        tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);\n      }tail[i >> 2] |= 0x80 << (i % 4 << 3);\n      if (i > 55) {\n        md5cycle(state, tail);\n        for (i = 0; i < 16; i++) {\n          tail[i] = 0;\n        }\n      }\n      tail[14] = n * 8;\n      md5cycle(state, tail);\n      return state;\n    }\n\n    function md5blk(s) {\n      var md5blks = [],\n          i;\n      for (i = 0; i < 64; i += 4) {\n        md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n      }\n      return md5blks;\n    }\n\n    var hex_chr = '0123456789abcdef'.split('');\n\n    function rhex(n) {\n      var s = '',\n          j = 0;\n      for (; j < 4; j++) {\n        s += hex_chr[n >> j * 8 + 4 & 0x0F] + hex_chr[n >> j * 8 & 0x0F];\n      }return s;\n    }\n\n    function hex(x) {\n      for (var i = 0; i < x.length; i++) {\n        x[i] = rhex(x[i]);\n      }return x.join('');\n    }\n\n    function md5(s) {\n      return hex(md51(s));\n    }\n\n    var add32 = function add32(a, b) {\n      return a + b & 0xFFFFFFFF;\n    };\n\n    if (md5('hello') !== '5d41402abc4b2a76b9719d911017c592') {\n      add32 = function add32(x, y) {\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n            msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return msw << 16 | lsw & 0xFFFF;\n      };\n    }\n\n    return md5(str);\n  },\n\n  /* jshint ignore:end */\n\n  localStorageAvailable: function localStorageAvailable() {\n    var context = util.getGlobalContext();\n\n    if (!('localStorage' in context)) {\n      return false;\n    }\n\n    try {\n      context.localStorage.setItem('rs-check', 1);\n      context.localStorage.removeItem('rs-check');\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\nmodule.exports = util;\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar log = __webpack_require__(1);\n\n/**\n * Interface: eventhandling\n */\nvar methods = {\n  /**\n   * Method: addEventListener\n   *\n   * Install an event handler for the given event name\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    if (typeof eventName !== 'string') {\n      throw new Error('Argument eventName should be a string');\n    }\n    if (typeof handler !== 'function') {\n      throw new Error('Argument handler should be a function');\n    }\n    log('[Eventhandling] Adding event listener', eventName);\n    this._validateEvent(eventName);\n    this._handlers[eventName].push(handler);\n  },\n\n  /**\n   * Method: removeEventListener\n   *\n   * Remove a previously installed event handler\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    this._validateEvent(eventName);\n    var hl = this._handlers[eventName].length;\n    for (var i = 0; i < hl; i++) {\n      if (this._handlers[eventName][i] === handler) {\n        this._handlers[eventName].splice(i, 1);\n        return;\n      }\n    }\n  },\n\n  _emit: function _emit(eventName) {\n    this._validateEvent(eventName);\n    var args = Array.prototype.slice.call(arguments, 1);\n    this._handlers[eventName].slice().forEach(function (handler) {\n      handler.apply(this, args);\n    });\n  },\n\n  _validateEvent: function _validateEvent(eventName) {\n    if (!(eventName in this._handlers)) {\n      throw new Error(\"Unknown event: \" + eventName);\n    }\n  },\n\n  _delegateEvent: function _delegateEvent(eventName, target) {\n    target.on(eventName, function (event) {\n      this._emit(eventName, event);\n    }.bind(this));\n  },\n\n  _addEvent: function _addEvent(eventName) {\n    this._handlers[eventName] = [];\n  }\n};\n\n/**\n * Method: eventhandling.on\n *\n * Alias for <addEventListener>\n **/\nmethods.on = methods.addEventListener;\n\n/**\n * Method: eventhandling.off\n *\n * Alias for <removeEventListener>\n **/\nmethods.off = methods.removeEventListener;\n\n/**\n * Function: eventHandling\n *\n * Mixes event handling functionality into an object.\n *\n * The first parameter is always the object to be extended.\n * All remaining parameter are expected to be strings, interpreted as valid event\n * names.\n *\n * Example:\n *   (start code)\n *   var MyConstructor = function () {\n *     eventHandling(this, 'connected', 'disconnected');\n *\n *     this._emit('connected');\n *     this._emit('disconnected');\n *     // This would throw an exception:\n *     // this._emit('something-else');\n *   };\n *\n *   var myObject = new MyConstructor();\n *   myObject.on('connected', function () { console.log('connected'); });\n *   myObject.on('disconnected', function () { console.log('disconnected'); });\n *   // This would throw an exception as well:\n *   // myObject.on('something-else', function () {});\n *   (end code)\n */\nmodule.exports = function (object) {\n  var eventNames = Array.prototype.slice.call(arguments, 1);\n  for (var key in methods) {\n    object[key] = methods[key];\n  }\n  object._handlers = {};\n  eventNames.forEach(function (eventName) {\n    object._addEvent(eventName);\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnRoYW5kbGluZy5qcz83NjIzIl0sIm5hbWVzIjpbImxvZyIsInJlcXVpcmUiLCJtZXRob2RzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJFcnJvciIsIl92YWxpZGF0ZUV2ZW50IiwiX2hhbmRsZXJzIiwicHVzaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJobCIsImxlbmd0aCIsImkiLCJzcGxpY2UiLCJfZW1pdCIsImFyZ3MiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsImZvckVhY2giLCJhcHBseSIsIl9kZWxlZ2F0ZUV2ZW50IiwidGFyZ2V0Iiwib24iLCJldmVudCIsImJpbmQiLCJfYWRkRXZlbnQiLCJvZmYiLCJtb2R1bGUiLCJleHBvcnRzIiwib2JqZWN0IiwiZXZlbnROYW1lcyIsImtleSJdLCJtYXBwaW5ncyI6Ijs7QUFBRSxJQUFJQSxNQUFNLG1CQUFBQyxDQUFRLENBQVIsQ0FBVjs7QUFFQTs7O0FBR0EsSUFBSUMsVUFBVTtBQUNaOzs7OztBQUtBQyxvQkFBa0IsMEJBQVVDLFNBQVYsRUFBcUJDLE9BQXJCLEVBQThCO0FBQzlDLFFBQUksT0FBT0QsU0FBUCxLQUFzQixRQUExQixFQUFvQztBQUNsQyxZQUFNLElBQUlFLEtBQUosQ0FBVSx1Q0FBVixDQUFOO0FBQ0Q7QUFDRCxRQUFJLE9BQU9ELE9BQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsWUFBTSxJQUFJQyxLQUFKLENBQVUsdUNBQVYsQ0FBTjtBQUNEO0FBQ0ROLFFBQUksdUNBQUosRUFBNkNJLFNBQTdDO0FBQ0EsU0FBS0csY0FBTCxDQUFvQkgsU0FBcEI7QUFDQSxTQUFLSSxTQUFMLENBQWVKLFNBQWYsRUFBMEJLLElBQTFCLENBQStCSixPQUEvQjtBQUNELEdBaEJXOztBQWtCWjs7Ozs7QUFLQUssdUJBQXFCLDZCQUFVTixTQUFWLEVBQXFCQyxPQUFyQixFQUE4QjtBQUNqRCxTQUFLRSxjQUFMLENBQW9CSCxTQUFwQjtBQUNBLFFBQUlPLEtBQUssS0FBS0gsU0FBTCxDQUFlSixTQUFmLEVBQTBCUSxNQUFuQztBQUNBLFNBQUssSUFBSUMsSUFBRSxDQUFYLEVBQWFBLElBQUVGLEVBQWYsRUFBa0JFLEdBQWxCLEVBQXVCO0FBQ3JCLFVBQUksS0FBS0wsU0FBTCxDQUFlSixTQUFmLEVBQTBCUyxDQUExQixNQUFpQ1IsT0FBckMsRUFBOEM7QUFDNUMsYUFBS0csU0FBTCxDQUFlSixTQUFmLEVBQTBCVSxNQUExQixDQUFpQ0QsQ0FBakMsRUFBb0MsQ0FBcEM7QUFDQTtBQUNEO0FBQ0Y7QUFDRixHQWhDVzs7QUFrQ1pFLFNBQU8sZUFBVVgsU0FBVixFQUFxQjtBQUMxQixTQUFLRyxjQUFMLENBQW9CSCxTQUFwQjtBQUNBLFFBQUlZLE9BQU9DLE1BQU1DLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkMsU0FBM0IsRUFBc0MsQ0FBdEMsQ0FBWDtBQUNBLFNBQUtiLFNBQUwsQ0FBZUosU0FBZixFQUEwQmUsS0FBMUIsR0FBa0NHLE9BQWxDLENBQTBDLFVBQVVqQixPQUFWLEVBQW1CO0FBQzNEQSxjQUFRa0IsS0FBUixDQUFjLElBQWQsRUFBb0JQLElBQXBCO0FBQ0QsS0FGRDtBQUdELEdBeENXOztBQTBDWlQsa0JBQWdCLHdCQUFVSCxTQUFWLEVBQXFCO0FBQ25DLFFBQUksRUFBR0EsYUFBYSxLQUFLSSxTQUFyQixDQUFKLEVBQXFDO0FBQ25DLFlBQU0sSUFBSUYsS0FBSixDQUFVLG9CQUFvQkYsU0FBOUIsQ0FBTjtBQUNEO0FBQ0YsR0E5Q1c7O0FBZ0Rab0Isa0JBQWdCLHdCQUFVcEIsU0FBVixFQUFxQnFCLE1BQXJCLEVBQTZCO0FBQzNDQSxXQUFPQyxFQUFQLENBQVV0QixTQUFWLEVBQXFCLFVBQVV1QixLQUFWLEVBQWlCO0FBQ3BDLFdBQUtaLEtBQUwsQ0FBV1gsU0FBWCxFQUFzQnVCLEtBQXRCO0FBQ0QsS0FGb0IsQ0FFbkJDLElBRm1CLENBRWQsSUFGYyxDQUFyQjtBQUdELEdBcERXOztBQXNEWkMsYUFBVyxtQkFBVXpCLFNBQVYsRUFBcUI7QUFDOUIsU0FBS0ksU0FBTCxDQUFlSixTQUFmLElBQTRCLEVBQTVCO0FBQ0Q7QUF4RFcsQ0FBZDs7QUEyREE7Ozs7O0FBS0FGLFFBQVF3QixFQUFSLEdBQWF4QixRQUFRQyxnQkFBckI7O0FBRUE7Ozs7O0FBS0FELFFBQVE0QixHQUFSLEdBQWM1QixRQUFRUSxtQkFBdEI7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJCRHFCLE9BQU9DLE9BQVAsR0FBaUIsVUFBVUMsTUFBVixFQUFrQjtBQUNoQyxNQUFJQyxhQUFhakIsTUFBTUMsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCQyxTQUEzQixFQUFzQyxDQUF0QyxDQUFqQjtBQUNBLE9BQUssSUFBSWMsR0FBVCxJQUFnQmpDLE9BQWhCLEVBQXlCO0FBQ3ZCK0IsV0FBT0UsR0FBUCxJQUFjakMsUUFBUWlDLEdBQVIsQ0FBZDtBQUNEO0FBQ0RGLFNBQU96QixTQUFQLEdBQW1CLEVBQW5CO0FBQ0EwQixhQUFXWixPQUFYLENBQW1CLFVBQVVsQixTQUFWLEVBQXFCO0FBQ3RDNkIsV0FBT0osU0FBUCxDQUFpQnpCLFNBQWpCO0FBQ0QsR0FGRDtBQUdELENBVEYiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIiAgdmFyIGxvZyA9IHJlcXVpcmUoJy4vbG9nJyk7XG4gIFxuICAvKipcbiAgICogSW50ZXJmYWNlOiBldmVudGhhbmRsaW5nXG4gICAqL1xuICB2YXIgbWV0aG9kcyA9IHtcbiAgICAvKipcbiAgICAgKiBNZXRob2Q6IGFkZEV2ZW50TGlzdGVuZXJcbiAgICAgKlxuICAgICAqIEluc3RhbGwgYW4gZXZlbnQgaGFuZGxlciBmb3IgdGhlIGdpdmVuIGV2ZW50IG5hbWVcbiAgICAgKi9cbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICBpZiAodHlwZW9mKGV2ZW50TmFtZSkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXJndW1lbnQgZXZlbnROYW1lIHNob3VsZCBiZSBhIHN0cmluZycpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZihoYW5kbGVyKSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IGhhbmRsZXIgc2hvdWxkIGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIGxvZygnW0V2ZW50aGFuZGxpbmddIEFkZGluZyBldmVudCBsaXN0ZW5lcicsIGV2ZW50TmFtZSk7XG4gICAgICB0aGlzLl92YWxpZGF0ZUV2ZW50KGV2ZW50TmFtZSk7XG4gICAgICB0aGlzLl9oYW5kbGVyc1tldmVudE5hbWVdLnB1c2goaGFuZGxlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogcmVtb3ZlRXZlbnRMaXN0ZW5lclxuICAgICAqXG4gICAgICogUmVtb3ZlIGEgcHJldmlvdXNseSBpbnN0YWxsZWQgZXZlbnQgaGFuZGxlclxuICAgICAqL1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIChldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIHRoaXMuX3ZhbGlkYXRlRXZlbnQoZXZlbnROYW1lKTtcbiAgICAgIHZhciBobCA9IHRoaXMuX2hhbmRsZXJzW2V2ZW50TmFtZV0ubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaT0wO2k8aGw7aSsrKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYW5kbGVyc1tldmVudE5hbWVdW2ldID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgdGhpcy5faGFuZGxlcnNbZXZlbnROYW1lXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9lbWl0OiBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICB0aGlzLl92YWxpZGF0ZUV2ZW50KGV2ZW50TmFtZSk7XG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICB0aGlzLl9oYW5kbGVyc1tldmVudE5hbWVdLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIF92YWxpZGF0ZUV2ZW50OiBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBpZiAoISAoZXZlbnROYW1lIGluIHRoaXMuX2hhbmRsZXJzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGV2ZW50OiBcIiArIGV2ZW50TmFtZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9kZWxlZ2F0ZUV2ZW50OiBmdW5jdGlvbiAoZXZlbnROYW1lLCB0YXJnZXQpIHtcbiAgICAgIHRhcmdldC5vbihldmVudE5hbWUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl9lbWl0KGV2ZW50TmFtZSwgZXZlbnQpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9LFxuXG4gICAgX2FkZEV2ZW50OiBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICB0aGlzLl9oYW5kbGVyc1tldmVudE5hbWVdID0gW107XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBNZXRob2Q6IGV2ZW50aGFuZGxpbmcub25cbiAgICpcbiAgICogQWxpYXMgZm9yIDxhZGRFdmVudExpc3RlbmVyPlxuICAgKiovXG4gIG1ldGhvZHMub24gPSBtZXRob2RzLmFkZEV2ZW50TGlzdGVuZXI7XG5cbiAgLyoqXG4gICAqIE1ldGhvZDogZXZlbnRoYW5kbGluZy5vZmZcbiAgICpcbiAgICogQWxpYXMgZm9yIDxyZW1vdmVFdmVudExpc3RlbmVyPlxuICAgKiovXG4gIG1ldGhvZHMub2ZmID0gbWV0aG9kcy5yZW1vdmVFdmVudExpc3RlbmVyO1xuXG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uOiBldmVudEhhbmRsaW5nXG4gICAqXG4gICAqIE1peGVzIGV2ZW50IGhhbmRsaW5nIGZ1bmN0aW9uYWxpdHkgaW50byBhbiBvYmplY3QuXG4gICAqXG4gICAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgYWx3YXlzIHRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWQuXG4gICAqIEFsbCByZW1haW5pbmcgcGFyYW1ldGVyIGFyZSBleHBlY3RlZCB0byBiZSBzdHJpbmdzLCBpbnRlcnByZXRlZCBhcyB2YWxpZCBldmVudFxuICAgKiBuYW1lcy5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogICAoc3RhcnQgY29kZSlcbiAgICogICB2YXIgTXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgICogICAgIGV2ZW50SGFuZGxpbmcodGhpcywgJ2Nvbm5lY3RlZCcsICdkaXNjb25uZWN0ZWQnKTtcbiAgICpcbiAgICogICAgIHRoaXMuX2VtaXQoJ2Nvbm5lY3RlZCcpO1xuICAgKiAgICAgdGhpcy5fZW1pdCgnZGlzY29ubmVjdGVkJyk7XG4gICAqICAgICAvLyBUaGlzIHdvdWxkIHRocm93IGFuIGV4Y2VwdGlvbjpcbiAgICogICAgIC8vIHRoaXMuX2VtaXQoJ3NvbWV0aGluZy1lbHNlJyk7XG4gICAqICAgfTtcbiAgICpcbiAgICogICB2YXIgbXlPYmplY3QgPSBuZXcgTXlDb25zdHJ1Y3RvcigpO1xuICAgKiAgIG15T2JqZWN0Lm9uKCdjb25uZWN0ZWQnLCBmdW5jdGlvbiAoKSB7IGNvbnNvbGUubG9nKCdjb25uZWN0ZWQnKTsgfSk7XG4gICAqICAgbXlPYmplY3Qub24oJ2Rpc2Nvbm5lY3RlZCcsIGZ1bmN0aW9uICgpIHsgY29uc29sZS5sb2coJ2Rpc2Nvbm5lY3RlZCcpOyB9KTtcbiAgICogICAvLyBUaGlzIHdvdWxkIHRocm93IGFuIGV4Y2VwdGlvbiBhcyB3ZWxsOlxuICAgKiAgIC8vIG15T2JqZWN0Lm9uKCdzb21ldGhpbmctZWxzZScsIGZ1bmN0aW9uICgpIHt9KTtcbiAgICogICAoZW5kIGNvZGUpXG4gICAqL1xuIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBldmVudE5hbWVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgICAgb2JqZWN0W2tleV0gPSBtZXRob2RzW2tleV07XG4gICAgfVxuICAgIG9iamVjdC5faGFuZGxlcnMgPSB7fTtcbiAgICBldmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgb2JqZWN0Ll9hZGRFdmVudChldmVudE5hbWUpO1xuICAgIH0pO1xuICB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2V2ZW50aGFuZGxpbmcuanMiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar log = __webpack_require__(1);\nvar util = __webpack_require__(2);\n\nfunction extractParams(url) {\n  //FF already decodes the URL fragment in document.location.hash, so use this instead:\n  var location = url || Authorize.getLocation().href,\n      hashPos = location.indexOf('#'),\n      hash;\n  if (hashPos === -1) {\n    return;\n  }\n  hash = location.substring(hashPos + 1);\n  // if hash is not of the form #key=val&key=val, it's probably not for us\n  if (hash.indexOf('=') === -1) {\n    return;\n  }\n  return hash.split('&').reduce(function (params, kvs) {\n    var kv = kvs.split('=');\n\n    if (kv[0] === 'state' && kv[1].match(/rsDiscovery/)) {\n      // extract rsDiscovery data from the state param\n      var stateValue = decodeURIComponent(kv[1]);\n      var encodedData = stateValue.substr(stateValue.indexOf('rsDiscovery=')).split('&')[0].split('=')[1];\n\n      params['rsDiscovery'] = JSON.parse(atob(encodedData));\n\n      // remove rsDiscovery param\n      stateValue = stateValue.replace(new RegExp('\\&?rsDiscovery=' + encodedData), '');\n\n      if (stateValue.length > 0) {\n        params['state'] = stateValue;\n      }\n    } else {\n      params[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    }\n\n    return params;\n  }, {});\n}\n\nvar Authorize = function Authorize(remoteStorage, authURL, scope, redirectUri, clientId) {\n  log('[Authorize] authURL = ', authURL, 'scope = ', scope, 'redirectUri = ', redirectUri, 'clientId = ', clientId);\n\n  // keep track of the discovery data during redirect if we can't save it in localStorage\n  if (!util.localStorageAvailable() && remoteStorage.backend === 'remotestorage') {\n    redirectUri += redirectUri.indexOf('#') > 0 ? '&' : '#';\n\n    var discoveryData = {\n      userAddress: remoteStorage.remote.userAddress,\n      href: remoteStorage.remote.href,\n      storageApi: remoteStorage.remote.storageApi,\n      properties: remoteStorage.remote.properties\n    };\n\n    redirectUri += 'rsDiscovery=' + btoa(JSON.stringify(discoveryData));\n  }\n\n  var url = authURL,\n      hashPos = redirectUri.indexOf('#');\n  url += authURL.indexOf('?') > 0 ? '&' : '?';\n  url += 'redirect_uri=' + encodeURIComponent(redirectUri.replace(/#.*$/, ''));\n  url += '&scope=' + encodeURIComponent(scope);\n  url += '&client_id=' + encodeURIComponent(clientId);\n  if (hashPos !== -1 && hashPos + 1 !== redirectUri.length) {\n    url += '&state=' + encodeURIComponent(redirectUri.substring(hashPos + 1));\n  }\n  url += '&response_type=token';\n\n  if (util.globalContext.cordova) {\n    return Authorize.openWindow(url, redirectUri, 'location=yes,clearsessioncache=yes,clearcache=yes').then(function (authResult) {\n      remoteStorage.remote.configure({\n        token: authResult.access_token\n      });\n    });\n  }\n\n  Authorize.setLocation(url);\n};\n\nAuthorize.IMPLIED_FAKE_TOKEN = false;\n\nAuthorize.Unauthorized = function () {\n  Error.apply(this, arguments);\n};\nAuthorize.Unauthorized.prototype = Object.create(Error.prototype);\n\n/**\n * Get current document location\n *\n * Override this method if access to document.location is forbidden\n */\nAuthorize.getLocation = function () {\n  return document.location;\n};\n\n/**\n * Set current document location\n *\n * Override this method if access to document.location is forbidden\n */\nAuthorize.setLocation = function (location) {\n  if (typeof location === 'string') {\n    document.location.href = location;\n  } else if ((typeof location === 'undefined' ? 'undefined' : _typeof(location)) === 'object') {\n    document.location = location;\n  } else {\n    throw \"Invalid location \" + location;\n  }\n};\n\n/**\n * Open new InAppBrowser window for OAuth in Cordova\n */\nAuthorize.openWindow = function (url, redirectUri, options) {\n  return new Promise(function (resolve, reject) {\n\n    var newWindow = open(url, '_blank', options);\n\n    if (!newWindow || newWindow.closed) {\n      return reject('Authorization popup was blocked');\n    }\n\n    var handleExit = function handleExit() {\n      return reject('Authorization was canceled');\n    };\n\n    var handleLoadstart = function handleLoadstart(event) {\n      if (event.url.indexOf(redirectUri) !== 0) {\n        return;\n      }\n\n      newWindow.removeEventListener('exit', handleExit);\n      newWindow.close();\n\n      var authResult = extractParams(event.url);\n\n      if (!authResult) {\n        return reject('Authorization error');\n      }\n\n      return resolve(authResult);\n    };\n\n    newWindow.addEventListener('loadstart', handleLoadstart);\n    newWindow.addEventListener('exit', handleExit);\n  });\n};\n\nAuthorize._rs_supported = function () {\n  return typeof document !== 'undefined';\n};\n\nvar onFeaturesLoaded;\nAuthorize._rs_init = function (remoteStorage) {\n\n  onFeaturesLoaded = function onFeaturesLoaded() {\n    var authParamsUsed = false;\n    if (params) {\n      if (params.error) {\n        throw \"Authorization server errored: \" + params.error;\n      }\n\n      // rsDiscovery came with the redirect, because it couldn't be\n      // saved in localStorage\n      if (params.rsDiscovery) {\n        remoteStorage.remote.configure(params.rsDiscovery);\n      }\n\n      if (params.access_token) {\n        remoteStorage.remote.configure({\n          token: params.access_token\n        });\n        authParamsUsed = true;\n      }\n      if (params.remotestorage) {\n        remoteStorage.connect(params.remotestorage);\n        authParamsUsed = true;\n      }\n      if (params.state) {\n        location = Authorize.getLocation();\n        Authorize.setLocation(location.href.split('#')[0] + '#' + params.state);\n      }\n    }\n    if (!authParamsUsed) {\n      remoteStorage.remote.stopWaitingForToken();\n    }\n  };\n  var params = extractParams(),\n      location;\n  if (params) {\n    location = Authorize.getLocation();\n    location.hash = '';\n  }\n  remoteStorage.on('features-loaded', onFeaturesLoaded);\n};\n\nAuthorize._rs_cleanup = function (remoteStorage) {\n  remoteStorage.removeEventListener('features-loaded', onFeaturesLoaded);\n};\n\nmodule.exports = Authorize;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports){eval('"use strict";\n\nvar config = {\n     logging: false,\n     changeEvents: {\n          local: true,\n          window: false,\n          remote: true,\n          conflict: true\n     },\n     cache: true,\n     disableFeatures: [],\n     discoveryTimeout: 10000,\n     syncInterval: 10000,\n     backgroundSyncInterval: 60000,\n     isBackground: false,\n     cordovaRedirectUri: undefined\n};\n\nmodule.exports = config;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnLmpzPzQyNjQiXSwibmFtZXMiOlsiY29uZmlnIiwibG9nZ2luZyIsImNoYW5nZUV2ZW50cyIsImxvY2FsIiwid2luZG93IiwicmVtb3RlIiwiY29uZmxpY3QiLCJjYWNoZSIsImRpc2FibGVGZWF0dXJlcyIsImRpc2NvdmVyeVRpbWVvdXQiLCJzeW5jSW50ZXJ2YWwiLCJiYWNrZ3JvdW5kU3luY0ludGVydmFsIiwiaXNCYWNrZ3JvdW5kIiwiY29yZG92YVJlZGlyZWN0VXJpIiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxTQUFTO0FBQ1pDLGNBQVMsS0FERztBQUVaQyxtQkFBYztBQUNUQyxpQkFBVSxJQUREO0FBRVRDLGtCQUFVLEtBRkQ7QUFHVEMsa0JBQVUsSUFIRDtBQUlUQyxvQkFBVTtBQUpELE1BRkY7QUFRWEMsWUFBTyxJQVJJO0FBU1hDLHNCQUFpQixFQVROO0FBVVhDLHVCQUFrQixLQVZQO0FBV1hDLG1CQUFjLEtBWEg7QUFZWEMsNkJBQXdCLEtBWmI7QUFhWEMsbUJBQWMsS0FiSDtBQWNYQyx5QkFBb0JDO0FBZFQsQ0FBYjs7QUFpQkFDLE9BQU9DLE9BQVAsR0FBaUJoQixNQUFqQiIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbmZpZyA9IHtcblx0bG9nZ2luZzogZmFsc2UsXG5cdGNoYW5nZUV2ZW50czoge1xuICAgICAgbG9jYWw6ICAgIHRydWUsXG4gICAgICB3aW5kb3c6ICAgZmFsc2UsXG4gICAgICByZW1vdGU6ICAgdHJ1ZSxcbiAgICAgIGNvbmZsaWN0OiB0cnVlXG4gIH0sXG4gIGNhY2hlOiB0cnVlLFxuICBkaXNhYmxlRmVhdHVyZXM6IFtdLFxuICBkaXNjb3ZlcnlUaW1lb3V0OiAxMDAwMCxcbiAgc3luY0ludGVydmFsOiAxMDAwMCxcbiAgYmFja2dyb3VuZFN5bmNJbnRlcnZhbDogNjAwMDAsXG4gIGlzQmFja2dyb3VuZDogZmFsc2UsXG4gIGNvcmRvdmFSZWRpcmVjdFVyaTogdW5kZWZpbmVkXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbmZpZztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29uZmlnLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==')},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction deprecate(thing, replacement) {\n  console.log('WARNING: ' + thing + ' is deprecated. Use ' + replacement + ' instead.');\n}\n\nvar eventHandling = __webpack_require__(3);\nvar util = __webpack_require__(2);\nvar config = __webpack_require__(5);\nvar _uuid = __webpack_require__(31);\n\n/**\n * Class: BaseClient\n *\n * Provides a high-level interface to access data below a given root path.\n *\n * A BaseClient deals with three types of data: folders, objects and files.\n *\n * <getListing> returns a mapping of all items within a folder. Items that\n * end with a forward slash (\"/\") are child folders. For instance:\n * {\n *   'folder/': true,\n *   'document.txt': true\n * }\n *\n * <getObject> / <storeObject> operate on JSON objects. Each object has a type.\n *\n * <getFile> / <storeFile> operates on files. Each file has a MIME type.\n *\n * <remove> operates on either objects or files (but not folders, folders are\n * created and removed implictly).\n */\nvar BaseClient = function BaseClient(storage, base) {\n  if (base[base.length - 1] !== '/') {\n    throw \"Not a folder: \" + base;\n  }\n\n  if (base === '/') {\n    // allow absolute and relative paths for the root scope.\n    this.makePath = function (path) {\n      return (path[0] === '/' ? '' : '/') + path;\n    };\n  }\n\n  /**\n   * Property: storage\n   *\n   * The <RemoteStorage> instance this <BaseClient> operates on.\n   */\n  this.storage = storage;\n\n  /**\n   * Property: base\n   *\n   * Base path this <BaseClient> operates on.\n   *\n   * For the module's privateClient this would be /<moduleName>/, for the\n   * corresponding publicClient /public/<moduleName>/.\n   */\n  this.base = base;\n\n  var parts = this.base.split('/');\n  if (parts.length > 2) {\n    this.moduleName = parts[1];\n  } else {\n    this.moduleName = 'root';\n  }\n\n  // Defined in baseclient/types.js\n  /**\n   * Property: schemas\n   *\n   * Contains schema objects of all types known to the BaseClient instance\n   **/\n\n  /**\n   * Event: change\n   *\n   * Emitted when a node changes\n   *\n   * Arguments:\n   *   event - Event object containing information about the changed node\n   *\n   * (start code)\n   * {\n   *    path: path, // Absolute path of the changed node, from the storage root\n   *    relativePath: relativePath, // Path of the changed node, relative to this baseclient's scope root\n   *    origin: 'window', 'local', 'remote', or 'conflict' // emitted by user action within the app, local data store, remote sync, or versioning conflicts\n   *    oldValue: oldBody, // Old body of the changed node (local version in conflicts; undefined if creation)\n   *    newValue: newBody, // New body of the changed node (remote version in conflicts; undefined if deletion)\n   *    lastCommonValue: lastCommonValue, //most recent known common ancestor body of 'yours' and 'theirs' in case of conflict\n   *    oldContentType: oldContentType, // Old contentType of the changed node ('yours' for conflicts; undefined if creation)\n   *    newContentType: newContentType, // New contentType of the changed node ('theirs' for conflicts; undefined if deletion)\n   *    lastCommonContentType: lastCommonContentType // Most recent known common ancestor contentType of 'yours' and 'theirs' in case of conflict\n   *  }\n   * (end code)\n   *\n   * Example of an event with origin 'local' (fired on page load):\n   *\n   * (start code)\n   * {\n   *    path: '/public/design/color.txt',\n   *    relativePath: 'color.txt',\n   *    origin: 'local',\n   *    oldValue: undefined,\n   *    newValue: 'white',\n   *    oldContentType: undefined,\n   *    newContentType: 'text/plain'\n   *  }\n   * (end code)\n   *\n   * Example of a conflict:\n   * Say you changed 'color.txt' from 'white' to 'blue'; if you have set `config.changeEvents.window` to `true`,\n   * then you will receive:\n   *\n   * (start code)\n   * {\n   *    path: '/public/design/color.txt',\n   *    relativePath: 'color.txt',\n   *    origin: 'window',\n   *    oldValue: 'white',\n   *    newValue: 'blue',\n   *    oldContentType: 'text/plain',\n   *    newContentType: 'text/plain'\n   *  }\n   * (end code)\n   *\n   * But when this change is pushed out by asynchronous synchronization, this change may rejected by the\n   * server, if the remote version has in the meantime changed from 'white' to  for instance 'red'; this will then lead to a change\n   * event with origin 'conflict' (usually a few seconds after the event with origin 'window', if you had that activated). Note\n   * that since you already changed it from 'white' to 'blue' in the local version a few seconds ago, `oldValue` is now your local\n   * value of 'blue':\n   *\n   * (start code)\n   * {\n   *    path: '/public/design/color.txt',\n   *    relativePath: 'color.txt',\n   *    origin: 'conflict',\n   *    oldValue: 'blue',\n   *    newValue: 'red',\n   *    lastCommonValue: 'white',\n   *    oldContentType: 'text/plain,\n   *    newContentType: 'text/plain'\n   *    lastCommonContentType: 'text/plain'\n   *  }\n   * (end code)\n   *\n   * In practice, you should always redraw your views to display the content of the `newValue` field when a change event is received,\n   * regardless of its origin. Events with origin 'local' are fired conveniently during the page load, so that you can fill your views\n   * when the page loads. Events with origin 'window' are fired whenever you change a value by calling a method on the baseClient;\n   * these are disabled by default. Events with origin 'remote' are fired when remote changes are discovered during sync (only for caching\n   * startegies 'SEEN' and 'ALL'). Events with origin 'conflict' are fired when a conflict occurs while pushing out your local changes to\n   * the remote store in asynchronous synchronization (see example above).\n   **/\n\n  eventHandling(this, 'change');\n  this.on = this.on.bind(this);\n  storage.onChange(this.base, this._fireChange.bind(this));\n};\n\nBaseClient.prototype = {\n\n  extend: function extend(object) {\n    for (var key in object) {\n      this[key] = object[key];\n    }\n    return this;\n  },\n\n  /**\n   * Method: scope\n   *\n   * Returns a new <BaseClient> operating on a subpath of the current <base> path.\n   */\n  scope: function scope(path) {\n    return new BaseClient(this.storage, this.makePath(path));\n  },\n\n  // folder operations\n\n  /**\n   * Method: getListing\n   *\n   * Get a list of child nodes below a given path.\n   *\n   * The callback semantics of getListing are identical to those of getObject.\n   *\n   * Parameters:\n   *   path   - The path to query. It MUST end with a forward slash.\n   *   maxAge - Either false or the maximum age of cached listing in\n   *            milliseconds. Defaults to false in anonymous mode and to\n   *            2*syncInterval in connected mode.\n   *\n   * Returns:\n   *\n   *   A promise for an object, representing child nodes. If the maxAge\n   *   requirement cannot be met because of network problems, this promise\n   *   will be rejected. If the maxAge requirement is set to false or the\n   *   library is in offline state, the promise will always be fulfilled with\n   *   data from the local store.\n   *\n   *   Keys ending in a forward slash represent *folder nodes*, while all\n   *   other keys represent *data nodes*.\n   *\n   *   For spec versions <= 01, the data node information will contain only\n   *   the item's ETag. For later spec versions, it will also contain the\n   *   content type and -length of the item.\n   *\n   * Example:\n   *   (start code)\n   *   client.getListing('', false).then(function (listing) {\n   *     // listing is for instance:\n   *     // {\n   *     //   'folder/': true,\n   *     //   'document.txt': true\n   *     // }\n   *   });\n   *   (end code)\n   */\n  getListing: function getListing(path, maxAge) {\n    if (typeof path !== 'string') {\n      path = '';\n    } else if (path.length > 0 && path[path.length - 1] !== '/') {\n      return Promise.reject(\"Not a folder: \" + path);\n    }\n    return this.storage.get(this.makePath(path), maxAge).then(function (r) {\n      return r.statusCode === 404 ? {} : r.body;\n    });\n  },\n\n  /**\n   * Method: getAll\n   *\n   * Get all objects directly below a given path.\n   *\n   * Parameters:\n   *   path   - Path to the folder.\n   *   maxAge - Either false or the maximum age of cached objects in\n   *            milliseconds. Defaults to false in anonymous mode and to\n   *            2*syncInterval in connected mode.\n   *\n   * Returns:\n   *   A promise for an object in the form { path : object, ... }. If the\n   *   maxAge requirement cannot be met because of network problems, this\n   *   promise will be rejected. If the maxAge requirement is set to false,\n   *   the promise will always be fulfilled with data from the local store.\n   *\n   *   For items that are not JSON-stringified objects (e.g. stored using\n   *   `storeFile` instead of `storeObject`), the object's value is filled in\n   *   with `true`.\n   *\n   * Example:\n   *   (start code)\n   *   client.getAll('', false).then(function (objects) {\n   *     for (var key in objects) {\n   *       console.log('- ' + key + ': ', objects[key]);\n   *     }\n   *   });\n   *   (end code)\n   */\n  getAll: function getAll(path, maxAge) {\n    if (typeof path !== 'string') {\n      path = '';\n    } else if (path.length > 0 && path[path.length - 1] !== '/') {\n      return Promise.reject(\"Not a folder: \" + path);\n    }\n\n    return this.storage.get(this.makePath(path), maxAge).then(function (r) {\n      if (r.statusCode === 404) {\n        return {};\n      }\n      if (_typeof(r.body) === 'object') {\n        var keys = Object.keys(r.body);\n        if (keys.length === 0) {\n          // treat this like 404. it probably means a folder listing that\n          // has changes that haven't been pushed out yet.\n          return {};\n        }\n\n        var calls = keys.map(function (key) {\n          return this.storage.get(this.makePath(path + key), maxAge).then(function (o) {\n            if (typeof o.body === 'string') {\n              try {\n                o.body = JSON.parse(o.body);\n              } catch (e) {}\n            }\n            if (_typeof(o.body) === 'object') {\n              r.body[key] = o.body;\n            }\n          });\n        }.bind(this));\n        return Promise.all(calls).then(function () {\n          return r.body;\n        });\n      }\n    }.bind(this));\n  },\n\n  // file operations\n\n  /**\n   * Method: getFile\n   *\n   * Get the file at the given path. A file is raw data, as opposed to\n   * a JSON object (use <getObject> for that).\n   *\n   * Except for the return value structure, getFile works exactly like\n   * getObject.\n   *\n   * Parameters:\n   *   path   - See getObject.\n   *   maxAge - Either false or the maximum age of cached file in\n   *            milliseconds. Defaults to false in anonymous mode and to\n   *            2*syncInterval in connected mode.\n   *\n   * Returns:\n   *   A promise for an object:\n   *\n   *   mimeType - String representing the MIME Type of the document.\n   *   data     - Raw data of the document (either a string or an ArrayBuffer)\n   *\n   *   If the maxAge requirement cannot be met because of network problems, this\n   *   promise will be rejected. If the maxAge requirement is set to false, the\n   *   promise will always be fulfilled with data from the local store.\n   *\n   * Example:\n   *   (start code)\n   *   // Display an image:\n   *   client.getFile('path/to/some/image', false).then(function (file) {\n   *     var blob = new Blob([file.data], { type: file.mimeType });\n   *     var targetElement = document.findElementById('my-image-element');\n   *     targetElement.src = window.URL.createObjectURL(blob);\n   *   });\n   *   (end code)\n   */\n  getFile: function getFile(path, maxAge) {\n    if (typeof path !== 'string') {\n      return Promise.reject('Argument \\'path\\' of baseClient.getFile must be a string');\n    }\n    return this.storage.get(this.makePath(path), maxAge).then(function (r) {\n      return {\n        data: r.body,\n        contentType: r.contentType,\n        revision: r.revision // (this is new)\n      };\n    });\n  },\n\n  /**\n   * Method: storeFile\n   *\n   * Store raw data at a given path.\n   *\n   * Parameters:\n   *   mimeType - MIME media type of the data being stored\n   *   path     - path relative to the module root. MAY NOT end in a forward slash.\n   *   data     - string, ArrayBuffer or ArrayBufferView of raw data to store\n   *\n   * The given mimeType will later be returned, when retrieving the data\n   * using <getFile>.\n   *\n   * Example (UTF-8 data):\n   *   (start code)\n   *   client.storeFile('text/html', 'index.html', '<h1>Hello World!</h1>');\n   *   (end code)\n   *\n   * Example (Binary data):\n   *   (start code)\n   *   // MARKUP:\n   *   <input type=\"file\" id=\"file-input\">\n   *   // CODE:\n   *   var input = document.getElementById('file-input');\n   *   var file = input.files[0];\n   *   var fileReader = new FileReader();\n   *\n   *   fileReader.onload = function () {\n   *     client.storeFile(file.type, file.name, fileReader.result);\n   *   };\n   *\n   *   fileReader.readAsArrayBuffer(file);\n   *   (end code)\n   *\n   */\n  storeFile: function storeFile(mimeType, path, body) {\n    if (typeof mimeType !== 'string') {\n      return Promise.reject('Argument \\'mimeType\\' of baseClient.storeFile must be a string');\n    }\n    if (typeof path !== 'string') {\n      return Promise.reject('Argument \\'path\\' of baseClient.storeFile must be a string');\n    }\n    if (typeof body !== 'string' && (typeof body === 'undefined' ? 'undefined' : _typeof(body)) !== 'object') {\n      return Promise.reject('Argument \\'body\\' of baseClient.storeFile must be a string, ArrayBuffer, or ArrayBufferView');\n    }\n    if (!this.storage.access.checkPathPermission(this.makePath(path), 'rw')) {\n      console.warn('WARNING: Editing a document to which only read access (\\'r\\') was claimed');\n    }\n\n    return this.storage.put(this.makePath(path), body, mimeType).then(function (r) {\n      if (r.statusCode === 200 || r.statusCode === 201) {\n        return r.revision;\n      } else {\n        return Promise.reject(\"Request (PUT \" + this.makePath(path) + \") failed with status: \" + r.statusCode);\n      }\n    }.bind(this));\n  },\n\n  // object operations\n\n  /**\n   * Method: getObject\n   *\n   * Get a JSON object from given path.\n   *\n   * Parameters:\n   *   path   - Relative path from the module root (without leading slash).\n   *   maxAge - Either false or the maximum age of cached object in\n   *            milliseconds. Defaults to false in anonymous mode and to\n   *            2*syncInterval in connected mode.\n   *\n   * Returns:\n   *   A promise for the object. If the maxAge requirement cannot be met\n   *   because of network problems, this promise will be rejected. If the\n   *   maxAge requirement is set to false, the promise will always be\n   *   fulfilled with data from the local store.\n   *\n   * Example:\n   *   (start code)\n   *   client.getObject('/path/to/object', false).\n   *     then(function (object) {\n   *       // object is either an object or null\n   *     });\n   *   (end code)\n   */\n  getObject: function getObject(path, maxAge) {\n    if (typeof path !== 'string') {\n      return Promise.reject('Argument \\'path\\' of baseClient.getObject must be a string');\n    }\n    return this.storage.get(this.makePath(path), maxAge).then(function (r) {\n      if (_typeof(r.body) === 'object') {\n        // will be the case for documents stored with rs.js <= 0.10.0-beta2\n        return r.body;\n      } else if (typeof r.body === 'string') {\n        try {\n          return JSON.parse(r.body);\n        } catch (e) {\n          throw \"Not valid JSON: \" + this.makePath(path);\n        }\n      } else if (typeof r.body !== 'undefined' && r.statusCode === 200) {\n        return Promise.reject(\"Not an object: \" + this.makePath(path));\n      }\n    }.bind(this));\n  },\n\n  /**\n   * Method: storeObject\n   *\n   * Store object at given path. Triggers synchronization.\n   *\n   * Parameters:\n   *\n   *   type     - unique type of this object within this module. See description below.\n   *   path     - path relative to the module root.\n   *   object   - an object to be saved to the given node. It must be serializable as JSON.\n   *\n   * Returns:\n   *   A promise to store the object. The promise fails with a ValidationError, when validations fail.\n   *\n   *\n   * What about the type?:\n   *\n   *   A great thing about having data on the web, is to be able to link to\n   *   it and rearrange it to fit the current circumstances. To facilitate\n   *   that, eventually you need to know how the data at hand is structured.\n   *   For documents on the web, this is usually done via a MIME type. The\n   *   MIME type of JSON objects however, is always application/json.\n   *   To add that extra layer of \"knowing what this object is\", remoteStorage\n   *   aims to use <JSON-LD at http://json-ld.org/>.\n   *   A first step in that direction, is to add a *@context attribute* to all\n   *   JSON data put into remoteStorage.\n   *   Now that is what the *type* is for.\n   *\n   *   Within remoteStorage.js, @context values are built using three components:\n   *     http://remotestorage.io/spec/modules/ - A prefix to guarantee uniqueness\n   *     the module name     - module names should be unique as well\n   *     the type given here - naming this particular kind of object within this module\n   *\n   *   In retrospect that means, that whenever you introduce a new \"type\" in calls to\n   *   storeObject, you should make sure that once your code is in the wild, future\n   *   versions of the code are compatible with the same JSON structure.\n   *\n   * How to define types?:\n   *\n   *   See <declareType> for examples.\n   */\n  storeObject: function storeObject(typeAlias, path, object) {\n    if (typeof typeAlias !== 'string') {\n      return Promise.reject('Argument \\'typeAlias\\' of baseClient.storeObject must be a string');\n    }\n    if (typeof path !== 'string') {\n      return Promise.reject('Argument \\'path\\' of baseClient.storeObject must be a string');\n    }\n    if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object') {\n      return Promise.reject('Argument \\'object\\' of baseClient.storeObject must be an object');\n    }\n\n    this._attachType(object, typeAlias);\n\n    try {\n      var validationResult = this.validate(object);\n      if (!validationResult.valid) {\n        return Promise.reject(validationResult);\n      }\n    } catch (exc) {\n      return Promise.reject(exc);\n    }\n\n    return this.storage.put(this.makePath(path), JSON.stringify(object), 'application/json; charset=UTF-8').then(function (r) {\n      if (r.statusCode === 200 || r.statusCode === 201) {\n        return r.revision;\n      } else {\n        return Promise.reject(\"Request (PUT \" + this.makePath(path) + \") failed with status: \" + r.statusCode);\n      }\n    }.bind(this));\n  },\n\n  // generic operations\n\n  /**\n   * Method: remove\n   *\n   * Remove node at given path from storage. Triggers synchronization.\n   *\n   * Parameters:\n   *   path     - Path relative to the module root.\n   */\n  remove: function remove(path) {\n    if (typeof path !== 'string') {\n      return Promise.reject('Argument \\'path\\' of baseClient.remove must be a string');\n    }\n    if (!this.storage.access.checkPathPermission(this.makePath(path), 'rw')) {\n      console.warn('WARNING: Removing a document to which only read access (\\'r\\') was claimed');\n    }\n\n    return this.storage.delete(this.makePath(path));\n  },\n\n  cache: function cache(path, strategy) {\n    if (typeof path !== 'string') {\n      throw 'Argument \\'path\\' of baseClient.cache must be a string';\n    }\n    if (strategy === false) {\n      deprecate('caching strategy <false>', '<\"FLUSH\">');\n      strategy = 'FLUSH';\n    } else if (strategy === undefined) {\n      strategy = 'ALL';\n    } else if (typeof strategy !== 'string') {\n      deprecate('that caching strategy', '<\"ALL\">');\n      strategy = 'ALL';\n    }\n    if (strategy !== 'FLUSH' && strategy !== 'SEEN' && strategy !== 'ALL') {\n      throw 'Argument \\'strategy\\' of baseclient.cache must be one of ' + '[\"FLUSH\", \"SEEN\", \"ALL\"]';\n    }\n    this.storage.caching.set(this.makePath(path), strategy);\n    return this;\n  },\n\n  flush: function flush(path) {\n    return this.storage.local.flush(path);\n  },\n\n  makePath: function makePath(path) {\n    return this.base + (path || '');\n  },\n\n  _fireChange: function _fireChange(event) {\n    if (config.changeEvents[event.origin]) {\n      ['new', 'old', 'lastCommon'].forEach(function (fieldNamePrefix) {\n        if (!event[fieldNamePrefix + 'ContentType'] || /^application\\/(.*)json(.*)/.exec(event[fieldNamePrefix + 'ContentType'])) {\n          if (typeof event[fieldNamePrefix + 'Value'] === 'string') {\n            try {\n              event[fieldNamePrefix + 'Value'] = JSON.parse(event[fieldNamePrefix + 'Value']);\n            } catch (e) {}\n          }\n        }\n      });\n      this._emit('change', event);\n    }\n  },\n\n  _cleanPath: util.cleanPath,\n\n  /**\n   * Method: getItemURL\n   *\n   * Retrieve full URL of item\n   *\n   * Parameters:\n   *   path     - Path relative to the module root.\n   */\n  getItemURL: function getItemURL(path) {\n    if (typeof path !== 'string') {\n      throw 'Argument \\'path\\' of baseClient.getItemURL must be a string';\n    }\n    if (this.storage.connected) {\n      path = this._cleanPath(this.makePath(path));\n      return this.storage.remote.href + path;\n    } else {\n      return undefined;\n    }\n  },\n\n  uuid: function uuid() {\n    return _uuid();\n  }\n\n};\n\n/**\n * Method: RS#scope\n *\n * Returns a new <RS.BaseClient> scoped to the given path.\n *\n * Parameters:\n *   path - Root path of new BaseClient.\n *\n *\n * Example:\n *   (start code)\n *\n *   var foo = remoteStorage.scope('/foo/');\n *\n *   // PUTs data \"baz\" to path /foo/bar\n *   foo.storeFile('text/plain', 'bar', 'baz');\n *\n *   var something = foo.scope('something/');\n *\n *   // GETs listing from path /foo/something/bla/\n *   something.getListing('bla/');\n *\n *   (end code)\n *\n */\nBaseClient._rs_init = function () {};\n\n/* e.g.:\nremoteStorage.defineModule('locations', function (priv, pub) {\n  return {\n    exports: {\n      features: priv.scope('features/').defaultType('feature'),\n      collections: priv.scope('collections/').defaultType('feature-collection');\n    }\n  };\n});\n*/\n\n// Defined in baseclient/types.js\n/**\n * Method: declareType\n *\n * Declare a remoteStorage object type using a JSON schema. See\n * <BaseClient.Types>\n **/\n\nmodule.exports = BaseClient;\n\n// needs to be after the export to change prototype\n// this should be different (we need to import `types` functionality, not modifing BaseClient.prototype from there)\n__webpack_require__(23);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmFzZWNsaWVudC5qcz9jMDk1Il0sIm5hbWVzIjpbImRlcHJlY2F0ZSIsInRoaW5nIiwicmVwbGFjZW1lbnQiLCJjb25zb2xlIiwibG9nIiwiZXZlbnRIYW5kbGluZyIsInJlcXVpcmUiLCJ1dGlsIiwiY29uZmlnIiwidXVpZCIsIkJhc2VDbGllbnQiLCJzdG9yYWdlIiwiYmFzZSIsImxlbmd0aCIsIm1ha2VQYXRoIiwicGF0aCIsInBhcnRzIiwic3BsaXQiLCJtb2R1bGVOYW1lIiwib24iLCJiaW5kIiwib25DaGFuZ2UiLCJfZmlyZUNoYW5nZSIsInByb3RvdHlwZSIsImV4dGVuZCIsIm9iamVjdCIsImtleSIsInNjb3BlIiwiZ2V0TGlzdGluZyIsIm1heEFnZSIsIlByb21pc2UiLCJyZWplY3QiLCJnZXQiLCJ0aGVuIiwiciIsInN0YXR1c0NvZGUiLCJib2R5IiwiZ2V0QWxsIiwia2V5cyIsIk9iamVjdCIsImNhbGxzIiwibWFwIiwibyIsIkpTT04iLCJwYXJzZSIsImUiLCJhbGwiLCJnZXRGaWxlIiwiZGF0YSIsImNvbnRlbnRUeXBlIiwicmV2aXNpb24iLCJzdG9yZUZpbGUiLCJtaW1lVHlwZSIsImFjY2VzcyIsImNoZWNrUGF0aFBlcm1pc3Npb24iLCJ3YXJuIiwicHV0IiwiZ2V0T2JqZWN0Iiwic3RvcmVPYmplY3QiLCJ0eXBlQWxpYXMiLCJfYXR0YWNoVHlwZSIsInZhbGlkYXRpb25SZXN1bHQiLCJ2YWxpZGF0ZSIsInZhbGlkIiwiZXhjIiwic3RyaW5naWZ5IiwicmVtb3ZlIiwiZGVsZXRlIiwiY2FjaGUiLCJzdHJhdGVneSIsInVuZGVmaW5lZCIsImNhY2hpbmciLCJzZXQiLCJmbHVzaCIsImxvY2FsIiwiZXZlbnQiLCJjaGFuZ2VFdmVudHMiLCJvcmlnaW4iLCJmb3JFYWNoIiwiZmllbGROYW1lUHJlZml4IiwiZXhlYyIsIl9lbWl0IiwiX2NsZWFuUGF0aCIsImNsZWFuUGF0aCIsImdldEl0ZW1VUkwiLCJjb25u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UyxDQUNWO0FBQ0Y7QUFDRjtBQUNGLE9BVkQ7QUFXQSxXQUFLb0MsS0FBTCxDQUFXLFFBQVgsRUFBcUJOLEtBQXJCO0FBQ0Q7QUFDRixHQWxib0I7O0FBb2JyQk8sY0FBWTNFLEtBQUs0RSxTQXBiSTs7QUFzYnJCOzs7Ozs7OztBQVFBQyxjQUFZLG9CQUFVckUsSUFBVixFQUFnQjtBQUMxQixRQUFJLE9BQU9BLElBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsWUFBTSw2REFBTjtBQUNEO0FBQ0QsUUFBSSxLQUFLSixPQUFMLENBQWEwRSxTQUFqQixFQUE0QjtBQUMxQnRFLGFBQU8sS0FBS21FLFVBQUwsQ0FBaUIsS0FBS3BFLFFBQUwsQ0FBY0MsSUFBZCxDQUFqQixDQUFQO0FBQ0EsYUFBTyxLQUFLSixPQUFMLENBQWEyRSxNQUFiLENBQW9CQyxJQUFwQixHQUEyQnhFLElBQWxDO0FBQ0QsS0FIRCxNQUdPO0FBQ0wsYUFBT3VELFNBQVA7QUFDRDtBQUNGLEdBeGNvQjs7QUEwY3JCN0QsUUFBTSxnQkFBWTtBQUNoQixXQUFPQSxPQUFQO0FBQ0Q7O0FBNWNvQixDQUF2Qjs7QUFnZEE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkFDLFdBQVc4RSxRQUFYLEdBQXNCLFlBQVksQ0FFakMsQ0FGRDs7QUFJQTs7Ozs7Ozs7Ozs7QUFXQTtBQUNBOzs7Ozs7O0FBT0ZDLE9BQU9DLE9BQVAsR0FBaUJoRixVQUFqQjs7QUFFQTtBQUNBO0FBQ0EsbUJBQUFKLENBQVEsRUFBUiIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZSh0aGluZywgcmVwbGFjZW1lbnQpIHtcbiAgICBjb25zb2xlLmxvZygnV0FSTklORzogJyArIHRoaW5nICsgJyBpcyBkZXByZWNhdGVkLiBVc2UgJyArXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQgKyAnIGluc3RlYWQuJyk7XG4gIH1cblxuICB2YXIgZXZlbnRIYW5kbGluZyA9IHJlcXVpcmUoJy4vZXZlbnRoYW5kbGluZycpO1xuICB2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuICB2YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbiAgdmFyIHV1aWQgPSByZXF1aXJlKCd1dWlkL3Y0Jyk7XG5cblxuICAvKipcbiAgICogQ2xhc3M6IEJhc2VDbGllbnRcbiAgICpcbiAgICogUHJvdmlkZXMgYSBoaWdoLWxldmVsIGludGVyZmFjZSB0byBhY2Nlc3MgZGF0YSBiZWxvdyBhIGdpdmVuIHJvb3QgcGF0aC5cbiAgICpcbiAgICogQSBCYXNlQ2xpZW50IGRlYWxzIHdpdGggdGhyZWUgdHlwZXMgb2YgZGF0YTogZm9sZGVycywgb2JqZWN0cyBhbmQgZmlsZXMuXG4gICAqXG4gICAqIDxnZXRMaXN0aW5nPiByZXR1cm5zIGEgbWFwcGluZyBvZiBhbGwgaXRlbXMgd2l0aGluIGEgZm9sZGVyLiBJdGVtcyB0aGF0XG4gICAqIGVuZCB3aXRoIGEgZm9yd2FyZCBzbGFzaCAoXCIvXCIpIGFyZSBjaGlsZCBmb2xkZXJzLiBGb3IgaW5zdGFuY2U6XG4gICAqIHtcbiAgICogICAnZm9sZGVyLyc6IHRydWUsXG4gICAqICAgJ2RvY3VtZW50LnR4dCc6IHRydWVcbiAgICogfVxuICAgKlxuICAgKiA8Z2V0T2JqZWN0PiAvIDxzdG9yZU9iamVjdD4gb3BlcmF0ZSBvbiBKU09OIG9iamVjdHMuIEVhY2ggb2JqZWN0IGhhcyBhIHR5cGUuXG4gICAqXG4gICAqIDxnZXRGaWxlPiAvIDxzdG9yZUZpbGU+IG9wZXJhdGVzIG9uIGZpbGVzLiBFYWNoIGZpbGUgaGFzIGEgTUlNRSB0eXBlLlxuICAgKlxuICAgKiA8cmVtb3ZlPiBvcGVyYXRlcyBvbiBlaXRoZXIgb2JqZWN0cyBvciBmaWxlcyAoYnV0IG5vdCBmb2xkZXJzLCBmb2xkZXJzIGFyZVxuICAgKiBjcmVhdGVkIGFuZCByZW1vdmVkIGltcGxpY3RseSkuXG4gICAqL1xuICB2YXIgQmFzZUNsaWVudCA9IGZ1bmN0aW9uIChzdG9yYWdlLCBiYXNlKSB7XG4gICAgaWYgKGJhc2VbYmFzZS5sZW5ndGggLSAxXSAhPT0gJy8nKSB7XG4gICAgICB0aHJvdyBcIk5vdCBhIGZvbGRlcjogXCIgKyBiYXNlO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnLycpIHtcbiAgICAgIC8vIGFsbG93IGFic29sdXRlIGFuZCByZWxhdGl2ZSBwYXRocyBmb3IgdGhlIHJvb3Qgc2NvcGUuXG4gICAgICB0aGlzLm1ha2VQYXRoID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIChwYXRoWzBdID09PSAnLycgPyAnJyA6ICcvJykgKyBwYXRoO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eTogc3RvcmFnZVxuICAgICAqXG4gICAgICogVGhlIDxSZW1vdGVTdG9yYWdlPiBpbnN0YW5jZSB0aGlzIDxCYXNlQ2xpZW50PiBvcGVyYXRlcyBvbi5cbiAgICAgKi9cbiAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHk6IGJhc2VcbiAgICAgKlxuICAgICAqIEJhc2UgcGF0aCB0aGlzIDxCYXNlQ2xpZW50PiBvcGVyYXRlcyBvbi5cbiAgICAgKlxuICAgICAqIEZvciB0aGUgbW9kdWxlJ3MgcHJpdmF0ZUNsaWVudCB0aGlzIHdvdWxkIGJlIC88bW9kdWxlTmFtZT4vLCBmb3IgdGhlXG4gICAgICogY29ycmVzcG9uZGluZyBwdWJsaWNDbGllbnQgL3B1YmxpYy88bW9kdWxlTmFtZT4vLlxuICAgICAqL1xuICAgIHRoaXMuYmFzZSA9IGJhc2U7XG5cbiAgICB2YXIgcGFydHMgPSB0aGlzLmJhc2Uuc3BsaXQoJy8nKTtcbiAgICBpZiAocGFydHMubGVuZ3RoID4gMikge1xuICAgICAgdGhpcy5tb2R1bGVOYW1lID0gcGFydHNbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW9kdWxlTmFtZSA9ICdyb290JztcbiAgICB9XG5cbiAgICAvLyBEZWZpbmVkIGluIGJhc2VjbGllbnQvdHlwZXMuanNcbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eTogc2NoZW1hc1xuICAgICAqXG4gICAgICogQ29udGFpbnMgc2NoZW1hIG9iamVjdHMgb2YgYWxsIHR5cGVzIGtub3duIHRvIHRoZSBCYXNlQ2xpZW50IGluc3RhbmNlXG4gICAgICoqL1xuXG4gICAgLyoqXG4gICAgICogRXZlbnQ6IGNoYW5nZVxuICAgICAqXG4gICAgICogRW1pdHRlZCB3aGVuIGEgbm9kZSBjaGFuZ2VzXG4gICAgICpcbiAgICAgKiBBcmd1bWVudHM6XG4gICAgICogICBldmVudCAtIEV2ZW50IG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjaGFuZ2VkIG5vZGVcbiAgICAgKlxuICAgICAqIChzdGFydCBjb2RlKVxuICAgICAqIHtcbiAgICAgKiAgICBwYXRoOiBwYXRoLCAvLyBBYnNvbHV0ZSBwYXRoIG9mIHRoZSBjaGFuZ2VkIG5vZGUsIGZyb20gdGhlIHN0b3JhZ2Ugcm9vdFxuICAgICAqICAgIHJlbGF0aXZlUGF0aDogcmVsYXRpdmVQYXRoLCAvLyBQYXRoIG9mIHRoZSBjaGFuZ2VkIG5vZGUsIHJlbGF0aXZlIHRvIHRoaXMgYmFzZWNsaWVudCdzIHNjb3BlIHJvb3RcbiAgICAgKiAgICBvcmlnaW46ICd3aW5kb3cnLCAnbG9jYWwnLCAncmVtb3RlJywgb3IgJ2NvbmZsaWN0JyAvLyBlbWl0dGVkIGJ5IHVzZXIgYWN0aW9uIHdpdGhpbiB0aGUgYXBwLCBsb2NhbCBkYXRhIHN0b3JlLCByZW1vdGUgc3luYywgb3IgdmVyc2lvbmluZyBjb25mbGljdHNcbiAgICAgKiAgICBvbGRWYWx1ZTogb2xkQm9keSwgLy8gT2xkIGJvZHkgb2YgdGhlIGNoYW5nZWQgbm9kZSAobG9jYWwgdmVyc2lvbiBpbiBjb25mbGljdHM7IHVuZGVmaW5lZCBpZiBjcmVhdGlvbilcbiAgICAgKiAgICBuZXdWYWx1ZTogbmV3Qm9keSwgLy8gTmV3IGJvZHkgb2YgdGhlIGNoYW5nZWQgbm9kZSAocmVtb3RlIHZlcnNpb24gaW4gY29uZmxpY3RzOyB1bmRlZmluZWQgaWYgZGVsZXRpb24pXG4gICAgICogICAgbGFzdENvbW1vblZhbHVlOiBsYXN0Q29tbW9uVmFsdWUsIC8vbW9zdCByZWNlbnQga25vd24gY29tbW9uIGFuY2VzdG9yIGJvZHkgb2YgJ3lvdXJzJyBhbmQgJ3RoZWlycycgaW4gY2FzZSBvZiBjb25mbGljdFxuICAgICAqICAgIG9sZENvbnRlbnRUeXBlOiBvbGRDb250ZW50VHlwZSwgLy8gT2xkIGNvbnRlbnRUeXBlIG9mIHRoZSBjaGFuZ2VkIG5vZGUgKCd5b3VycycgZm9yIGNvbmZsaWN0czsgdW5kZWZpbmVkIGlmIGNyZWF0aW9uKVxuICAgICAqICAgIG5ld0NvbnRlbnRUeXBlOiBuZXdDb250ZW50VHlwZSwgLy8gTmV3IGNvbnRlbnRUeXBlIG9mIHRoZSBjaGFuZ2VkIG5vZGUgKCd0aGVpcnMnIGZvciBjb25mbGljdHM7IHVuZGVmaW5lZCBpZiBkZWxldGlvbilcbiAgICAgKiAgICBsYXN0Q29tbW9uQ29udGVudFR5cGU6IGxhc3RDb21tb25Db250ZW50VHlwZSAvLyBNb3N0IHJlY2VudCBrbm93biBjb21tb24gYW5jZXN0b3IgY29udGVudFR5cGUgb2YgJ3lvdXJzJyBhbmQgJ3RoZWlycycgaW4gY2FzZSBvZiBjb25mbGljdFxuICAgICAqICB9XG4gICAgICogKGVuZCBjb2RlKVxuICAgICAqXG4gICAgICogRXhhbXBsZSBvZiBhbiBldmVudCB3aXRoIG9yaWdpbiAnbG9jYWwnIChmaXJlZCBvbiBwYWdlIGxvYWQpOlxuICAgICAqXG4gICAgICogKHN0YXJ0IGNvZGUpXG4gICAgICoge1xuICAgICAqICAgIHBhdGg6ICcvcHVibGljL2Rlc2lnbi9jb2xvci50eHQnLFxuICAgICAqICAgIHJlbGF0aXZlUGF0aDogJ2NvbG9yLnR4dCcsXG4gICAgICogICAgb3JpZ2luOiAnbG9jYWwnLFxuICAgICAqICAgIG9sZFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICogICAgbmV3VmFsdWU6ICd3aGl0ZScsXG4gICAgICogICAgb2xkQ29udGVudFR5cGU6IHVuZGVmaW5lZCxcbiAgICAgKiAgICBuZXdDb250ZW50VHlwZTogJ3RleHQvcGxhaW4nXG4gICAgICogIH1cbiAgICAgKiAoZW5kIGNvZGUpXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIG9mIGEgY29uZmxpY3Q6XG4gICAgICogU2F5IHlvdSBjaGFuZ2VkICdjb2xvci50eHQnIGZyb20gJ3doaXRlJyB0byAnYmx1ZSc7IGlmIHlvdSBoYXZlIHNldCBgY29uZmlnLmNoYW5nZUV2ZW50cy53aW5kb3dgIHRvIGB0cnVlYCxcbiAgICAgKiB0aGVuIHlvdSB3aWxsIHJlY2VpdmU6XG4gICAgICpcbiAgICAgKiAoc3RhcnQgY29kZSlcbiAgICAgKiB7XG4gICAgICogICAgcGF0aDogJy9wdWJsaWMvZGVzaWduL2NvbG9yLnR4dCcsXG4gICAgICogICAgcmVsYXRpdmVQYXRoOiAnY29sb3IudHh0JyxcbiAgICAgKiAgICBvcmlnaW46ICd3aW5kb3cnLFxuICAgICAqICAgIG9sZFZhbHVlOiAnd2hpdGUnLFxuICAgICAqICAgIG5ld1ZhbHVlOiAnYmx1ZScsXG4gICAgICogICAgb2xkQ29udGVudFR5cGU6ICd0ZXh0L3BsYWluJyxcbiAgICAgKiAgICBuZXdDb250ZW50VHlwZTogJ3RleHQvcGxhaW4nXG4gICAgICogIH1cbiAgICAgKiAoZW5kIGNvZGUpXG4gICAgICpcbiAgICAgKiBCdXQgd2hlbiB0aGlzIGNoYW5nZSBpcyBwdXNoZWQgb3V0IGJ5IGFzeW5jaHJvbm91cyBzeW5jaHJvbml6YXRpb24sIHRoaXMgY2hhbmdlIG1heSByZWplY3RlZCBieSB0aGVcbiAgICAgKiBzZXJ2ZXIsIGlmIHRoZSByZW1vdGUgdmVyc2lvbiBoYXMgaW4gdGhlIG1lYW50aW1lIGNoYW5nZWQgZnJvbSAnd2hpdGUnIHRvICBmb3IgaW5zdGFuY2UgJ3JlZCc7IHRoaXMgd2lsbCB0aGVuIGxlYWQgdG8gYSBjaGFuZ2VcbiAgICAgKiBldmVudCB3aXRoIG9yaWdpbiAnY29uZmxpY3QnICh1c3VhbGx5IGEgZmV3IHNlY29uZHMgYWZ0ZXIgdGhlIGV2ZW50IHdpdGggb3JpZ2luICd3aW5kb3cnLCBpZiB5b3UgaGFkIHRoYXQgYWN0aXZhdGVkKS4gTm90ZVxuICAgICAqIHRoYXQgc2luY2UgeW91IGFscmVhZHkgY2hhbmdlZCBpdCBmcm9tICd3aGl0ZScgdG8gJ2JsdWUnIGluIHRoZSBsb2NhbCB2ZXJzaW9uIGEgZmV3IHNlY29uZHMgYWdvLCBgb2xkVmFsdWVgIGlzIG5vdyB5b3VyIGxvY2FsXG4gICAgICogdmFsdWUgb2YgJ2JsdWUnOlxuICAgICAqXG4gICAgICogKHN0YXJ0IGNvZGUpXG4gICAgICoge1xuICAgICAqICAgIHBhdGg6ICcvcHVibGljL2Rlc2lnbi9jb2xvci50eHQnLFxuICAgICAqICAgIHJlbGF0aXZlUGF0aDogJ2NvbG9yLnR4dCcsXG4gICAgICogICAgb3JpZ2luOiAnY29uZmxpY3QnLFxuICAgICAqICAgIG9sZFZhbHVlOiAnYmx1ZScsXG4gICAgICogICAgbmV3VmFsdWU6ICdyZWQnLFxuICAgICAqICAgIGxhc3RDb21tb25WYWx1ZTogJ3doaXRlJyxcbiAgICAgKiAgICBvbGRDb250ZW50VHlwZTogJ3RleHQvcGxhaW4sXG4gICAgICogICAgbmV3Q29udGVudFR5cGU6ICd0ZXh0L3BsYWluJ1xuICAgICAqICAgIGxhc3RDb21tb25Db250ZW50VHlwZTogJ3RleHQvcGxhaW4nXG4gICAgICogIH1cbiAgICAgKiAoZW5kIGNvZGUpXG4gICAgICpcbiAgICAgKiBJbiBwcmFjdGljZSwgeW91IHNob3VsZCBhbHdheXMgcmVkcmF3IHlvdXIgdmlld3MgdG8gZGlzcGxheSB0aGUgY29udGVudCBvZiB0aGUgYG5ld1ZhbHVlYCBmaWVsZCB3aGVuIGEgY2hhbmdlIGV2ZW50IGlzIHJlY2VpdmVkLFxuICAgICAqIHJlZ2FyZGxlc3Mgb2YgaXRzIG9yaWdpbi4gRXZlbnRzIHdpdGggb3JpZ2luICdsb2NhbCcgYXJlIGZpcmVkIGNvbnZlbmllbnRseSBkdXJpbmcgdGhlIHBhZ2UgbG9hZCwgc28gdGhhdCB5b3UgY2FuIGZpbGwgeW91ciB2aWV3c1xuICAgICAqIHdoZW4gdGhlIHBhZ2UgbG9hZHMuIEV2ZW50cyB3aXRoIG9yaWdpbiAnd2luZG93JyBhcmUgZmlyZWQgd2hlbmV2ZXIgeW91IGNoYW5nZSBhIHZhbHVlIGJ5IGNhbGxpbmcgYSBtZXRob2Qgb24gdGhlIGJhc2VDbGllbnQ7XG4gICAgICogdGhlc2UgYXJlIGRpc2FibGVkIGJ5IGRlZmF1bHQuIEV2ZW50cyB3aXRoIG9yaWdpbiAncmVtb3RlJyBhcmUgZmlyZWQgd2hlbiByZW1vdGUgY2hhbmdlcyBhcmUgZGlzY292ZXJlZCBkdXJpbmcgc3luYyAob25seSBmb3IgY2FjaGluZ1xuICAgICAqIHN0YXJ0ZWdpZXMgJ1NFRU4nIGFuZCAnQUxMJykuIEV2ZW50cyB3aXRoIG9yaWdpbiAnY29uZmxpY3QnIGFyZSBmaXJlZCB3aGVuIGEgY29uZmxpY3Qgb2NjdXJzIHdoaWxlIHB1c2hpbmcgb3V0IHlvdXIgbG9jYWwgY2hhbmdlcyB0b1xuICAgICAqIHRoZSByZW1vdGUgc3RvcmUgaW4gYXN5bmNocm9ub3VzIHN5bmNocm9uaXphdGlvbiAoc2VlIGV4YW1wbGUgYWJvdmUpLlxuICAgICAqKi9cblxuICAgIGV2ZW50SGFuZGxpbmcodGhpcywgJ2NoYW5nZScpO1xuICAgIHRoaXMub24gPSB0aGlzLm9uLmJpbmQodGhpcyk7XG4gICAgc3RvcmFnZS5vbkNoYW5nZSh0aGlzLmJhc2UsIHRoaXMuX2ZpcmVDaGFuZ2UuYmluZCh0aGlzKSk7XG4gIH07XG5cbiAgQmFzZUNsaWVudC5wcm90b3R5cGUgPSB7XG5cbiAgICBleHRlbmQ6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgdGhpc1trZXldID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kOiBzY29wZVxuICAgICAqXG4gICAgICogUmV0dXJucyBhIG5ldyA8QmFzZUNsaWVudD4gb3BlcmF0aW5nIG9uIGEgc3VicGF0aCBvZiB0aGUgY3VycmVudCA8YmFzZT4gcGF0aC5cbiAgICAgKi9cbiAgICBzY29wZTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBuZXcgQmFzZUNsaWVudCh0aGlzLnN0b3JhZ2UsIHRoaXMubWFrZVBhdGgocGF0aCkpO1xuICAgIH0sXG5cbiAgICAvLyBmb2xkZXIgb3BlcmF0aW9uc1xuXG4gICAgLyoqXG4gICAgICogTWV0aG9kOiBnZXRMaXN0aW5nXG4gICAgICpcbiAgICAgKiBHZXQgYSBsaXN0IG9mIGNoaWxkIG5vZGVzIGJlbG93IGEgZ2l2ZW4gcGF0aC5cbiAgICAgKlxuICAgICAqIFRoZSBjYWxsYmFjayBzZW1hbnRpY3Mgb2YgZ2V0TGlzdGluZyBhcmUgaWRlbnRpY2FsIHRvIHRob3NlIG9mIGdldE9iamVjdC5cbiAgICAgKlxuICAgICAqIFBhcmFtZXRlcnM6XG4gICAgICogICBwYXRoICAgLSBUaGUgcGF0aCB0byBxdWVyeS4gSXQgTVVTVCBlbmQgd2l0aCBhIGZvcndhcmQgc2xhc2guXG4gICAgICogICBtYXhBZ2UgLSBFaXRoZXIgZmFsc2Ugb3IgdGhlIG1heGltdW0gYWdlIG9mIGNhY2hlZCBsaXN0aW5nIGluXG4gICAgICogICAgICAgICAgICBtaWxsaXNlY29uZHMuIERlZmF1bHRzIHRvIGZhbHNlIGluIGFub255bW91cyBtb2RlIGFuZCB0b1xuICAgICAqICAgICAgICAgICAgMipzeW5jSW50ZXJ2YWwgaW4gY29ubmVjdGVkIG1vZGUuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zOlxuICAgICAqXG4gICAgICogICBBIHByb21pc2UgZm9yIGFuIG9iamVjdCwgcmVwcmVzZW50aW5nIGNoaWxkIG5vZGVzLiBJZiB0aGUgbWF4QWdlXG4gICAgICogICByZXF1aXJlbWVudCBjYW5ub3QgYmUgbWV0IGJlY2F1c2Ugb2YgbmV0d29yayBwcm9ibGVtcywgdGhpcyBwcm9taXNlXG4gICAgICogICB3aWxsIGJlIHJlamVjdGVkLiBJZiB0aGUgbWF4QWdlIHJlcXVpcmVtZW50IGlzIHNldCB0byBmYWxzZSBvciB0aGVcbiAgICAgKiAgIGxpYnJhcnkgaXMgaW4gb2ZmbGluZSBzdGF0ZSwgdGhlIHByb21pc2Ugd2lsbCBhbHdheXMgYmUgZnVsZmlsbGVkIHdpdGhcbiAgICAgKiAgIGRhdGEgZnJvbSB0aGUgbG9jYWwgc3RvcmUuXG4gICAgICpcbiAgICAgKiAgIEtleXMgZW5kaW5nIGluIGEgZm9yd2FyZCBzbGFzaCByZXByZXNlbnQgKmZvbGRlciBub2RlcyosIHdoaWxlIGFsbFxuICAgICAqICAgb3RoZXIga2V5cyByZXByZXNlbnQgKmRhdGEgbm9kZXMqLlxuICAgICAqXG4gICAgICogICBGb3Igc3BlYyB2ZXJzaW9ucyA8PSAwMSwgdGhlIGRhdGEgbm9kZSBpbmZvcm1hdGlvbiB3aWxsIGNvbnRhaW4gb25seVxuICAgICAqICAgdGhlIGl0ZW0ncyBFVGFnLiBGb3IgbGF0ZXIgc3BlYyB2ZXJzaW9ucywgaXQgd2lsbCBhbHNvIGNvbnRhaW4gdGhlXG4gICAgICogICBjb250ZW50IHR5cGUgYW5kIC1sZW5ndGggb2YgdGhlIGl0ZW0uXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqICAgKHN0YXJ0IGNvZGUpXG4gICAgICogICBjbGllbnQuZ2V0TGlzdGluZygnJywgZmFsc2UpLnRoZW4oZnVuY3Rpb24gKGxpc3RpbmcpIHtcbiAgICAgKiAgICAgLy8gbGlzdGluZyBpcyBmb3IgaW5zdGFuY2U6XG4gICAgICogICAgIC8vIHtcbiAgICAgKiAgICAgLy8gICAnZm9sZGVyLyc6IHRydWUsXG4gICAgICogICAgIC8vICAgJ2RvY3VtZW50LnR4dCc6IHRydWVcbiAgICAgKiAgICAgLy8gfVxuICAgICAqICAgfSk7XG4gICAgICogICAoZW5kIGNvZGUpXG4gICAgICovXG4gICAgZ2V0TGlzdGluZzogZnVuY3Rpb24gKHBhdGgsIG1heEFnZSkge1xuICAgICAgaWYgKHR5cGVvZihwYXRoKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCA9ICcnO1xuICAgICAgfSBlbHNlIGlmIChwYXRoLmxlbmd0aCA+IDAgJiYgcGF0aFtwYXRoLmxlbmd0aCAtIDFdICE9PSAnLycpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiTm90IGEgZm9sZGVyOiBcIiArIHBhdGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXQodGhpcy5tYWtlUGF0aChwYXRoKSwgbWF4QWdlKS50aGVuKFxuICAgICAgICBmdW5jdGlvbiAocikge1xuICAgICAgICAgIHJldHVybiAoci5zdGF0dXNDb2RlID09PSA0MDQpID8ge30gOiByLmJvZHk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogZ2V0QWxsXG4gICAgICpcbiAgICAgKiBHZXQgYWxsIG9iamVjdHMgZGlyZWN0bHkgYmVsb3cgYSBnaXZlbiBwYXRoLlxuICAgICAqXG4gICAgICogUGFyYW1ldGVyczpcbiAgICAgKiAgIHBhdGggICAtIFBhdGggdG8gdGhlIGZvbGRlci5cbiAgICAgKiAgIG1heEFnZSAtIEVpdGhlciBmYWxzZSBvciB0aGUgbWF4aW11bSBhZ2Ugb2YgY2FjaGVkIG9iamVjdHMgaW5cbiAgICAgKiAgICAgICAgICAgIG1pbGxpc2Vjb25kcy4gRGVmYXVsdHMgdG8gZmFsc2UgaW4gYW5vbnltb3VzIG1vZGUgYW5kIHRvXG4gICAgICogICAgICAgICAgICAyKnN5bmNJbnRlcnZhbCBpbiBjb25uZWN0ZWQgbW9kZS5cbiAgICAgKlxuICAgICAqIFJldHVybnM6XG4gICAgICogICBBIHByb21pc2UgZm9yIGFuIG9iamVjdCBpbiB0aGUgZm9ybSB7IHBhdGggOiBvYmplY3QsIC4uLiB9LiBJZiB0aGVcbiAgICAgKiAgIG1heEFnZSByZXF1aXJlbWVudCBjYW5ub3QgYmUgbWV0IGJlY2F1c2Ugb2YgbmV0d29yayBwcm9ibGVtcywgdGhpc1xuICAgICAqICAgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkLiBJZiB0aGUgbWF4QWdlIHJlcXVpcmVtZW50IGlzIHNldCB0byBmYWxzZSxcbiAgICAgKiAgIHRoZSBwcm9taXNlIHdpbGwgYWx3YXlzIGJlIGZ1bGZpbGxlZCB3aXRoIGRhdGEgZnJvbSB0aGUgbG9jYWwgc3RvcmUuXG4gICAgICpcbiAgICAgKiAgIEZvciBpdGVtcyB0aGF0IGFyZSBub3QgSlNPTi1zdHJpbmdpZmllZCBvYmplY3RzIChlLmcuIHN0b3JlZCB1c2luZ1xuICAgICAqICAgYHN0b3JlRmlsZWAgaW5zdGVhZCBvZiBgc3RvcmVPYmplY3RgKSwgdGhlIG9iamVjdCdzIHZhbHVlIGlzIGZpbGxlZCBpblxuICAgICAqICAgd2l0aCBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqICAgKHN0YXJ0IGNvZGUpXG4gICAgICogICBjbGllbnQuZ2V0QWxsKCcnLCBmYWxzZSkudGhlbihmdW5jdGlvbiAob2JqZWN0cykge1xuICAgICAqICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0cykge1xuICAgICAqICAgICAgIGNvbnNvbGUubG9nKCctICcgKyBrZXkgKyAnOiAnLCBvYmplY3RzW2tleV0pO1xuICAgICAqICAgICB9XG4gICAgICogICB9KTtcbiAgICAgKiAgIChlbmQgY29kZSlcbiAgICAgKi9cbiAgICBnZXRBbGw6IGZ1bmN0aW9uIChwYXRoLCBtYXhBZ2UpIHtcbiAgICAgIGlmICh0eXBlb2YocGF0aCkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggPSAnJztcbiAgICAgIH0gZWxzZSBpZiAocGF0aC5sZW5ndGggPiAwICYmIHBhdGhbcGF0aC5sZW5ndGggLSAxXSAhPT0gJy8nKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIk5vdCBhIGZvbGRlcjogXCIgKyBwYXRoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXQodGhpcy5tYWtlUGF0aChwYXRoKSwgbWF4QWdlKS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIGlmIChyLnN0YXR1c0NvZGUgPT09IDQwNCkgeyByZXR1cm4ge307IH1cbiAgICAgICAgaWYgKHR5cGVvZihyLmJvZHkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoci5ib2R5KTtcbiAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIHRyZWF0IHRoaXMgbGlrZSA0MDQuIGl0IHByb2JhYmx5IG1lYW5zIGEgZm9sZGVyIGxpc3RpbmcgdGhhdFxuICAgICAgICAgICAgLy8gaGFzIGNoYW5nZXMgdGhhdCBoYXZlbid0IGJlZW4gcHVzaGVkIG91dCB5ZXQuXG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNhbGxzID0ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXQodGhpcy5tYWtlUGF0aChwYXRoICsga2V5KSwgbWF4QWdlKVxuICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yoby5ib2R5KSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG8uYm9keSA9IEpTT04ucGFyc2Uoby5ib2R5KTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihvLmJvZHkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgci5ib2R5W2tleV0gPSBvLmJvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChjYWxscykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gci5ib2R5O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICAvLyBmaWxlIG9wZXJhdGlvbnNcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogZ2V0RmlsZVxuICAgICAqXG4gICAgICogR2V0IHRoZSBmaWxlIGF0IHRoZSBnaXZlbiBwYXRoLiBBIGZpbGUgaXMgcmF3IGRhdGEsIGFzIG9wcG9zZWQgdG9cbiAgICAgKiBhIEpTT04gb2JqZWN0ICh1c2UgPGdldE9iamVjdD4gZm9yIHRoYXQpLlxuICAgICAqXG4gICAgICogRXhjZXB0IGZvciB0aGUgcmV0dXJuIHZhbHVlIHN0cnVjdHVyZSwgZ2V0RmlsZSB3b3JrcyBleGFjdGx5IGxpa2VcbiAgICAgKiBnZXRPYmplY3QuXG4gICAgICpcbiAgICAgKiBQYXJhbWV0ZXJzOlxuICAgICAqICAgcGF0aCAgIC0gU2VlIGdldE9iamVjdC5cbiAgICAgKiAgIG1heEFnZSAtIEVpdGhlciBmYWxzZSBvciB0aGUgbWF4aW11bSBhZ2Ugb2YgY2FjaGVkIGZpbGUgaW5cbiAgICAgKiAgICAgICAgICAgIG1pbGxpc2Vjb25kcy4gRGVmYXVsdHMgdG8gZmFsc2UgaW4gYW5vbnltb3VzIG1vZGUgYW5kIHRvXG4gICAgICogICAgICAgICAgICAyKnN5bmNJbnRlcnZhbCBpbiBjb25uZWN0ZWQgbW9kZS5cbiAgICAgKlxuICAgICAqIFJldHVybnM6XG4gICAgICogICBBIHByb21pc2UgZm9yIGFuIG9iamVjdDpcbiAgICAgKlxuICAgICAqICAgbWltZVR5cGUgLSBTdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBNSU1FIFR5cGUgb2YgdGhlIGRvY3VtZW50LlxuICAgICAqICAgZGF0YSAgICAgLSBSYXcgZGF0YSBvZiB0aGUgZG9jdW1lbnQgKGVpdGhlciBhIHN0cmluZyBvciBhbiBBcnJheUJ1ZmZlcilcbiAgICAgKlxuICAgICAqICAgSWYgdGhlIG1heEFnZSByZXF1aXJlbWVudCBjYW5ub3QgYmUgbWV0IGJlY2F1c2Ugb2YgbmV0d29yayBwcm9ibGVtcywgdGhpc1xuICAgICAqICAgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkLiBJZiB0aGUgbWF4QWdlIHJlcXVpcmVtZW50IGlzIHNldCB0byBmYWxzZSwgdGhlXG4gICAgICogICBwcm9taXNlIHdpbGwgYWx3YXlzIGJlIGZ1bGZpbGxlZCB3aXRoIGRhdGEgZnJvbSB0aGUgbG9jYWwgc3RvcmUuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqICAgKHN0YXJ0IGNvZGUpXG4gICAgICogICAvLyBEaXNwbGF5IGFuIGltYWdlOlxuICAgICAqICAgY2xpZW50LmdldEZpbGUoJ3BhdGgvdG8vc29tZS9pbWFnZScsIGZhbHNlKS50aGVuKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICogICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2ZpbGUuZGF0YV0sIHsgdHlwZTogZmlsZS5taW1lVHlwZSB9KTtcbiAgICAgKiAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5maW5kRWxlbWVudEJ5SWQoJ215LWltYWdlLWVsZW1lbnQnKTtcbiAgICAgKiAgICAgdGFyZ2V0RWxlbWVudC5zcmMgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgKiAgIH0pO1xuICAgICAqICAgKGVuZCBjb2RlKVxuICAgICAqL1xuICAgIGdldEZpbGU6IGZ1bmN0aW9uIChwYXRoLCBtYXhBZ2UpIHtcbiAgICAgIGlmICh0eXBlb2YocGF0aCkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQXJndW1lbnQgXFwncGF0aFxcJyBvZiBiYXNlQ2xpZW50LmdldEZpbGUgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXQodGhpcy5tYWtlUGF0aChwYXRoKSwgbWF4QWdlKS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YTogci5ib2R5LFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiByLmNvbnRlbnRUeXBlLFxuICAgICAgICAgIHJldmlzaW9uOiByLnJldmlzaW9uIC8vICh0aGlzIGlzIG5ldylcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2Q6IHN0b3JlRmlsZVxuICAgICAqXG4gICAgICogU3RvcmUgcmF3IGRhdGEgYXQgYSBnaXZlbiBwYXRoLlxuICAgICAqXG4gICAgICogUGFyYW1ldGVyczpcbiAgICAgKiAgIG1pbWVUeXBlIC0gTUlNRSBtZWRpYSB0eXBlIG9mIHRoZSBkYXRhIGJlaW5nIHN0b3JlZFxuICAgICAqICAgcGF0aCAgICAgLSBwYXRoIHJlbGF0aXZlIHRvIHRoZSBtb2R1bGUgcm9vdC4gTUFZIE5PVCBlbmQgaW4gYSBmb3J3YXJkIHNsYXNoLlxuICAgICAqICAgZGF0YSAgICAgLSBzdHJpbmcsIEFycmF5QnVmZmVyIG9yIEFycmF5QnVmZmVyVmlldyBvZiByYXcgZGF0YSB0byBzdG9yZVxuICAgICAqXG4gICAgICogVGhlIGdpdmVuIG1pbWVUeXBlIHdpbGwgbGF0ZXIgYmUgcmV0dXJuZWQsIHdoZW4gcmV0cmlldmluZyB0aGUgZGF0YVxuICAgICAqIHVzaW5nIDxnZXRGaWxlPi5cbiAgICAgKlxuICAgICAqIEV4YW1wbGUgKFVURi04IGRhdGEpOlxuICAgICAqICAgKHN0YXJ0IGNvZGUpXG4gICAgICogICBjbGllbnQuc3RvcmVGaWxlKCd0ZXh0L2h0bWwnLCAnaW5kZXguaHRtbCcsICc8aDE+SGVsbG8gV29ybGQhPC9oMT4nKTtcbiAgICAgKiAgIChlbmQgY29kZSlcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgKEJpbmFyeSBkYXRhKTpcbiAgICAgKiAgIChzdGFydCBjb2RlKVxuICAgICAqICAgLy8gTUFSS1VQOlxuICAgICAqICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgaWQ9XCJmaWxlLWlucHV0XCI+XG4gICAgICogICAvLyBDT0RFOlxuICAgICAqICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGUtaW5wdXQnKTtcbiAgICAgKiAgIHZhciBmaWxlID0gaW5wdXQuZmlsZXNbMF07XG4gICAgICogICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICpcbiAgICAgKiAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAqICAgICBjbGllbnQuc3RvcmVGaWxlKGZpbGUudHlwZSwgZmlsZS5uYW1lLCBmaWxlUmVhZGVyLnJlc3VsdCk7XG4gICAgICogICB9O1xuICAgICAqXG4gICAgICogICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuICAgICAqICAgKGVuZCBjb2RlKVxuICAgICAqXG4gICAgICovXG4gICAgc3RvcmVGaWxlOiBmdW5jdGlvbiAobWltZVR5cGUsIHBhdGgsIGJvZHkpIHtcbiAgICAgIGlmICh0eXBlb2YobWltZVR5cGUpICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0FyZ3VtZW50IFxcJ21pbWVUeXBlXFwnIG9mIGJhc2VDbGllbnQuc3RvcmVGaWxlIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YocGF0aCkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQXJndW1lbnQgXFwncGF0aFxcJyBvZiBiYXNlQ2xpZW50LnN0b3JlRmlsZSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mKGJvZHkpICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YoYm9keSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQXJndW1lbnQgXFwnYm9keVxcJyBvZiBiYXNlQ2xpZW50LnN0b3JlRmlsZSBtdXN0IGJlIGEgc3RyaW5nLCBBcnJheUJ1ZmZlciwgb3IgQXJyYXlCdWZmZXJWaWV3Jyk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuc3RvcmFnZS5hY2Nlc3MuY2hlY2tQYXRoUGVybWlzc2lvbih0aGlzLm1ha2VQYXRoKHBhdGgpLCAncncnKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IEVkaXRpbmcgYSBkb2N1bWVudCB0byB3aGljaCBvbmx5IHJlYWQgYWNjZXNzIChcXCdyXFwnKSB3YXMgY2xhaW1lZCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLnB1dCh0aGlzLm1ha2VQYXRoKHBhdGgpLCBib2R5LCBtaW1lVHlwZSkudGhlbihmdW5jdGlvbiAocikge1xuICAgICAgICBpZiAoci5zdGF0dXNDb2RlID09PSAyMDAgfHwgci5zdGF0dXNDb2RlID09PSAyMDEpIHtcbiAgICAgICAgICByZXR1cm4gci5yZXZpc2lvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJSZXF1ZXN0IChQVVQgXCIgKyB0aGlzLm1ha2VQYXRoKHBhdGgpICsgXCIpIGZhaWxlZCB3aXRoIHN0YXR1czogXCIgKyByLnN0YXR1c0NvZGUpO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICAvLyBvYmplY3Qgb3BlcmF0aW9uc1xuXG4gICAgLyoqXG4gICAgICogTWV0aG9kOiBnZXRPYmplY3RcbiAgICAgKlxuICAgICAqIEdldCBhIEpTT04gb2JqZWN0IGZyb20gZ2l2ZW4gcGF0aC5cbiAgICAgKlxuICAgICAqIFBhcmFtZXRlcnM6XG4gICAgICogICBwYXRoICAgLSBSZWxhdGl2ZSBwYXRoIGZyb20gdGhlIG1vZHVsZSByb290ICh3aXRob3V0IGxlYWRpbmcgc2xhc2gpLlxuICAgICAqICAgbWF4QWdlIC0gRWl0aGVyIGZhbHNlIG9yIHRoZSBtYXhpbXVtIGFnZSBvZiBjYWNoZWQgb2JqZWN0IGluXG4gICAgICogICAgICAgICAgICBtaWxsaXNlY29uZHMuIERlZmF1bHRzIHRvIGZhbHNlIGluIGFub255bW91cyBtb2RlIGFuZCB0b1xuICAgICAqICAgICAgICAgICAgMipzeW5jSW50ZXJ2YWwgaW4gY29ubmVjdGVkIG1vZGUuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zOlxuICAgICAqICAgQSBwcm9taXNlIGZvciB0aGUgb2JqZWN0LiBJZiB0aGUgbWF4QWdlIHJlcXVpcmVtZW50IGNhbm5vdCBiZSBtZXRcbiAgICAgKiAgIGJlY2F1c2Ugb2YgbmV0d29yayBwcm9ibGVtcywgdGhpcyBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQuIElmIHRoZVxuICAgICAqICAgbWF4QWdlIHJlcXVpcmVtZW50IGlzIHNldCB0byBmYWxzZSwgdGhlIHByb21pc2Ugd2lsbCBhbHdheXMgYmVcbiAgICAgKiAgIGZ1bGZpbGxlZCB3aXRoIGRhdGEgZnJvbSB0aGUgbG9jYWwgc3RvcmUuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqICAgKHN0YXJ0IGNvZGUpXG4gICAgICogICBjbGllbnQuZ2V0T2JqZWN0KCcvcGF0aC90by9vYmplY3QnLCBmYWxzZSkuXG4gICAgICogICAgIHRoZW4oZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAqICAgICAgIC8vIG9iamVjdCBpcyBlaXRoZXIgYW4gb2JqZWN0IG9yIG51bGxcbiAgICAgKiAgICAgfSk7XG4gICAgICogICAoZW5kIGNvZGUpXG4gICAgICovXG4gICAgZ2V0T2JqZWN0OiBmdW5jdGlvbiAocGF0aCwgbWF4QWdlKSB7XG4gICAgICBpZiAodHlwZW9mKHBhdGgpICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0FyZ3VtZW50IFxcJ3BhdGhcXCcgb2YgYmFzZUNsaWVudC5nZXRPYmplY3QgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5nZXQodGhpcy5tYWtlUGF0aChwYXRoKSwgbWF4QWdlKS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIGlmICh0eXBlb2Yoci5ib2R5KSA9PT0gJ29iamVjdCcpIHsgLy8gd2lsbCBiZSB0aGUgY2FzZSBmb3IgZG9jdW1lbnRzIHN0b3JlZCB3aXRoIHJzLmpzIDw9IDAuMTAuMC1iZXRhMlxuICAgICAgICAgIHJldHVybiByLmJvZHk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKHIuYm9keSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHIuYm9keSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgXCJOb3QgdmFsaWQgSlNPTjogXCIgKyB0aGlzLm1ha2VQYXRoKHBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Yoci5ib2R5KSAhPT0gJ3VuZGVmaW5lZCcgJiYgci5zdGF0dXNDb2RlID09PSAyMDApIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJOb3QgYW4gb2JqZWN0OiBcIiArIHRoaXMubWFrZVBhdGgocGF0aCkpO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2Q6IHN0b3JlT2JqZWN0XG4gICAgICpcbiAgICAgKiBTdG9yZSBvYmplY3QgYXQgZ2l2ZW4gcGF0aC4gVHJpZ2dlcnMgc3luY2hyb25pemF0aW9uLlxuICAgICAqXG4gICAgICogUGFyYW1ldGVyczpcbiAgICAgKlxuICAgICAqICAgdHlwZSAgICAgLSB1bmlxdWUgdHlwZSBvZiB0aGlzIG9iamVjdCB3aXRoaW4gdGhpcyBtb2R1bGUuIFNlZSBkZXNjcmlwdGlvbiBiZWxvdy5cbiAgICAgKiAgIHBhdGggICAgIC0gcGF0aCByZWxhdGl2ZSB0byB0aGUgbW9kdWxlIHJvb3QuXG4gICAgICogICBvYmplY3QgICAtIGFuIG9iamVjdCB0byBiZSBzYXZlZCB0byB0aGUgZ2l2ZW4gbm9kZS4gSXQgbXVzdCBiZSBzZXJpYWxpemFibGUgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqIFJldHVybnM6XG4gICAgICogICBBIHByb21pc2UgdG8gc3RvcmUgdGhlIG9iamVjdC4gVGhlIHByb21pc2UgZmFpbHMgd2l0aCBhIFZhbGlkYXRpb25FcnJvciwgd2hlbiB2YWxpZGF0aW9ucyBmYWlsLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBXaGF0IGFib3V0IHRoZSB0eXBlPzpcbiAgICAgKlxuICAgICAqICAgQSBncmVhdCB0aGluZyBhYm91dCBoYXZpbmcgZGF0YSBvbiB0aGUgd2ViLCBpcyB0byBiZSBhYmxlIHRvIGxpbmsgdG9cbiAgICAgKiAgIGl0IGFuZCByZWFycmFuZ2UgaXQgdG8gZml0IHRoZSBjdXJyZW50IGNpcmN1bXN0YW5jZXMuIFRvIGZhY2lsaXRhdGVcbiAgICAgKiAgIHRoYXQsIGV2ZW50dWFsbHkgeW91IG5lZWQgdG8ga25vdyBob3cgdGhlIGRhdGEgYXQgaGFuZCBpcyBzdHJ1Y3R1cmVkLlxuICAgICAqICAgRm9yIGRvY3VtZW50cyBvbiB0aGUgd2ViLCB0aGlzIGlzIHVzdWFsbHkgZG9uZSB2aWEgYSBNSU1FIHR5cGUuIFRoZVxuICAgICAqICAgTUlNRSB0eXBlIG9mIEpTT04gb2JqZWN0cyBob3dldmVyLCBpcyBhbHdheXMgYXBwbGljYXRpb24vanNvbi5cbiAgICAgKiAgIFRvIGFkZCB0aGF0IGV4dHJhIGxheWVyIG9mIFwia25vd2luZyB3aGF0IHRoaXMgb2JqZWN0IGlzXCIsIHJlbW90ZVN0b3JhZ2VcbiAgICAgKiAgIGFpbXMgdG8gdXNlIDxKU09OLUxEIGF0IGh0dHA6Ly9qc29uLWxkLm9yZy8+LlxuICAgICAqICAgQSBmaXJzdCBzdGVwIGluIHRoYXQgZGlyZWN0aW9uLCBpcyB0byBhZGQgYSAqQGNvbnRleHQgYXR0cmlidXRlKiB0byBhbGxcbiAgICAgKiAgIEpTT04gZGF0YSBwdXQgaW50byByZW1vdGVTdG9yYWdlLlxuICAgICAqICAgTm93IHRoYXQgaXMgd2hhdCB0aGUgKnR5cGUqIGlzIGZvci5cbiAgICAgKlxuICAgICAqICAgV2l0aGluIHJlbW90ZVN0b3JhZ2UuanMsIEBjb250ZXh0IHZhbHVlcyBhcmUgYnVpbHQgdXNpbmcgdGhyZWUgY29tcG9uZW50czpcbiAgICAgKiAgICAgaHR0cDovL3JlbW90ZXN0b3JhZ2UuaW8vc3BlYy9tb2R1bGVzLyAtIEEgcHJlZml4IHRvIGd1YXJhbnRlZSB1bmlxdWVuZXNzXG4gICAgICogICAgIHRoZSBtb2R1bGUgbmFtZSAgICAgLSBtb2R1bGUgbmFtZXMgc2hvdWxkIGJlIHVuaXF1ZSBhcyB3ZWxsXG4gICAgICogICAgIHRoZSB0eXBlIGdpdmVuIGhlcmUgLSBuYW1pbmcgdGhpcyBwYXJ0aWN1bGFyIGtpbmQgb2Ygb2JqZWN0IHdpdGhpbiB0aGlzIG1vZHVsZVxuICAgICAqXG4gICAgICogICBJbiByZXRyb3NwZWN0IHRoYXQgbWVhbnMsIHRoYXQgd2hlbmV2ZXIgeW91IGludHJvZHVjZSBhIG5ldyBcInR5cGVcIiBpbiBjYWxscyB0b1xuICAgICAqICAgc3RvcmVPYmplY3QsIHlvdSBzaG91bGQgbWFrZSBzdXJlIHRoYXQgb25jZSB5b3VyIGNvZGUgaXMgaW4gdGhlIHdpbGQsIGZ1dHVyZVxuICAgICAqICAgdmVyc2lvbnMgb2YgdGhlIGNvZGUgYXJlIGNvbXBhdGlibGUgd2l0aCB0aGUgc2FtZSBKU09OIHN0cnVjdHVyZS5cbiAgICAgKlxuICAgICAqIEhvdyB0byBkZWZpbmUgdHlwZXM/OlxuICAgICAqXG4gICAgICogICBTZWUgPGRlY2xhcmVUeXBlPiBmb3IgZXhhbXBsZXMuXG4gICAgICovXG4gICAgc3RvcmVPYmplY3Q6IGZ1bmN0aW9uICh0eXBlQWxpYXMsIHBhdGgsIG9iamVjdCkge1xuICAgICAgaWYgKHR5cGVvZih0eXBlQWxpYXMpICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0FyZ3VtZW50IFxcJ3R5cGVBbGlhc1xcJyBvZiBiYXNlQ2xpZW50LnN0b3JlT2JqZWN0IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YocGF0aCkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQXJndW1lbnQgXFwncGF0aFxcJyBvZiBiYXNlQ2xpZW50LnN0b3JlT2JqZWN0IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Yob2JqZWN0KSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdBcmd1bWVudCBcXCdvYmplY3RcXCcgb2YgYmFzZUNsaWVudC5zdG9yZU9iamVjdCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hdHRhY2hUeXBlKG9iamVjdCwgdHlwZUFsaWFzKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHZhbGlkYXRpb25SZXN1bHQgPSB0aGlzLnZhbGlkYXRlKG9iamVjdCk7XG4gICAgICAgIGlmICghIHZhbGlkYXRpb25SZXN1bHQudmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodmFsaWRhdGlvblJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2goZXhjKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChleGMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLnB1dCh0aGlzLm1ha2VQYXRoKHBhdGgpLCBKU09OLnN0cmluZ2lmeShvYmplY3QpLCAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcpLnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgaWYgKHIuc3RhdHVzQ29kZSA9PT0gMjAwIHx8IHIuc3RhdHVzQ29kZSA9PT0gMjAxKSB7XG4gICAgICAgICAgcmV0dXJuIHIucmV2aXNpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiUmVxdWVzdCAoUFVUIFwiICsgdGhpcy5tYWtlUGF0aChwYXRoKSArIFwiKSBmYWlsZWQgd2l0aCBzdGF0dXM6IFwiICsgci5zdGF0dXNDb2RlKTtcbiAgICAgICAgfVxuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9LFxuXG4gICAgLy8gZ2VuZXJpYyBvcGVyYXRpb25zXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2Q6IHJlbW92ZVxuICAgICAqXG4gICAgICogUmVtb3ZlIG5vZGUgYXQgZ2l2ZW4gcGF0aCBmcm9tIHN0b3JhZ2UuIFRyaWdnZXJzIHN5bmNocm9uaXphdGlvbi5cbiAgICAgKlxuICAgICAqIFBhcmFtZXRlcnM6XG4gICAgICogICBwYXRoICAgICAtIFBhdGggcmVsYXRpdmUgdG8gdGhlIG1vZHVsZSByb290LlxuICAgICAqL1xuICAgIHJlbW92ZTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIGlmICh0eXBlb2YocGF0aCkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnQXJndW1lbnQgXFwncGF0aFxcJyBvZiBiYXNlQ2xpZW50LnJlbW92ZSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuc3RvcmFnZS5hY2Nlc3MuY2hlY2tQYXRoUGVybWlzc2lvbih0aGlzLm1ha2VQYXRoKHBhdGgpLCAncncnKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IFJlbW92aW5nIGEgZG9jdW1lbnQgdG8gd2hpY2ggb25seSByZWFkIGFjY2VzcyAoXFwnclxcJykgd2FzIGNsYWltZWQnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5kZWxldGUodGhpcy5tYWtlUGF0aChwYXRoKSk7XG4gICAgfSxcblxuXG4gICAgY2FjaGU6IGZ1bmN0aW9uIChwYXRoLCBzdHJhdGVneSkge1xuICAgICAgaWYgKHR5cGVvZihwYXRoKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgJ0FyZ3VtZW50IFxcJ3BhdGhcXCcgb2YgYmFzZUNsaWVudC5jYWNoZSBtdXN0IGJlIGEgc3RyaW5nJztcbiAgICAgIH1cbiAgICAgIGlmIChzdHJhdGVneSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGVwcmVjYXRlKCdjYWNoaW5nIHN0cmF0ZWd5IDxmYWxzZT4nLCAnPFwiRkxVU0hcIj4nKTtcbiAgICAgICAgc3RyYXRlZ3kgPSAnRkxVU0gnO1xuICAgICAgfSBlbHNlIGlmIChzdHJhdGVneSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0cmF0ZWd5ID0gJ0FMTCc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZihzdHJhdGVneSkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRlcHJlY2F0ZSgndGhhdCBjYWNoaW5nIHN0cmF0ZWd5JywgJzxcIkFMTFwiPicpO1xuICAgICAgICBzdHJhdGVneSA9ICdBTEwnO1xuICAgICAgfVxuICAgICAgaWYgKHN0cmF0ZWd5ICE9PSAnRkxVU0gnICYmXG4gICAgICAgICAgc3RyYXRlZ3kgIT09ICdTRUVOJyAmJlxuICAgICAgICAgIHN0cmF0ZWd5ICE9PSAnQUxMJykge1xuICAgICAgICB0aHJvdyAnQXJndW1lbnQgXFwnc3RyYXRlZ3lcXCcgb2YgYmFzZWNsaWVudC5jYWNoZSBtdXN0IGJlIG9uZSBvZiAnXG4gICAgICAgICAgICArICdbXCJGTFVTSFwiLCBcIlNFRU5cIiwgXCJBTExcIl0nO1xuICAgICAgfVxuICAgICAgdGhpcy5zdG9yYWdlLmNhY2hpbmcuc2V0KHRoaXMubWFrZVBhdGgocGF0aCksIHN0cmF0ZWd5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBmbHVzaDogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UubG9jYWwuZmx1c2gocGF0aCk7XG4gICAgfSxcblxuICAgIG1ha2VQYXRoOiBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuYmFzZSArIChwYXRoIHx8ICcnKTtcbiAgICB9LFxuXG4gICAgX2ZpcmVDaGFuZ2U6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGNvbmZpZy5jaGFuZ2VFdmVudHNbZXZlbnQub3JpZ2luXSkge1xuICAgICAgICBbJ25ldycsICdvbGQnLCAnbGFzdENvbW1vbiddLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkTmFtZVByZWZpeCkge1xuICAgICAgICAgIGlmICgoIWV2ZW50W2ZpZWxkTmFtZVByZWZpeCsnQ29udGVudFR5cGUnXSlcbiAgICAgICAgICAgICAgfHwgKC9eYXBwbGljYXRpb25cXC8oLiopanNvbiguKikvLmV4ZWMoZXZlbnRbZmllbGROYW1lUHJlZml4KydDb250ZW50VHlwZSddKSkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YoZXZlbnRbZmllbGROYW1lUHJlZml4KydWYWx1ZSddKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBldmVudFtmaWVsZE5hbWVQcmVmaXgrJ1ZhbHVlJ10gPSBKU09OLnBhcnNlKGV2ZW50W2ZpZWxkTmFtZVByZWZpeCsnVmFsdWUnXSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZW1pdCgnY2hhbmdlJywgZXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfY2xlYW5QYXRoOiB1dGlsLmNsZWFuUGF0aCxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogZ2V0SXRlbVVSTFxuICAgICAqXG4gICAgICogUmV0cmlldmUgZnVsbCBVUkwgb2YgaXRlbVxuICAgICAqXG4gICAgICogUGFyYW1ldGVyczpcbiAgICAgKiAgIHBhdGggICAgIC0gUGF0aCByZWxhdGl2ZSB0byB0aGUgbW9kdWxlIHJvb3QuXG4gICAgICovXG4gICAgZ2V0SXRlbVVSTDogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIGlmICh0eXBlb2YocGF0aCkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93ICdBcmd1bWVudCBcXCdwYXRoXFwnIG9mIGJhc2VDbGllbnQuZ2V0SXRlbVVSTCBtdXN0IGJlIGEgc3RyaW5nJztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0b3JhZ2UuY29ubmVjdGVkKSB7XG4gICAgICAgIHBhdGggPSB0aGlzLl9jbGVhblBhdGgoIHRoaXMubWFrZVBhdGgocGF0aCkgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5yZW1vdGUuaHJlZiArIHBhdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1dWlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdXVpZCgpO1xuICAgIH1cblxuICB9O1xuXG4gIC8qKlxuICAgKiBNZXRob2Q6IFJTI3Njb3BlXG4gICAqXG4gICAqIFJldHVybnMgYSBuZXcgPFJTLkJhc2VDbGllbnQ+IHNjb3BlZCB0byB0aGUgZ2l2ZW4gcGF0aC5cbiAgICpcbiAgICogUGFyYW1ldGVyczpcbiAgICogICBwYXRoIC0gUm9vdCBwYXRoIG9mIG5ldyBCYXNlQ2xpZW50LlxuICAgKlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKiAgIChzdGFydCBjb2RlKVxuICAgKlxuICAgKiAgIHZhciBmb28gPSByZW1vdGVTdG9yYWdlLnNjb3BlKCcvZm9vLycpO1xuICAgKlxuICAgKiAgIC8vIFBVVHMgZGF0YSBcImJhelwiIHRvIHBhdGggL2Zvby9iYXJcbiAgICogICBmb28uc3RvcmVGaWxlKCd0ZXh0L3BsYWluJywgJ2JhcicsICdiYXonKTtcbiAgICpcbiAgICogICB2YXIgc29tZXRoaW5nID0gZm9vLnNjb3BlKCdzb21ldGhpbmcvJyk7XG4gICAqXG4gICAqICAgLy8gR0VUcyBsaXN0aW5nIGZyb20gcGF0aCAvZm9vL3NvbWV0aGluZy9ibGEvXG4gICAqICAgc29tZXRoaW5nLmdldExpc3RpbmcoJ2JsYS8nKTtcbiAgICpcbiAgICogICAoZW5kIGNvZGUpXG4gICAqXG4gICAqL1xuICBCYXNlQ2xpZW50Ll9yc19pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIFxuICB9O1xuXG4gIC8qIGUuZy46XG4gIHJlbW90ZVN0b3JhZ2UuZGVmaW5lTW9kdWxlKCdsb2NhdGlvbnMnLCBmdW5jdGlvbiAocHJpdiwgcHViKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4cG9ydHM6IHtcbiAgICAgICAgZmVhdHVyZXM6IHByaXYuc2NvcGUoJ2ZlYXR1cmVzLycpLmRlZmF1bHRUeXBlKCdmZWF0dXJlJyksXG4gICAgICAgIGNvbGxlY3Rpb25zOiBwcml2LnNjb3BlKCdjb2xsZWN0aW9ucy8nKS5kZWZhdWx0VHlwZSgnZmVhdHVyZS1jb2xsZWN0aW9uJyk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gICovXG5cbiAgLy8gRGVmaW5lZCBpbiBiYXNlY2xpZW50L3R5cGVzLmpzXG4gIC8qKlxuICAgKiBNZXRob2Q6IGRlY2xhcmVUeXBlXG4gICAqXG4gICAqIERlY2xhcmUgYSByZW1vdGVTdG9yYWdlIG9iamVjdCB0eXBlIHVzaW5nIGEgSlNPTiBzY2hlbWEuIFNlZVxuICAgKiA8QmFzZUNsaWVudC5UeXBlcz5cbiAgICoqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VDbGllbnQ7XG5cbi8vIG5lZWRzIHRvIGJlIGFmdGVyIHRoZSBleHBvcnQgdG8gY2hhbmdlIHByb3RvdHlwZVxuLy8gdGhpcyBzaG91bGQgYmUgZGlmZmVyZW50ICh3ZSBuZWVkIHRvIGltcG9ydCBgdHlwZXNgIGZ1bmN0aW9uYWxpdHksIG5vdCBtb2RpZmluZyBCYXNlQ2xpZW50LnByb3RvdHlwZSBmcm9tIHRoZXJlKVxucmVxdWlyZSgnLi90eXBlcycpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9iYXNlY2xpZW50LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar util = __webpack_require__(2);\nvar config = __webpack_require__(5);\nvar log = __webpack_require__(1);\n\n/**\n * Interface: cachinglayer\n *\n * This module defines functions that are mixed into remoteStorage.local when\n * it is instantiated (currently one of indexeddb.js, localstorage.js, or\n * inmemorystorage.js).\n *\n * All remoteStorage.local implementations should therefore implement\n * this.getNodes, this.setNodes, and this.forAllNodes. The rest is blended in\n * here to create a GPD (get/put/delete) interface which the BaseClient can\n * talk to.\n */\n\nvar isFolder = util.isFolder;\nvar isDocument = util.isDocument;\nvar deepClone = util.deepClone;\n\nfunction getLatest(node) {\n  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object' || typeof node.path !== 'string') {\n    return;\n  }\n  if (isFolder(node.path)) {\n    if (node.local && node.local.itemsMap) {\n      return node.local;\n    }\n    if (node.common && node.common.itemsMap) {\n      return node.common;\n    }\n  } else {\n    if (node.local && node.local.body && node.local.contentType) {\n      return node.local;\n    }\n    if (node.common && node.common.body && node.common.contentType) {\n      return node.common;\n    }\n    // Migration code! Once all apps use at least this version of the lib, we\n    // can publish clean-up code that migrates over any old-format data, and\n    // stop supporting it. For now, new apps will support data in both\n    // formats, thanks to this:\n    if (node.body && node.contentType) {\n      return {\n        body: node.body,\n        contentType: node.contentType\n      };\n    }\n  }\n}\n\nfunction isOutdated(nodes, maxAge) {\n  var path;\n  for (path in nodes) {\n    if (nodes[path] && nodes[path].remote) {\n      return true;\n    }\n    var nodeVersion = getLatest(nodes[path]);\n    if (nodeVersion && nodeVersion.timestamp && new Date().getTime() - nodeVersion.timestamp <= maxAge) {\n      return false;\n    } else if (!nodeVersion) {\n      return true;\n    }\n  }\n  return true;\n}\n\nvar pathsFromRoot = util.pathsFromRoot;\n\nfunction makeNode(path) {\n  var node = { path: path, common: {} };\n\n  if (isFolder(path)) {\n    node.common.itemsMap = {};\n  }\n  return node;\n}\n\nfunction updateFolderNodeWithItemName(node, itemName) {\n  if (!node.common) {\n    node.common = {\n      itemsMap: {}\n    };\n  }\n  if (!node.common.itemsMap) {\n    node.common.itemsMap = {};\n  }\n  if (!node.local) {\n    node.local = deepClone(node.common);\n  }\n  if (!node.local.itemsMap) {\n    node.local.itemsMap = node.common.itemsMap;\n  }\n  node.local.itemsMap[itemName] = true;\n\n  return node;\n}\n\nvar methods = {\n\n  // TODO: improve our code structure so that this function\n  // could call sync.queueGetRequest directly instead of needing\n  // this hacky third parameter as a callback\n  get: function get(path, maxAge, queueGetRequest) {\n    var self = this;\n    if (typeof maxAge === 'number') {\n      return self.getNodes(pathsFromRoot(path)).then(function (objs) {\n        var node = getLatest(objs[path]);\n        if (isOutdated(objs, maxAge)) {\n          return queueGetRequest(path);\n        } else if (node) {\n          return { statusCode: 200, body: node.body || node.itemsMap, contentType: node.contentType };\n        } else {\n          return { statusCode: 404 };\n        }\n      });\n    } else {\n      return self.getNodes([path]).then(function (objs) {\n        var node = getLatest(objs[path]);\n        if (node) {\n          if (isFolder(path)) {\n            for (var i in node.itemsMap) {\n              // the hasOwnProperty check here is only because our jshint settings require it:\n              if (node.itemsMap.hasOwnProperty(i) && node.itemsMap[i] === false) {\n                delete node.itemsMap[i];\n              }\n            }\n          }\n          return { statusCode: 200, body: node.body || node.itemsMap, contentType: node.contentType };\n        } else {\n          return { statusCode: 404 };\n        }\n      });\n    }\n  },\n\n  put: function put(path, body, contentType) {\n    var paths = pathsFromRoot(path);\n\n    function _processNodes(paths, nodes) {\n      try {\n        for (var i = 0, len = paths.length; i < len; i++) {\n          var path = paths[i];\n          var node = nodes[path];\n          var previous;\n\n          if (!node) {\n            nodes[path] = node = makeNode(path);\n          }\n\n          // Document\n          if (i === 0) {\n            previous = getLatest(node);\n            node.local = {\n              body: body,\n              contentType: contentType,\n              previousBody: previous ? previous.body : undefined,\n              previousContentType: previous ? previous.contentType : undefined\n            };\n          }\n          // Folder\n          else {\n              var itemName = paths[i - 1].substring(path.length);\n              node = updateFolderNodeWithItemName(node, itemName);\n            }\n        }\n        return nodes;\n      } catch (e) {\n        log('[Cachinglayer] Error during PUT', nodes, e);\n        throw e;\n      }\n    }\n    return this._updateNodes(paths, _processNodes);\n  },\n\n  delete: function _delete(path) {\n    var paths = pathsFromRoot(path);\n\n    return this._updateNodes(paths, function (paths, nodes) {\n      for (var i = 0, len = paths.length; i < len; i++) {\n        var path = paths[i];\n        var node = nodes[path];\n        var previous;\n\n        if (!node) {\n          throw new Error('Cannot delete non-existing node ' + path);\n        }\n\n        if (i === 0) {\n          // Document\n          previous = getLatest(node);\n          node.local = {\n            body: false,\n            previousBody: previous ? previous.body : undefined,\n            previousContentType: previous ? previous.contentType : undefined\n          };\n        } else {\n          // Folder\n          if (!node.local) {\n            node.local = deepClone(node.common);\n          }\n          var itemName = paths[i - 1].substring(path.length);\n          delete node.local.itemsMap[itemName];\n\n          if (Object.getOwnPropertyNames(node.local.itemsMap).length > 0) {\n            // This folder still contains other items, don't remove any further ancestors\n            break;\n          }\n        }\n      }\n      return nodes;\n    });\n  },\n  flush: function flush(path) {\n    var self = this;\n    return self._getAllDescendentPaths(path).then(function (paths) {\n      return self.getNodes(paths);\n    }).then(function (nodes) {\n      for (var path in nodes) {\n        var node = nodes[path];\n\n        if (node && node.common && node.local) {\n          self._emitChange({\n            path: node.path,\n            origin: 'local',\n            oldValue: node.local.body === false ? undefined : node.local.body,\n            newValue: node.common.body === false ? undefined : node.common.body\n          });\n        }\n        nodes[path] = undefined;\n      }\n      return self.setNodes(nodes);\n    });\n  },\n\n  _emitChange: function _emitChange(obj) {\n    if (config.changeEvents[obj.origin]) {\n      this._emit('change', obj);\n    }\n  },\n\n  fireInitial: function fireInitial() {\n    if (!config.changeEvents.local) {\n      return;\n    }\n    var self = this;\n    self.forAllNodes(function (node) {\n      var latest;\n      if (isDocument(node.path)) {\n        latest = getLatest(node);\n        if (latest) {\n          self._emitChange({\n            path: node.path,\n            origin: 'local',\n            oldValue: undefined,\n            oldContentType: undefined,\n            newValue: latest.body,\n            newContentType: latest.contentType\n          });\n        }\n      }\n    }).then(function () {\n      self._emit('local-events-done');\n    });\n  },\n\n  onDiff: function onDiff(diffHandler) {\n    this.diffHandler = diffHandler;\n  },\n\n  migrate: function migrate(node) {\n    if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && !node.common) {\n      node.common = {};\n      if (typeof node.path === 'string') {\n        if (node.path.substr(-1) === '/' && _typeof(node.body) === 'object') {\n          node.common.itemsMap = node.body;\n        }\n      } else {\n        //save legacy content of document node as local version\n        if (!node.local) {\n          node.local = {};\n        }\n        node.local.body = node.body;\n        node.local.contentType = node.contentType;\n      }\n    }\n    return node;\n  },\n\n  // FIXME\n  // this process of updating nodes needs to be heavily documented first, then\n  // refactored. Right now it's almost impossible to refactor as there's no\n  // explanation of why things are implemented certain ways or what the goal(s)\n  // of the behavior are. -slvrbckt (+1 -les)\n  _updateNodesRunning: false,\n  _updateNodesQueued: [],\n  _updateNodes: function _updateNodes(paths, _processNodes) {\n    return new Promise(function (resolve, reject) {\n      this._doUpdateNodes(paths, _processNodes, {\n        resolve: resolve,\n        reject: reject\n      });\n    }.bind(this));\n  },\n  _doUpdateNodes: function _doUpdateNodes(paths, _processNodes, promise) {\n    var self = this;\n\n    if (self._updateNodesRunning) {\n      self._updateNodesQueued.push({\n        paths: paths,\n        cb: _processNodes,\n        promise: promise\n      });\n      return;\n    } else {\n      self._updateNodesRunning = true;\n    }\n\n    self.getNodes(paths).then(function (nodes) {\n      var existingNodes = deepClone(nodes);\n      var changeEvents = [];\n      var node;\n      var equal = util.equal;\n\n      nodes = _processNodes(paths, nodes);\n\n      for (var path in nodes) {\n        node = nodes[path];\n        if (equal(node, existingNodes[path])) {\n          delete nodes[path];\n        } else if (isDocument(path)) {\n          if (!equal(node.local.body, node.local.previousBody) || node.local.contentType !== node.local.previousContentType) {\n            changeEvents.push({\n              path: path,\n              origin: 'window',\n              oldValue: node.local.previousBody,\n              newValue: node.local.body === false ? undefined : node.local.body,\n              oldContentType: node.local.previousContentType,\n              newContentType: node.local.contentType\n            });\n          }\n          delete node.local.previousBody;\n          delete node.local.previousContentType;\n        }\n      }\n\n      self.setNodes(nodes).then(function () {\n        self._emitChangeEvents(changeEvents);\n        promise.resolve({ statusCode: 200 });\n      });\n    }).then(function () {\n      return Promise.resolve();\n    }, function (err) {\n      promise.reject(err);\n    }).then(function () {\n      self._updateNodesRunning = false;\n      var nextJob = self._updateNodesQueued.shift();\n      if (nextJob) {\n        self._doUpdateNodes(nextJob.paths, nextJob.cb, nextJob.promise);\n      }\n    });\n  },\n\n  _emitChangeEvents: function _emitChangeEvents(events) {\n    for (var i = 0, len = events.length; i < len; i++) {\n      this._emitChange(events[i]);\n      if (this.diffHandler) {\n        this.diffHandler(events[i].path);\n      }\n    }\n  },\n\n  _getAllDescendentPaths: function _getAllDescendentPaths(path) {\n    var self = this;\n    if (isFolder(path)) {\n      return self.getNodes([path]).then(function (nodes) {\n        var allPaths = [path];\n        var latest = getLatest(nodes[path]);\n\n        var itemNames = Object.keys(latest.itemsMap);\n        var calls = itemNames.map(function (itemName) {\n          return self._getAllDescendentPaths(path + itemName).then(function (paths) {\n            for (var i = 0, len = paths.length; i < len; i++) {\n              allPaths.push(paths[i]);\n            }\n          });\n        });\n        return Promise.all(calls).then(function () {\n          return allPaths;\n        });\n      });\n    } else {\n      return Promise.resolve([path]);\n    }\n  },\n\n  _getInternals: function _getInternals() {\n    return {\n      getLatest: getLatest,\n      makeNode: makeNode,\n      isOutdated: isOutdated\n    };\n  }\n};\n\n/**\n * Function: cachingLayer\n *\n * Mixes common caching layer functionality into an object.\n *\n * The first parameter is always the object to be extended.\n *\n * Example:\n *   (start code)\n *   var MyConstructor = function () {\n *     cachingLayer(this);\n *   };\n *   (end code)\n */\nvar cachingLayer = function cachingLayer(object) {\n  for (var key in methods) {\n    object[key] = methods[key];\n  }\n};\n\nmodule.exports = cachingLayer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar util = __webpack_require__(2);\nvar Env = __webpack_require__(14);\nvar eventHandling = __webpack_require__(3);\nvar log = __webpack_require__(1);\nvar Authorize = __webpack_require__(4);\nvar config = __webpack_require__(5);\n\nvar isFolder = util.isFolder;\nvar isDocument = util.isDocument;\nvar equal = util.equal;\nvar deepClone = util.deepClone;\nvar pathsFromRoot = util.pathsFromRoot;\n\nfunction taskFor(action, path, promise) {\n  return {\n    action: action,\n    path: path,\n    promise: promise\n  };\n}\n\nfunction isStaleChild(node) {\n  return node.remote && node.remote.revision && !node.remote.itemsMap && !node.remote.body;\n}\n\nfunction hasCommonRevision(node) {\n  return node.common && node.common.revision;\n}\n\nfunction handleVisibility() {\n  var rs = this;\n\n  function handleVisibilityChange(fg) {\n    var oldValue, newValue;\n    oldValue = rs.getCurrentSyncInterval();\n    config.isBackground = !fg;\n    newValue = rs.getCurrentSyncInterval();\n    rs._emit('sync-interval-change', { oldValue: oldValue, newValue: newValue });\n  }\n\n  Env.on(\"background\", function () {\n    handleVisibilityChange(false);\n  });\n\n  Env.on(\"foreground\", function () {\n    handleVisibilityChange(true);\n  });\n}\n\n/**\n * Class: RemoteStorage.Sync\n *\n * What this class does is basically six things:\n * - retrieving the remote version of relevant documents and folders\n * - add all local and remote documents together into one tree\n * - push local documents out if they don't exist remotely\n * - push local changes out to remote documents (conditionally, to\n *      avoid race conditions where both have changed)\n * - adopt the local version of a document to its remote version if\n *      both exist and they differ\n * - delete the local version of a document if it was deleted remotely\n * - if any get requests were waiting for remote data, resolve them once\n *      this data comes in.\n *\n * It does this using requests to documents, and to folders. Whenever a\n * folder GET comes in, it gives information about all the documents it\n * contains (this is the `markChildren` function).\n **/\nvar Sync = function Sync(remoteStorage, setLocal, setRemote, setAccess, setCaching) {\n  this.remoteStorage = remoteStorage;\n  this.local = setLocal;\n  this.local.onDiff(function (path) {\n    this.addTask(path);\n    this.doTasks();\n  }.bind(this));\n  this.remote = setRemote;\n  this.access = setAccess;\n  this.caching = setCaching;\n  this._tasks = {};\n  this._running = {};\n  this._timeStarted = {};\n  eventHandling(this, 'done', 'req-done');\n  this.caching.onActivate(function (path) {\n    this.addTask(path);\n    this.doTasks();\n  }.bind(this));\n};\n\nSync.prototype = {\n\n  now: function now() {\n    return new Date().getTime();\n  },\n\n  queueGetRequest: function queueGetRequest(path) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (!_this.remote.connected) {\n        reject('cannot fulfill maxAge requirement - remote is not connected');\n      } else if (!_this.remote.online) {\n        reject('cannot fulfill maxAge requirement - remote is not online');\n      } else {\n        _this.addTask(path, function () {\n          this.local.get(path).then(function (r) {\n            return resolve(r);\n          });\n        }.bind(_this));\n\n        _this.doTasks();\n      }\n    });\n  },\n\n  corruptServerItemsMap: function corruptServerItemsMap(itemsMap, force02) {\n    if ((typeof itemsMap === 'undefined' ? 'undefined' : _typeof(itemsMap)) !== 'object' || Array.isArray(itemsMap)) {\n      return true;\n    }\n\n    for (var itemName in itemsMap) {\n      var item = itemsMap[itemName];\n\n      if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== 'object') {\n        return true;\n      }\n      if (typeof item.ETag !== 'string') {\n        return true;\n      }\n      if (isFolder(itemName)) {\n        if (itemName.substring(0, itemName.length - 1).indexOf('/') !== -1) {\n          return true;\n        }\n      } else {\n        if (itemName.indexOf('/') !== -1) {\n          return true;\n        }\n        if (force02) {\n          if (typeof item['Content-Type'] !== 'string') {\n            return true;\n          }\n          if (typeof item['Content-Length'] !== 'number') {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  corruptItemsMap: function corruptItemsMap(itemsMap) {\n    if ((typeof itemsMap === 'undefined' ? 'undefined' : _typeof(itemsMap)) !== 'object' || Array.isArray(itemsMap)) {\n      return true;\n    }\n\n    for (var itemName in itemsMap) {\n      if (typeof itemsMap[itemName] !== 'boolean') {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  corruptRevision: function corruptRevision(rev) {\n    return (typeof rev === 'undefined' ? 'undefined' : _typeof(rev)) !== 'object' || Array.isArray(rev) || rev.revision && typeof rev.revision !== 'string' || rev.body && typeof rev.body !== 'string' && _typeof(rev.body) !== 'object' || rev.contentType && typeof rev.contentType !== 'string' || rev.contentLength && typeof rev.contentLength !== 'number' || rev.timestamp && typeof rev.timestamp !== 'number' || rev.itemsMap && this.corruptItemsMap(rev.itemsMap);\n  },\n\n  isCorrupt: function isCorrupt(node) {\n    return (typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object' || Array.isArray(node) || typeof node.path !== 'string' || this.corruptRevision(node.common) || node.local && this.corruptRevision(node.local) || node.remote && this.corruptRevision(node.remote) || node.push && this.corruptRevision(node.push);\n  },\n\n  hasTasks: function hasTasks() {\n    return Object.getOwnPropertyNames(this._tasks).length > 0;\n  },\n\n  collectDiffTasks: function collectDiffTasks() {\n    var num = 0;\n\n    return this.local.forAllNodes(function (node) {\n\n      if (num > 100) {\n        return;\n      }\n\n      if (this.isCorrupt(node)) {\n        log('[Sync] WARNING: corrupt node in local cache', node);\n        if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node.path) {\n          this.addTask(node.path);\n          num++;\n        }\n      } else if (this.needsFetch(node) && this.access.checkPathPermission(node.path, 'r')) {\n        this.addTask(node.path);\n        num++;\n      } else if (isDocument(node.path) && this.needsPush(node) && this.access.checkPathPermission(node.path, 'rw')) {\n        this.addTask(node.path);\n        num++;\n      }\n    }.bind(this)).then(function () {\n      return num;\n    }, function (err) {\n      throw err;\n    });\n  },\n\n  inConflict: function inConflict(node) {\n    return node.local && node.remote && (node.remote.body !== undefined || node.remote.itemsMap);\n  },\n\n  needsRefresh: function needsRefresh(node) {\n    if (node.common) {\n      if (!node.common.timestamp) {\n        return true;\n      }\n      return this.now() - node.common.timestamp > config.syncInterval;\n    }\n    return false;\n  },\n\n  needsFetch: function needsFetch(node) {\n    if (this.inConflict(node)) {\n      return true;\n    }\n    if (node.common && node.common.itemsMap === undefined && node.common.body === undefined) {\n      return true;\n    }\n    if (node.remote && node.remote.itemsMap === undefined && node.remote.body === undefined) {\n      return true;\n    }\n    return false;\n  },\n\n  needsPush: function needsPush(node) {\n    if (this.inConflict(node)) {\n      return false;\n    }\n    if (node.local && !node.push) {\n      return true;\n    }\n  },\n\n  needsRemotePut: function needsRemotePut(node) {\n    return node.local && node.local.body;\n  },\n\n  needsRemoteDelete: function needsRemoteDelete(node) {\n    return node.local && node.local.body === false;\n  },\n\n  getParentPath: function getParentPath(path) {\n    var parts = path.match(/^(.*\\/)([^\\/]+\\/?)$/);\n\n    if (parts) {\n      return parts[1];\n    } else {\n      throw new Error('Not a valid path: \"' + path + '\"');\n    }\n  },\n\n  deleteChildPathsFromTasks: function deleteChildPathsFromTasks() {\n    for (var path in this._tasks) {\n      var paths = pathsFromRoot(path);\n\n      for (var i = 1; i < paths.length; i++) {\n        if (this._tasks[paths[i]]) {\n          // move pending promises to parent task\n          if (Array.isArray(this._tasks[path]) && this._tasks[path].length) {\n            Array.prototype.push.apply(this._tasks[paths[i]], this._tasks[path]);\n          }\n          delete this._tasks[path];\n        }\n      }\n    }\n  },\n\n  collectRefreshTasks: function collectRefreshTasks() {\n    return this.local.forAllNodes(function (node) {\n      var parentPath;\n      if (this.needsRefresh(node)) {\n        try {\n          parentPath = this.getParentPath(node.path);\n        } catch (e) {\n          // node.path is already '/', can't take parentPath\n        }\n        if (parentPath && this.access.checkPathPermission(parentPath, 'r')) {\n          this.addTask(parentPath);\n        } else if (this.access.checkPathPermission(node.path, 'r')) {\n          this.addTask(node.path);\n        }\n      }\n    }.bind(this)).then(function () {\n      this.deleteChildPathsFromTasks();\n    }.bind(this), function (err) {\n      throw err;\n    });\n  },\n\n  flush: function flush(nodes) {\n    for (var path in nodes) {\n      // Strategy is 'FLUSH' and no local changes exist\n      if (this.caching.checkPath(path) === 'FLUSH' && nodes[path] && !nodes[path].local) {\n        log('[Sync] Flushing', path);\n        nodes[path] = undefined; // Cause node to be flushed from cache\n      }\n    }\n    return nodes;\n  },\n\n  doTask: function doTask(path) {\n    return this.local.getNodes([path]).then(function (nodes) {\n      var node = nodes[path];\n      // First fetch:\n      if (typeof node === 'undefined') {\n        return taskFor('get', path, this.remote.get(path));\n      }\n      // Fetch known-stale child:\n      else if (isStaleChild(node)) {\n          return taskFor('get', path, this.remote.get(path));\n        }\n        // Push PUT:\n        else if (this.needsRemotePut(node)) {\n            node.push = deepClone(node.local);\n            node.push.timestamp = this.now();\n\n            return this.local.setNodes(this.flush(nodes)).then(function () {\n              var options;\n              if (hasCommonRevision(node)) {\n                options = { ifMatch: node.common.revision };\n              } else {\n                // Initial PUT (fail if something is already there)\n                options = { ifNoneMatch: '*' };\n              }\n\n              return taskFor('put', path, this.remote.put(path, node.push.body, node.push.contentType, options));\n            }.bind(this));\n          }\n          // Push DELETE:\n          else if (this.needsRemoteDelete(node)) {\n              node.push = { body: false, timestamp: this.now() };\n\n              return this.local.setNodes(this.flush(nodes)).then(function () {\n                if (hasCommonRevision(node)) {\n                  return taskFor('delete', path, this.remote.delete(path, { ifMatch: node.common.revision }));\n                } else {\n                  // Ascertain current common or remote revision first\n                  return taskFor('get', path, this.remote.get(path));\n                }\n              }.bind(this));\n            }\n            // Conditional refresh:\n            else if (hasCommonRevision(node)) {\n                return taskFor('get', path, this.remote.get(path, { ifNoneMatch: node.common.revision }));\n              } else {\n                return taskFor('get', path, this.remote.get(path));\n              }\n    }.bind(this));\n  },\n\n  autoMergeFolder: function autoMergeFolder(node) {\n    if (node.remote.itemsMap) {\n      node.common = node.remote;\n      delete node.remote;\n\n      if (node.common.itemsMap) {\n        for (var itemName in node.common.itemsMap) {\n          if (!node.local.itemsMap[itemName]) {\n            // Indicates the node is either newly being fetched\n            // has been deleted locally (whether or not leading to conflict);\n            // before listing it in local listings, check if a local deletion\n            // exists.\n            node.local.itemsMap[itemName] = false;\n          }\n        }\n\n        if (equal(node.local.itemsMap, node.common.itemsMap)) {\n          delete node.local;\n        }\n      }\n    }\n    return node;\n  },\n\n  autoMergeDocument: function autoMergeDocument(node) {\n    hasNoRemoteChanges = function hasNoRemoteChanges(node) {\n      if (node.remote && node.remote.revision && node.remote.revision !== node.common.revision) {\n        return false;\n      }\n      return node.common.body === undefined && node.remote.body === false || node.remote.body === node.common.body && node.remote.contentType === node.common.contentType;\n    };\n    mergeMutualDeletion = function mergeMutualDeletion(node) {\n      if (node.remote && node.remote.body === false && node.local && node.local.body === false) {\n        delete node.local;\n      }\n      return node;\n    };\n\n    if (hasNoRemoteChanges(node)) {\n      node = mergeMutualDeletion(node);\n      delete node.remote;\n    } else if (node.remote.body !== undefined) {\n      // keep/revert:\n      log('[Sync] Emitting keep/revert');\n\n      this.local._emitChange({\n        origin: 'conflict',\n        path: node.path,\n        oldValue: node.local.body,\n        newValue: node.remote.body,\n        lastCommonValue: node.common.body,\n        oldContentType: node.local.contentType,\n        newContentType: node.remote.contentType,\n        lastCommonContentType: node.common.contentType\n      });\n\n      if (node.remote.body) {\n        node.common = node.remote;\n      } else {\n        node.common = {};\n      }\n      delete node.remote;\n      delete node.local;\n    }\n    return node;\n  },\n\n  autoMerge: function autoMerge(node) {\n    if (node.remote) {\n      if (node.local) {\n        if (isFolder(node.path)) {\n          return this.autoMergeFolder(node);\n        } else {\n          return this.autoMergeDocument(node);\n        }\n      } else {\n        // no local changes\n        if (isFolder(node.path)) {\n          if (node.remote.itemsMap !== undefined) {\n            node.common = node.remote;\n            delete node.remote;\n          }\n        } else {\n          if (node.remote.body !== undefined) {\n            var change = {\n              origin: 'remote',\n              path: node.path,\n              oldValue: node.common.body === false ? undefined : node.common.body,\n              newValue: node.remote.body === false ? undefined : node.remote.body,\n              oldContentType: node.common.contentType,\n              newContentType: node.remote.contentType\n            };\n            if (change.oldValue || change.newValue) {\n              this.local._emitChange(change);\n            }\n\n            if (!node.remote.body) {\n              // no remote, so delete/don't create\n              return;\n            }\n\n            node.common = node.remote;\n            delete node.remote;\n          }\n        }\n      }\n    } else {\n      if (node.common.body) {\n        this.local._emitChange({\n          origin: 'remote',\n          path: node.path,\n          oldValue: node.common.body,\n          newValue: undefined,\n          oldContentType: node.common.contentType,\n          newContentType: undefined\n        });\n      }\n\n      return undefined;\n    }\n    return node;\n  },\n\n  updateCommonTimestamp: function updateCommonTimestamp(path, revision) {\n    return this.local.getNodes([path]).then(function (nodes) {\n      if (nodes[path] && nodes[path].common && nodes[path].common.revision === revision) {\n        nodes[path].common.timestamp = this.now();\n      }\n      return this.local.setNodes(this.flush(nodes));\n    }.bind(this));\n  },\n\n  markChildren: function markChildren(path, itemsMap, changedNodes, missingChildren) {\n    var paths = [];\n    var meta = {};\n    var recurse = {};\n\n    for (var item in itemsMap) {\n      paths.push(path + item);\n      meta[path + item] = itemsMap[item];\n    }\n    for (var childName in missingChildren) {\n      paths.push(path + childName);\n    }\n\n    return this.local.getNodes(paths).then(function (nodes) {\n      var cachingStrategy;\n      var node;\n\n      var nodeChanged = function nodeChanged(node, etag) {\n        return node.common.revision !== etag && (!node.remote || node.remote.revision !== etag);\n      };\n\n      for (var nodePath in nodes) {\n        node = nodes[nodePath];\n\n        if (meta[nodePath]) {\n          if (node && node.common) {\n            if (nodeChanged(node, meta[nodePath].ETag)) {\n              changedNodes[nodePath] = deepClone(node);\n              changedNodes[nodePath].remote = {\n                revision: meta[nodePath].ETag,\n                timestamp: this.now()\n              };\n              changedNodes[nodePath] = this.autoMerge(changedNodes[nodePath]);\n            }\n          } else {\n            cachingStrategy = this.caching.checkPath(nodePath);\n            if (cachingStrategy === 'ALL') {\n              changedNodes[nodePath] = {\n                path: nodePath,\n                common: {\n                  timestamp: this.now()\n                },\n                remote: {\n                  revision: meta[nodePath].ETag,\n                  timestamp: this.now()\n                }\n              };\n            }\n          }\n\n          if (changedNodes[nodePath] && meta[nodePath]['Content-Type']) {\n            changedNodes[nodePath].remote.contentType = meta[nodePath]['Content-Type'];\n          }\n\n          if (changedNodes[nodePath] && meta[nodePath]['Content-Length']) {\n            changedNodes[nodePath].remote.contentLength = meta[nodePath]['Content-Length'];\n          }\n        } else if (missingChildren[nodePath.substring(path.length)] && node && node.common) {\n          if (node.common.itemsMap) {\n            for (var commonItem in node.common.itemsMap) {\n              recurse[nodePath + commonItem] = true;\n            }\n          }\n\n          if (node.local && node.local.itemsMap) {\n            for (var localItem in node.local.itemsMap) {\n              recurse[nodePath + localItem] = true;\n            }\n          }\n\n          if (node.remote || isFolder(nodePath)) {\n            changedNodes[nodePath] = undefined;\n          } else {\n            changedNodes[nodePath] = this.autoMerge(node);\n\n            if (typeof changedNodes[nodePath] === 'undefined') {\n              var parentPath = this.getParentPath(nodePath);\n              var parentNode = changedNodes[parentPath];\n              var itemName = nodePath.substring(path.length);\n              if (parentNode && parentNode.local) {\n                delete parentNode.local.itemsMap[itemName];\n\n                if (equal(parentNode.local.itemsMap, parentNode.common.itemsMap)) {\n                  delete parentNode.local;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return this.deleteRemoteTrees(Object.keys(recurse), changedNodes).then(function (changedObjs2) {\n        return this.local.setNodes(this.flush(changedObjs2));\n      }.bind(this));\n    }.bind(this));\n  },\n\n  deleteRemoteTrees: function deleteRemoteTrees(paths, changedNodes) {\n    if (paths.length === 0) {\n      return Promise.resolve(changedNodes);\n    }\n\n    return this.local.getNodes(paths).then(function (nodes) {\n      var subPaths = {};\n\n      collectSubPaths = function collectSubPaths(folder, path) {\n        if (folder && folder.itemsMap) {\n          for (var itemName in folder.itemsMap) {\n            subPaths[path + itemName] = true;\n          }\n        }\n      };\n\n      for (var path in nodes) {\n        var node = nodes[path];\n\n        // TODO Why check for the node here? I don't think this check ever applies\n        if (!node) {\n          continue;\n        }\n\n        if (isFolder(path)) {\n          collectSubPaths(node.common, path);\n          collectSubPaths(node.local, path);\n        } else {\n          if (node.common && _typeof(node.common.body) !== undefined) {\n            changedNodes[path] = deepClone(node);\n            changedNodes[path].remote = {\n              body: false,\n              timestamp: this.now()\n            };\n            changedNodes[path] = this.autoMerge(changedNodes[path]);\n          }\n        }\n      }\n\n      // Recurse whole tree depth levels at once:\n      return this.deleteRemoteTrees(Object.keys(subPaths), changedNodes).then(function (changedNodes2) {\n        return this.local.setNodes(this.flush(changedNodes2));\n      }.bind(this));\n    }.bind(this));\n  },\n\n  completeFetch: function completeFetch(path, bodyOrItemsMap, contentType, revision) {\n    var paths;\n    var parentPath;\n    var pathsFromRootArr = pathsFromRoot(path);\n\n    if (isFolder(path)) {\n      paths = [path];\n    } else {\n      parentPath = pathsFromRootArr[1];\n      paths = [path, parentPath];\n    }\n\n    return this.local.getNodes(paths).then(function (nodes) {\n      var itemName;\n      var missingChildren = {};\n      var node = nodes[path];\n      var parentNode;\n\n      var collectMissingChildren = function collectMissingChildren(folder) {\n        if (folder && folder.itemsMap) {\n          for (var itemName in folder.itemsMap) {\n            if (!bodyOrItemsMap[itemName]) {\n              missingChildren[itemName] = true;\n            }\n          }\n        }\n      };\n\n      if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object' || node.path !== path || _typeof(node.common) !== 'object') {\n        node = {\n          path: path,\n          common: {}\n        };\n        nodes[path] = node;\n      }\n\n      node.remote = {\n        revision: revision,\n        timestamp: this.now()\n      };\n\n      if (isFolder(path)) {\n        collectMissingChildren(node.common);\n        collectMissingChildren(node.remote);\n\n        node.remote.itemsMap = {};\n        for (itemName in bodyOrItemsMap) {\n          node.remote.itemsMap[itemName] = true;\n        }\n      } else {\n        node.remote.body = bodyOrItemsMap;\n        node.remote.contentType = contentType;\n\n        parentNode = nodes[parentPath];\n        if (parentNode && parentNode.local && parentNode.local.itemsMap) {\n          itemName = path.substring(parentPath.length);\n          parentNode.local.itemsMap[itemName] = true;\n          if (equal(parentNode.local.itemsMap, parentNode.common.itemsMap)) {\n            delete parentNode.local;\n          }\n        }\n      }\n\n      nodes[path] = this.autoMerge(node);\n      return {\n        toBeSaved: nodes,\n        missingChildren: missingChildren\n      };\n    }.bind(this));\n  },\n\n  completePush: function completePush(path, action, conflict, revision) {\n    return this.local.getNodes([path]).then(function (nodes) {\n      var node = nodes[path];\n\n      if (!node.push) {\n        this.stopped = true;\n        throw new Error('completePush called but no push version!');\n      }\n\n      if (conflict) {\n        log('[Sync] We have a conflict');\n\n        if (!node.remote || node.remote.revision !== revision) {\n          node.remote = {\n            revision: revision || 'conflict',\n            timestamp: this.now()\n          };\n          delete node.push;\n        }\n\n        nodes[path] = this.autoMerge(node);\n      } else {\n        node.common = {\n          revision: revision,\n          timestamp: this.now()\n        };\n\n        if (action === 'put') {\n          node.common.body = node.push.body;\n          node.common.contentType = node.push.contentType;\n\n          if (equal(node.local.body, node.push.body) && node.local.contentType === node.push.contentType) {\n            delete node.local;\n          }\n\n          delete node.push;\n        } else if (action === 'delete') {\n          if (node.local.body === false) {\n            // No new local changes since push; flush it.\n            nodes[path] = undefined;\n          } else {\n            delete node.push;\n          }\n        }\n      }\n\n      return this.local.setNodes(this.flush(nodes));\n    }.bind(this));\n  },\n\n  dealWithFailure: function dealWithFailure(path, action, statusMeaning) {\n\n    return this.local.getNodes([path]).then(function (nodes) {\n      if (nodes[path]) {\n        delete nodes[path].push;\n        return this.local.setNodes(this.flush(nodes));\n      }\n    }.bind(this));\n  },\n\n  interpretStatus: function interpretStatus(statusCode) {\n    if (statusCode === 'offline' || statusCode === 'timeout') {\n      return {\n        successful: false,\n        networkProblems: true,\n        statusCode: statusCode\n      };\n    }\n\n    var series = Math.floor(statusCode / 100);\n\n    return {\n      successful: series === 2 || statusCode === 304 || statusCode === 412 || statusCode === 404,\n      conflict: statusCode === 412,\n      unAuth: statusCode === 401 && this.remote.token !== Authorize.IMPLIED_FAKE_TOKEN || statusCode === 402 || statusCode === 403,\n      notFound: statusCode === 404,\n      changed: statusCode !== 304,\n      statusCode: statusCode\n    };\n  },\n\n  handleGetResponse: function handleGetResponse(path, status, bodyOrItemsMap, contentType, revision) {\n    if (status.notFound) {\n      if (isFolder(path)) {\n        bodyOrItemsMap = {};\n      } else {\n        bodyOrItemsMap = false;\n      }\n    }\n\n    if (status.changed) {\n      return this.completeFetch(path, bodyOrItemsMap, contentType, revision).then(function (dataFromFetch) {\n        if (isFolder(path)) {\n          if (this.corruptServerItemsMap(bodyOrItemsMap)) {\n            log('[Sync] WARNING: Discarding corrupt folder description from server for ' + path);\n            return false;\n          } else {\n            return this.markChildren(path, bodyOrItemsMap, dataFromFetch.toBeSaved, dataFromFetch.missingChildren).then(function () {\n              return true;\n            });\n          }\n        } else {\n          return this.local.setNodes(this.flush(dataFromFetch.toBeSaved)).then(function () {\n            return true;\n          });\n        }\n      }.bind(this));\n    } else {\n      return this.updateCommonTimestamp(path, revision).then(function () {\n        return true;\n      });\n    }\n  },\n\n  handleResponse: function handleResponse(path, action, r) {\n    var status = this.interpretStatus(r.statusCode);\n    if (status.successful) {\n      if (action === 'get') {\n        return this.handleGetResponse(path, status, r.body, r.contentType, r.revision);\n      } else if (action === 'put' || action === 'delete') {\n        return this.completePush(path, action, status.conflict, r.revision).then(function () {\n          return true;\n        });\n      } else {\n        throw new Error('cannot handle response for unknown action', action);\n      }\n    } else {\n      // Unsuccessful\n      var error;\n      if (status.unAuth) {\n        error = new Authorize.Unauthorized();\n      } else if (status.networkProblems) {\n        error = new Sync.SyncError('Network request failed.');\n      } else {\n        error = new Error('HTTP response code ' + status.statusCode + ' received.');\n      }\n\n      return this.dealWithFailure(path, action, status).then(function () {\n        this.remoteStorage._emit('error', error);\n        throw error;\n      });\n    }\n  },\n\n  numThreads: 10,\n\n  finishTask: function finishTask(task) {\n    if (task.action === undefined) {\n      delete this._running[task.path];\n      return;\n    }\n    var self = this;\n\n    return task.promise.then(function (r) {\n      return self.handleResponse(task.path, task.action, r);\n    }, function (err) {\n      log('[Sync] wireclient rejects its promise!', task.path, task.action, err);\n      return self.handleResponse(task.path, task.action, { statusCode: 'offline' });\n    }).then(function (completed) {\n      delete self._timeStarted[task.path];\n      delete self._running[task.path];\n\n      if (completed) {\n        if (self._tasks[task.path]) {\n          for (var i = 0; i < self._tasks[task.path].length; i++) {\n            self._tasks[task.path][i]();\n          }\n          delete self._tasks[task.path];\n        }\n      }\n\n      self._emit('req-done');\n\n      self.collectTasks(false).then(function () {\n        // See if there are any more tasks that are not refresh tasks\n        if (!self.hasTasks() || self.stopped) {\n          log('[Sync] Sync is done! Reschedule?', Object.getOwnPropertyNames(self._tasks).length, self.stopped);\n          if (!self.done) {\n            self.done = true;\n            self._emit('done');\n          }\n        } else {\n          // Use a 10ms timeout to let the JavaScript runtime catch its breath\n          // (and hopefully force an IndexedDB auto-commit?), and also to cause\n          // the threads to get staggered and get a good spread over time:\n          setTimeout(function () {\n            self.doTasks();\n          }, 10);\n        }\n      });\n    }, function (err) {\n      log('[Sync] Error', err);\n      delete self._timeStarted[task.path];\n      delete self._running[task.path];\n      self._emit('req-done');\n      if (!self.done) {\n        self.done = true;\n        self._emit('done');\n      }\n    });\n  },\n\n  doTasks: function doTasks() {\n    var numToHave,\n        numAdded = 0,\n        numToAdd,\n        path;\n    if (this.remote.connected) {\n      if (this.remote.online) {\n        numToHave = this.numThreads;\n      } else {\n        numToHave = 1;\n      }\n    } else {\n      numToHave = 0;\n    }\n    numToAdd = numToHave - Object.getOwnPropertyNames(this._running).length;\n    if (numToAdd <= 0) {\n      return true;\n    }\n    for (path in this._tasks) {\n      if (!this._running[path]) {\n        this._timeStarted[path] = this.now();\n        this._running[path] = this.doTask(path);\n        this._running[path].then(this.finishTask.bind(this));\n        numAdded++;\n        if (numAdded >= numToAdd) {\n          return true;\n        }\n      }\n    }\n    return numAdded >= numToAdd;\n  },\n\n  collectTasks: function collectTasks(alsoCheckRefresh) {\n    if (this.hasTasks() || this.stopped) {\n      return Promise.resolve();\n    }\n\n    return this.collectDiffTasks().then(function (numDiffs) {\n      if (numDiffs || alsoCheckRefresh === false) {\n        return Promise.resolve();\n      } else {\n        return this.collectRefreshTasks();\n      }\n    }.bind(this), function (err) {\n      throw err;\n    });\n  },\n\n  addTask: function addTask(path, cb) {\n    if (!this._tasks[path]) {\n      this._tasks[path] = [];\n    }\n    if (typeof cb === 'function') {\n      this._tasks[path].push(cb);\n    }\n  },\n\n  /**\n   * Method: sync\n   **/\n  sync: function sync() {\n    this.done = false;\n\n    if (!this.doTasks()) {\n      return this.collectTasks().then(function () {\n        try {\n          this.doTasks();\n        } catch (e) {\n          log('[Sync] doTasks error', e);\n        }\n      }.bind(this), function (e) {\n        log('[Sync] Sync error', e);\n        throw new Error('Local cache unavailable');\n      });\n    } else {\n      return Promise.resolve();\n    }\n  }\n};\n\nvar syncCycleCb, _syncOnConnect;\nSync._rs_init = function (remoteStorage) {\n\n  syncCycleCb = function syncCycleCb() {\n    // if (!config.cache) return false\n    log('[Sync] syncCycleCb calling syncCycle');\n    if (Env.isBrowser()) {\n      handleVisibility.bind(remoteStorage)();\n    }\n\n    if (!remoteStorage.sync) {\n      // Call this now that all other modules are also ready:\n      remoteStorage.sync = new Sync(remoteStorage, remoteStorage.local, remoteStorage.remote, remoteStorage.access, remoteStorage.caching);\n\n      if (remoteStorage.syncStopped) {\n        log('[Sync] Instantiating sync stopped');\n        remoteStorage.sync.stopped = true;\n        delete remoteStorage.syncStopped;\n      }\n    }\n\n    log('[Sync] syncCycleCb calling syncCycle');\n    remoteStorage.syncCycle();\n  };\n\n  _syncOnConnect = function syncOnConnect() {\n    remoteStorage.removeEventListener('connected', _syncOnConnect);\n    remoteStorage.startSync();\n  };\n\n  remoteStorage.on('ready', syncCycleCb);\n  remoteStorage.on('connected', _syncOnConnect);\n};\n\nSync._rs_cleanup = function (remoteStorage) {\n  remoteStorage.stopSync();\n  remoteStorage.removeEventListener('ready', syncCycleCb);\n  remoteStorage.removeEventListener('connected', _syncOnConnect);\n\n  remoteStorage.sync = undefined;\n  delete remoteStorage.sync;\n};\n\nvar SyncError = function SyncError(originalError) {\n  var msg = 'Sync failed: ';\n  if ((typeof originalError === 'undefined' ? 'undefined' : _typeof(originalError)) === 'object' && 'message' in originalError) {\n    msg += originalError.message;\n  } else {\n    msg += originalError;\n  }\n  this.originalError = originalError;\n  this.message = msg;\n};\n\nSyncError.prototype = new Error();\nSyncError.prototype.constructor = SyncError;\n\nSync.SyncError = SyncError;\n\nmodule.exports = Sync;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global, Buffer) {'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar log = __webpack_require__(1);\nvar util = __webpack_require__(2);\nvar eventHandling = __webpack_require__(3);\nvar Authorize = __webpack_require__(4);\n\n/**\n * Class: WireClient\n *\n * WireClient Interface\n * --------------------\n *\n * This file exposes a get/put/delete interface on top of XMLHttpRequest.\n * It requires to be configured with parameters about the remotestorage server to\n * connect to.\n * Each instance of WireClient is always associated with a single remotestorage\n * server and access token.\n *\n * Usually the WireClient instance can be accessed via `remoteStorage.remote`.\n *\n * This is the get/put/delete interface:\n *\n *   - #get() takes a path and optionally a ifNoneMatch option carrying a version\n *     string to check. It returns a promise that will be fulfilled with the HTTP\n *     response status, the response body, the MIME type as returned in the\n *     'Content-Type' header and the current revision, as returned in the 'ETag'\n *     header.\n *   - #put() takes a path, the request body and a content type string. It also\n *     accepts the ifMatch and ifNoneMatch options, that map to the If-Match and\n *     If-None-Match headers respectively. See the remotestorage-01 specification\n *     for details on handling these headers. It returns a promise, fulfilled with\n *     the same values as the one for #get().\n *   - #delete() takes a path and the ifMatch option as well. It returns a promise\n *     fulfilled with the same values as the one for #get().\n *\n * In addition to this, the WireClient has some compatibility features to work with\n * remotestorage 2012.04 compatible storages. For example it will cache revisions\n * from folder listings in-memory and return them accordingly as the \"revision\"\n * parameter in response to #get() requests. Similarly it will return 404 when it\n * receives an empty folder listing, to mimic remotestorage-01 behavior. Note\n * that it is not always possible to know the revision beforehand, hence it may\n * be undefined at times (especially for caching-roots).\n */\n\nvar hasLocalStorage;\nvar SETTINGS_KEY = 'remotestorage:wireclient';\n\nvar API_2012 = 1,\n    API_00 = 2,\n    API_01 = 3,\n    API_02 = 4,\n    API_HEAD = 5;\n\nvar STORAGE_APIS = {\n  'draft-dejong-remotestorage-00': API_00,\n  'draft-dejong-remotestorage-01': API_01,\n  'draft-dejong-remotestorage-02': API_02,\n  'https://www.w3.org/community/rww/wiki/read-write-web-00#simple': API_2012\n};\n\nvar isArrayBufferView;\n\nif (typeof ArrayBufferView === 'function') {\n  isArrayBufferView = function isArrayBufferView(object) {\n    return object && object instanceof ArrayBufferView;\n  };\n} else {\n  var arrayBufferViews = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];\n  isArrayBufferView = function isArrayBufferView(object) {\n    for (var i = 0; i < 8; i++) {\n      if (object instanceof arrayBufferViews[i]) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n\nvar isFolder = util.isFolder;\nvar cleanPath = util.cleanPath;\n\nfunction addQuotes(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str === '*') {\n    return '*';\n  }\n\n  return '\"' + str + '\"';\n}\n\nfunction stripQuotes(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return str.replace(/^[\"']|[\"']$/g, '');\n}\n\nfunction readBinaryData(content, mimeType, callback) {\n  var blob;\n  util.globalContext.BlobBuilder = util.globalContext.BlobBuilder || util.globalContext.WebKitBlobBuilder;\n  if (typeof util.globalContext.BlobBuilder !== 'undefined') {\n    var bb = new global.BlobBuilder();\n    bb.append(content);\n    blob = bb.getBlob(mimeType);\n  } else {\n    blob = new Blob([content], { type: mimeType });\n  }\n\n  var reader = new FileReader();\n  if (typeof reader.addEventListener === 'function') {\n    reader.addEventListener('loadend', function () {\n      callback(reader.result); // reader.result contains the contents of blob as a typed array\n    });\n  } else {\n    reader.onloadend = function () {\n      callback(reader.result); // reader.result contains the contents of blob as a typed array\n    };\n  }\n  reader.readAsArrayBuffer(blob);\n}\n\nfunction getTextFromArrayBuffer(arrayBuffer, encoding) {\n  return new Promise(function (resolve, reject) {\n    if (typeof Blob === 'undefined') {\n      var buffer = new Buffer(new Uint8Array(arrayBuffer));\n      resolve(buffer.toString(encoding));\n    } else {\n      var blob;\n      util.globalContext.BlobBuilder = util.globalContext.BlobBuilder || util.globalContext.WebKitBlobBuilder;\n      if (typeof util.globalContext.BlobBuilder !== 'undefined') {\n        var bb = new global.BlobBuilder();\n        bb.append(arrayBuffer);\n        blob = bb.getBlob();\n      } else {\n        blob = new Blob([arrayBuffer]);\n      }\n\n      var fileReader = new FileReader();\n      if (typeof fileReader.addEventListener === 'function') {\n        fileReader.addEventListener('loadend', function (evt) {\n          resolve(evt.target.result);\n        });\n      } else {\n        fileReader.onloadend = function (evt) {\n          resolve(evt.target.result);\n        };\n      }\n      fileReader.readAsText(blob, encoding);\n    }\n  });\n}\n\nfunction determineCharset(mimeType) {\n  var charset = 'UTF-8';\n  var charsetMatch;\n\n  if (mimeType) {\n    charsetMatch = mimeType.match(/charset=(.+)$/);\n    if (charsetMatch) {\n      charset = charsetMatch[1];\n    }\n  }\n  return charset;\n}\n\nfunction isFolderDescription(body) {\n  return body['@context'] === 'http://remotestorage.io/spec/folder-description' && _typeof(body['items']) === 'object';\n}\n\nfunction isSuccessStatus(status) {\n  return [201, 204, 304].indexOf(status) >= 0;\n}\n\nfunction isErrorStatus(status) {\n  return [401, 403, 404, 412].indexOf(status) >= 0;\n}\n\nvar onErrorCb;\n\n/**\n * Class : WireClient\n **/\nvar WireClient = function WireClient(rs) {\n  this.rs = rs;\n  this.connected = false;\n\n  /**\n   * Event: change\n   *   Never fired for some reason\n   *   # TODO create issue and fix or remove\n   *\n   * Event: connected\n   *   Fired when the wireclient connect method realizes that it is in\n   *   possession of a token and href\n   **/\n  eventHandling(this, 'change', 'connected', 'not-connected', 'wire-busy', 'wire-done');\n\n  onErrorCb = function (error) {\n    if (error instanceof Authorize.Unauthorized) {\n      this.configure({ token: null });\n    }\n  }.bind(this);\n  rs.on('error', onErrorCb);\n  if (hasLocalStorage) {\n    var settings;\n    try {\n      settings = JSON.parse(localStorage[SETTINGS_KEY]);\n    } catch (e) {}\n    if (settings) {\n      setTimeout(function () {\n        this.configure(settings);\n      }.bind(this), 0);\n    }\n  }\n\n  this._revisionCache = {};\n\n  if (this.connected) {\n    setTimeout(this._emit.bind(this), 0, 'connected');\n  }\n};\n\n// should we put this in config ?\nWireClient.REQUEST_TIMEOUT = 30000;\n\nWireClient.prototype = {\n  /**\n   * Property: token\n   *\n   * Holds the bearer token of this WireClient, as obtained in the OAuth dance\n   *\n   * Example:\n   *   (start code)\n   *\n   *   remoteStorage.remote.token\n   *   // -> 'DEADBEEF01=='\n   */\n\n  /**\n   * Property: href\n   *\n   * Holds the server's base URL, as obtained in the Webfinger discovery\n   *\n   * Example:\n   *   (start code)\n   *\n   *   remoteStorage.remote.href\n   *   // -> 'https://storage.example.com/users/jblogg/'\n   */\n\n  /**\n   * Property: storageApi\n   *\n   * Holds the spec version the server claims to be compatible with\n   *\n   * Example:\n   *   (start code)\n   *\n   *   remoteStorage.remote.storageApi\n   *   // -> 'draft-dejong-remotestorage-01'\n   */\n\n  _request: function _request(method, uri, token, headers, body, getEtag, fakeRevision) {\n    if ((method === 'PUT' || method === 'DELETE') && uri[uri.length - 1] === '/') {\n      return Promise.reject('Don\\'t ' + method + ' on directories!');\n    }\n\n    var revision;\n    var self = this;\n\n    if (token !== Authorize.IMPLIED_FAKE_TOKEN) {\n      headers['Authorization'] = 'Bearer ' + token;\n    }\n\n    this._emit('wire-busy', {\n      method: method,\n      isFolder: isFolder(uri)\n    });\n\n    return WireClient.request(method, uri, {\n      body: body,\n      headers: headers,\n      responseType: 'arraybuffer'\n    }).then(function (response) {\n      if (!self.online) {\n        self.online = true;\n        self.rs._emit('network-online');\n      }\n      self._emit('wire-done', {\n        method: method,\n        isFolder: isFolder(uri),\n        success: true\n      });\n\n      if (isErrorStatus(response.status)) {\n        log('[WireClient] Error response status', response.status);\n        if (getEtag) {\n          revision = stripQuotes(response.getResponseHeader('ETag'));\n        } else {\n          revision = undefined;\n        }\n        return Promise.resolve({ statusCode: response.status, revision: revision });\n      } else if (isSuccessStatus(response.status) || response.status === 200 && method !== 'GET') {\n        revision = stripQuotes(response.getResponseHeader('ETag'));\n        log('[WireClient] Successful request', revision);\n        return Promise.resolve({ statusCode: response.status, revision: revision });\n      } else {\n        var mimeType = response.getResponseHeader('Content-Type');\n        if (getEtag) {\n          revision = stripQuotes(response.getResponseHeader('ETag'));\n        } else {\n          revision = response.status === 200 ? fakeRevision : undefined;\n        }\n\n        var charset = determineCharset(mimeType);\n\n        if (!mimeType || charset === 'binary') {\n          log('[WireClient] Successful request with unknown or binary mime-type', revision);\n          return Promise.resolve({ statusCode: response.status, body: response.response, contentType: mimeType, revision: revision });\n        } else {\n          return getTextFromArrayBuffer(response.response, charset).then(function (body) {\n            log('[WireClient] Successful request', revision);\n            return Promise.resolve({ statusCode: response.status, body: body, contentType: mimeType, revision: revision });\n          });\n        }\n      }\n    }, function (error) {\n      if (self.online) {\n        self.online = false;\n        self.rs._emit('network-offline');\n      }\n      self._emit('wire-done', {\n        method: method,\n        isFolder: isFolder(uri),\n        success: false\n      });\n\n      return Promise.reject(error);\n    });\n  },\n\n  /**\n   *\n   * Method: configure\n   *\n   * Sets the userAddress, href, storageApi, token, and properties of a\n   * remote store. Also sets connected and online to true and emits the\n   * 'connected' event, if both token and href are present.\n   *\n   * Parameters:\n   *   settings - An object that may contain userAddress (string or null),\n   *              href (string or null), storageApi (string or null), token (string\n   *              or null), and/or properties (the JSON-parsed properties object\n   *              from the user's WebFinger record, see section 10 of\n   *              http://tools.ietf.org/html/draft-dejong-remotestorage-03\n   *              or null).\n   *              Fields that are not included (i.e. `undefined`), stay at\n   *              their current value. To set a field, include that field\n   *              with a `string` value. To reset a field, for instance when\n   *              the user disconnected their storage, or you found that the\n   *              token you have has expired, simply set that field to `null`.\n   */\n  configure: function configure(settings) {\n    if ((typeof settings === 'undefined' ? 'undefined' : _typeof(settings)) !== 'object') {\n      throw new Error('WireClient configure settings parameter should be an object');\n    }\n    if (typeof settings.userAddress !== 'undefined') {\n      this.userAddress = settings.userAddress;\n    }\n    if (typeof settings.href !== 'undefined') {\n      this.href = settings.href;\n    }\n    if (typeof settings.storageApi !== 'undefined') {\n      this.storageApi = settings.storageApi;\n    }\n    if (typeof settings.token !== 'undefined') {\n      this.token = settings.token;\n    }\n    if (typeof settings.properties !== 'undefined') {\n      this.properties = settings.properties;\n    }\n\n    if (typeof this.storageApi !== 'undefined') {\n      this._storageApi = STORAGE_APIS[this.storageApi] || API_HEAD;\n      this.supportsRevs = this._storageApi >= API_00;\n    }\n    if (this.href && this.token) {\n      this.connected = true;\n      this.online = true;\n      this._emit('connected');\n    } else {\n      this.connected = false;\n    }\n    if (hasLocalStorage) {\n      localStorage[SETTINGS_KEY] = JSON.stringify({\n        userAddress: this.userAddress,\n        href: this.href,\n        storageApi: this.storageApi,\n        token: this.token,\n        properties: this.properties\n      });\n    }\n  },\n\n  stopWaitingForToken: function stopWaitingForToken() {\n    if (!this.connected) {\n      this._emit('not-connected');\n    }\n  },\n\n  get: function get(path, options) {\n    var self = this;\n    if (!this.connected) {\n      return Promise.reject('not connected (path: ' + path + ')');\n    }\n    if (!options) {\n      options = {};\n    }\n    var headers = {};\n    if (this.supportsRevs) {\n      if (options.ifNoneMatch) {\n        headers['If-None-Match'] = addQuotes(options.ifNoneMatch);\n      }\n    }\n    // commenting it out as this is doing nothing and jshint is complaining -les\n    // else if (options.ifNoneMatch) {\n    //   var oldRev = this._revisionCache[path];\n    // }\n\n\n    return this._request('GET', this.href + cleanPath(path), this.token, headers, undefined, this.supportsRevs, this._revisionCache[path]).then(function (r) {\n      if (!isFolder(path)) {\n        return Promise.resolve(r);\n      }\n      var itemsMap = {};\n      if (typeof r.body !== 'undefined') {\n        try {\n          r.body = JSON.parse(r.body);\n        } catch (e) {\n          return Promise.reject('Folder description at ' + self.href + cleanPath(path) + ' is not JSON');\n        }\n      }\n\n      if (r.statusCode === 200 && _typeof(r.body) === 'object') {\n        // New folder listing received\n        if (Object.keys(r.body).length === 0) {\n          // Empty folder listing of any spec\n          r.statusCode = 404;\n        } else if (isFolderDescription(r.body)) {\n          // >= 02 spec\n          for (var item in r.body.items) {\n            self._revisionCache[path + item] = r.body.items[item].ETag;\n          }\n          itemsMap = r.body.items;\n        } else {\n          // < 02 spec\n          Object.keys(r.body).forEach(function (key) {\n            self._revisionCache[path + key] = r.body[key];\n            itemsMap[key] = { 'ETag': r.body[key] };\n          });\n        }\n        r.body = itemsMap;\n        return Promise.resolve(r);\n      } else {\n        return Promise.resolve(r);\n      }\n    });\n  },\n\n  put: function put(path, body, contentType, options) {\n    if (!this.connected) {\n      return Promise.reject('not connected (path: ' + path + ')');\n    }\n    if (!options) {\n      options = {};\n    }\n    if (!contentType.match(/charset=/) && (body instanceof ArrayBuffer || isArrayBufferView(body))) {\n      contentType += '; charset=binary';\n    }\n    var headers = { 'Content-Type': contentType };\n    if (this.supportsRevs) {\n      if (options.ifMatch) {\n        headers['If-Match'] = addQuotes(options.ifMatch);\n      }\n      if (options.ifNoneMatch) {\n        headers['If-None-Match'] = addQuotes(options.ifNoneMatch);\n      }\n    }\n    return this._request('PUT', this.href + cleanPath(path), this.token, headers, body, this.supportsRevs);\n  },\n\n  'delete': function _delete(path, options) {\n    if (!this.connected) {\n      throw new Error('not connected (path: ' + path + ')');\n    }\n    if (!options) {\n      options = {};\n    }\n    var headers = {};\n    if (this.supportsRevs) {\n      if (options.ifMatch) {\n        headers['If-Match'] = addQuotes(options.ifMatch);\n      }\n    }\n    return this._request('DELETE', this.href + cleanPath(path), this.token, headers, undefined, this.supportsRevs);\n  }\n};\n\n// Shared cleanPath used by Dropbox\nWireClient.cleanPath = cleanPath;\n\n// Shared isArrayBufferView used by WireClient and Dropbox\nWireClient.isArrayBufferView = isArrayBufferView;\n\nWireClient.readBinaryData = readBinaryData;\n\n// Shared request function used by WireClient, GoogleDrive and Dropbox.\n// TODO: Should we use fetch ?\nWireClient.request = function (method, url, options) {\n  return new Promise(function (resolve, reject) {\n\n    log('[WireClient]', method, url);\n\n    var timedOut = false;\n\n    var timer = setTimeout(function () {\n      timedOut = true;\n      reject('timeout');\n    }, WireClient.REQUEST_TIMEOUT);\n\n    var xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n\n    if (options.responseType) {\n      xhr.responseType = options.responseType;\n    }\n\n    if (options.headers) {\n      for (var key in options.headers) {\n        xhr.setRequestHeader(key, options.headers[key]);\n      }\n    }\n\n    xhr.onload = function () {\n      if (timedOut) {\n        return;\n      }\n      clearTimeout(timer);\n      resolve(xhr);\n    };\n\n    xhr.onerror = function (error) {\n      if (timedOut) {\n        return;\n      }\n      clearTimeout(timer);\n      reject(error);\n    };\n\n    var body = options.body;\n\n    if ((typeof body === 'undefined' ? 'undefined' : _typeof(body)) === 'object' && !isArrayBufferView(body) && body instanceof ArrayBuffer) {\n      body = new Uint8Array(body);\n    }\n    xhr.send(body);\n  });\n};\n\nObject.defineProperty(WireClient.prototype, 'storageType', {\n  get: function get() {\n    if (this.storageApi) {\n      var spec = this.storageApi.match(/draft-dejong-(remotestorage-\\d\\d)/);\n      return spec ? spec[1] : '2012.04';\n    }\n  }\n});\n\nWireClient._rs_init = function (remoteStorage) {\n  hasLocalStorage = util.localStorageAvailable();\n  remoteStorage.remote = new WireClient(remoteStorage);\n  this.online = true;\n};\n\nWireClient._rs_supported = function () {\n  return !!XMLHttpRequest;\n};\n\nWireClient._rs_cleanup = function (remoteStorage) {\n  if (hasLocalStorage) {\n    delete localStorage[SETTINGS_KEY];\n  }\n  remoteStorage.removeEventListener('error', onErrorCb);\n};\n\nmodule.exports = WireClient;\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(25).Buffer))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports){eval("'use strict';\n\n// var SETTINGS_KEY = \"remotestorage:access\";\n\n/**\n * Class: Access\n *\n * Keeps track of claimed access and scopes.\n */\nvar Access = function Access() {\n  this.reset();\n};\n\nAccess.prototype = {\n\n  /**\n   * Method: claim\n   *\n   * Claim access on a given scope with given mode.\n   *\n   * Parameters:\n   *   scope - An access scope, such as \"contacts\" or \"calendar\"\n   *   mode  - Access mode. Either \"r\" for read-only or \"rw\" for read/write\n   *\n   * Example:\n   *   (start code)\n   *   remoteStorage.access.claim('contacts', 'r');\n   *   remoteStorage.access.claim('pictures', 'rw');\n   *   (end code)\n   *\n   * Root access:\n   *   Claiming root access, meaning complete access to all files and folders\n   *   of a storage, can be done using an asterisk:\n   *\n   *   (start code)\n   *   remoteStorage.access.claim('*', 'rw');\n   *   (end code)\n   */\n  claim: function claim(scope, mode) {\n    if (typeof scope !== 'string' || scope.indexOf('/') !== -1 || scope.length === 0) {\n      throw new Error('Scope should be a non-empty string without forward slashes');\n    }\n    if (!mode.match(/^rw?$/)) {\n      throw new Error('Mode should be either \\'r\\' or \\'rw\\'');\n    }\n    this._adjustRootPaths(scope);\n    this.scopeModeMap[scope] = mode;\n  },\n\n  get: function get(scope) {\n    return this.scopeModeMap[scope];\n  },\n\n  remove: function remove(scope) {\n    var savedMap = {};\n    var name;\n    for (name in this.scopeModeMap) {\n      savedMap[name] = this.scopeModeMap[name];\n    }\n    this.reset();\n    delete savedMap[scope];\n    for (name in savedMap) {\n      this.set(name, savedMap[name]);\n    }\n  },\n\n  /**\n   * Verify permission for a given scope.\n   */\n  checkPermission: function checkPermission(scope, mode) {\n    var actualMode = this.get(scope);\n    return actualMode && (mode === 'r' || actualMode === 'rw');\n  },\n\n  /**\n   * Verify permission for a given path.\n   */\n  checkPathPermission: function checkPathPermission(path, mode) {\n    if (this.checkPermission('*', mode)) {\n      return true;\n    }\n    return !!this.checkPermission(this._getModuleName(path), mode);\n  },\n\n  reset: function reset() {\n    this.rootPaths = [];\n    this.scopeModeMap = {};\n  },\n\n  /**\n   * Return the module name for a given path.\n   */\n  _getModuleName: function _getModuleName(path) {\n    if (path[0] !== '/') {\n      throw new Error('Path should start with a slash');\n    }\n    var moduleMatch = path.replace(/^\\/public/, '').match(/^\\/([^\\/]*)\\//);\n    return moduleMatch ? moduleMatch[1] : '*';\n  },\n\n  _adjustRootPaths: function _adjustRootPaths(newScope) {\n    if ('*' in this.scopeModeMap || newScope === '*') {\n      this.rootPaths = ['/'];\n    } else if (!(newScope in this.scopeModeMap)) {\n      this.rootPaths.push('/' + newScope + '/');\n      this.rootPaths.push('/public/' + newScope + '/');\n    }\n  },\n\n  _scopeNameForParameter: function _scopeNameForParameter(scope) {\n    if (scope.name === '*' && this.storageType) {\n      if (this.storageType === '2012.04') {\n        return '';\n      } else if (this.storageType.match(/remotestorage-0[01]/)) {\n        return 'root';\n      }\n    }\n    return scope.name;\n  },\n\n  setStorageType: function setStorageType(type) {\n    this.storageType = type;\n  }\n};\n\n/**\n * Property: scopes\n *\n * Holds an array of claimed scopes in the form\n * > { name: \"<scope-name>\", mode: \"<mode>\" }\n */\nObject.defineProperty(Access.prototype, 'scopes', {\n  get: function get() {\n    return Object.keys(this.scopeModeMap).map(function (key) {\n      return { name: key, mode: this.scopeModeMap[key] };\n    }.bind(this));\n  }\n});\n\nObject.defineProperty(Access.prototype, 'scopeParameter', {\n  get: function get() {\n    return this.scopes.map(function (scope) {\n      return this._scopeNameForParameter(scope) + ':' + scope.mode;\n    }.bind(this)).join(' ');\n  }\n});\n\nAccess._rs_init = function () {};\n\nmodule.exports = Access;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYWNjZXNzLmpzPzcwN2MiXSwibmFtZXMiOlsiQWNjZXNzIiwicmVzZXQiLCJwcm90b3R5cGUiLCJjbGFpbSIsInNjb3BlIiwibW9kZSIsImluZGV4T2YiLCJsZW5ndGgiLCJFcnJvciIsIm1hdGNoIiwiX2FkanVzdFJvb3RQYXRocyIsInNjb3BlTW9kZU1hcCIsImdldCIsInJlbW92ZSIsInNhdmVkTWFwIiwibmFtZSIsInNldCIsImNoZWNrUGVybWlzc2lvbiIsImFjdHVhbE1vZGUiLCJjaGVja1BhdGhQZXJtaXNzaW9uIiwicGF0aCIsIl9nZXRNb2R1bGVOYW1lIiwicm9vdFBhdGhzIiwibW9kdWxlTWF0Y2giLCJyZXBsYWNlIiwibmV3U2NvcGUiLCJwdXNoIiwiX3Njb3BlTmFtZUZvclBhcmFtZXRlciIsInN0b3JhZ2VUeXBlIiwic2V0U3RvcmFnZVR5cGUiLCJ0eXBlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXlzIiwibWFwIiwia2V5IiwiYmluZCIsInNjb3BlcyIsImpvaW4iLCJfcnNfaW5pdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUU7O0FBRUE7Ozs7O0FBS0EsSUFBSUEsU0FBUyxTQUFUQSxNQUFTLEdBQVc7QUFDdEIsT0FBS0MsS0FBTDtBQUNELENBRkQ7O0FBSUFELE9BQU9FLFNBQVAsR0FBbUI7O0FBRWpCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQUMsU0FBTyxlQUFTQyxLQUFULEVBQWdCQyxJQUFoQixFQUFzQjtBQUMzQixRQUFJLE9BQU9ELEtBQVAsS0FBa0IsUUFBbEIsSUFBOEJBLE1BQU1FLE9BQU4sQ0FBYyxHQUFkLE1BQXVCLENBQUMsQ0FBdEQsSUFBMkRGLE1BQU1HLE1BQU4sS0FBaUIsQ0FBaEYsRUFBbUY7QUFDakYsWUFBTSxJQUFJQyxLQUFKLENBQVUsNERBQVYsQ0FBTjtBQUNEO0FBQ0QsUUFBSSxDQUFDSCxLQUFLSSxLQUFMLENBQVcsT0FBWCxD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ZUFBTyxNQUFQO0FBQ0Q7QUFDRjtBQUNELFdBQU9MLE1BQU1XLElBQWI7QUFDRCxHQXpHZ0I7O0FBMkdqQmMsa0JBQWdCLHdCQUFTQyxJQUFULEVBQWU7QUFDN0IsU0FBS0YsV0FBTCxHQUFtQkUsSUFBbkI7QUFDRDtBQTdHZ0IsQ0FBbkI7O0FBZ0hBOzs7Ozs7QUFNQUMsT0FBT0MsY0FBUCxDQUFzQmhDLE9BQU9FLFNBQTdCLEVBQXdDLFFBQXhDLEVBQWtEO0FBQ2hEVSxPQUFLLGVBQVc7QUFDZCxXQUFPbUIsT0FBT0UsSUFBUCxDQUFZLEtBQUt0QixZQUFqQixFQUErQnVCLEdBQS9CLENBQW1DLFVBQVNDLEdBQVQsRUFBYztBQUN0RCxhQUFPLEVBQUVwQixNQUFNb0IsR0FBUixFQUFhOUIsTUFBTSxLQUFLTSxZQUFMLENBQWtCd0IsR0FBbEIsQ0FBbkIsRUFBUDtBQUNELEtBRnlDLENBRXhDQyxJQUZ3QyxDQUVuQyxJQUZtQyxDQUFuQyxDQUFQO0FBR0Q7QUFMK0MsQ0FBbEQ7O0FBUUFMLE9BQU9DLGNBQVAsQ0FBc0JoQyxPQUFPRSxTQUE3QixFQUF3QyxnQkFBeEMsRUFBMEQ7QUFDeERVLE9BQUssZUFBVztBQUNkLFdBQU8sS0FBS3lCLE1BQUwsQ0FBWUgsR0FBWixDQUFnQixVQUFTOUIsS0FBVCxFQUFnQjtBQUNyQyxhQUFPLEtBQUt1QixzQkFBTCxDQUE0QnZCLEtBQTVCLElBQXFDLEdBQXJDLEdBQTJDQSxNQUFNQyxJQUF4RDtBQUNELEtBRnNCLENBRXJCK0IsSUFGcUIsQ0FFaEIsSUFGZ0IsQ0FBaEIsRUFFT0UsSUFGUCxDQUVZLEdBRlosQ0FBUDtBQUdEO0FBTHVELENBQTFEOztBQVNBdEMsT0FBT3VDLFFBQVAsR0FBa0IsWUFBVyxDQUFFLENBQS9COztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCekMsTUFBakIiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgIC8vIHZhciBTRVRUSU5HU19LRVkgPSBcInJlbW90ZXN0b3JhZ2U6YWNjZXNzXCI7XG5cbiAgLyoqXG4gICAqIENsYXNzOiBBY2Nlc3NcbiAgICpcbiAgICogS2VlcHMgdHJhY2sgb2YgY2xhaW1lZCBhY2Nlc3MgYW5kIHNjb3Blcy5cbiAgICovXG4gIHZhciBBY2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH07XG5cbiAgQWNjZXNzLnByb3RvdHlwZSA9IHtcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogY2xhaW1cbiAgICAgKlxuICAgICAqIENsYWltIGFjY2VzcyBvbiBhIGdpdmVuIHNjb3BlIHdpdGggZ2l2ZW4gbW9kZS5cbiAgICAgKlxuICAgICAqIFBhcmFtZXRlcnM6XG4gICAgICogICBzY29wZSAtIEFuIGFjY2VzcyBzY29wZSwgc3VjaCBhcyBcImNvbnRhY3RzXCIgb3IgXCJjYWxlbmRhclwiXG4gICAgICogICBtb2RlICAtIEFjY2VzcyBtb2RlLiBFaXRoZXIgXCJyXCIgZm9yIHJlYWQtb25seSBvciBcInJ3XCIgZm9yIHJlYWQvd3JpdGVcbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogICAoc3RhcnQgY29kZSlcbiAgICAgKiAgIHJlbW90ZVN0b3JhZ2UuYWNjZXNzLmNsYWltKCdjb250YWN0cycsICdyJyk7XG4gICAgICogICByZW1vdGVTdG9yYWdlLmFjY2Vzcy5jbGFpbSgncGljdHVyZXMnLCAncncnKTtcbiAgICAgKiAgIChlbmQgY29kZSlcbiAgICAgKlxuICAgICAqIFJvb3QgYWNjZXNzOlxuICAgICAqICAgQ2xhaW1pbmcgcm9vdCBhY2Nlc3MsIG1lYW5pbmcgY29tcGxldGUgYWNjZXNzIHRvIGFsbCBmaWxlcyBhbmQgZm9sZGVyc1xuICAgICAqICAgb2YgYSBzdG9yYWdlLCBjYW4gYmUgZG9uZSB1c2luZyBhbiBhc3RlcmlzazpcbiAgICAgKlxuICAgICAqICAgKHN0YXJ0IGNvZGUpXG4gICAgICogICByZW1vdGVTdG9yYWdlLmFjY2Vzcy5jbGFpbSgnKicsICdydycpO1xuICAgICAqICAgKGVuZCBjb2RlKVxuICAgICAqL1xuICAgIGNsYWltOiBmdW5jdGlvbihzY29wZSwgbW9kZSkge1xuICAgICAgaWYgKHR5cGVvZihzY29wZSkgIT09ICdzdHJpbmcnIHx8IHNjb3BlLmluZGV4T2YoJy8nKSAhPT0gLTEgfHwgc2NvcGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2NvcGUgc2hvdWxkIGJlIGEgbm9uLWVtcHR5IHN0cmluZyB3aXRob3V0IGZvcndhcmQgc2xhc2hlcycpO1xuICAgICAgfVxuICAgICAgaWYgKCFtb2RlLm1hdGNoKC9ecnc/JC8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTW9kZSBzaG91bGQgYmUgZWl0aGVyIFxcJ3JcXCcgb3IgXFwncndcXCcnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FkanVzdFJvb3RQYXRocyhzY29wZSk7XG4gICAgICB0aGlzLnNjb3BlTW9kZU1hcFtzY29wZV0gPSBtb2RlO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY29wZU1vZGVNYXBbc2NvcGVdO1xuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICB2YXIgc2F2ZWRNYXAgPSB7fTtcbiAgICAgIHZhciBuYW1lO1xuICAgICAgZm9yIChuYW1lIGluIHRoaXMuc2NvcGVNb2RlTWFwKSB7XG4gICAgICAgIHNhdmVkTWFwW25hbWVdID0gdGhpcy5zY29wZU1vZGVNYXBbbmFtZV07XG4gICAgICB9XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICBkZWxldGUgc2F2ZWRNYXBbc2NvcGVdO1xuICAgICAgZm9yIChuYW1lIGluIHNhdmVkTWFwKSB7XG4gICAgICAgIHRoaXMuc2V0KG5hbWUsIHNhdmVkTWFwW25hbWVdKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVmVyaWZ5IHBlcm1pc3Npb24gZm9yIGEgZ2l2ZW4gc2NvcGUuXG4gICAgICovXG4gICAgY2hlY2tQZXJtaXNzaW9uOiBmdW5jdGlvbihzY29wZSwgbW9kZSkge1xuICAgICAgdmFyIGFjdHVhbE1vZGUgPSB0aGlzLmdldChzY29wZSk7XG4gICAgICByZXR1cm4gYWN0dWFsTW9kZSAmJiAobW9kZSA9PT0gJ3InIHx8IGFjdHVhbE1vZGUgPT09ICdydycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBWZXJpZnkgcGVybWlzc2lvbiBmb3IgYSBnaXZlbiBwYXRoLlxuICAgICAqL1xuICAgIGNoZWNrUGF0aFBlcm1pc3Npb246IGZ1bmN0aW9uKHBhdGgsIG1vZGUpIHtcbiAgICAgIGlmICh0aGlzLmNoZWNrUGVybWlzc2lvbignKicsIG1vZGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICEhdGhpcy5jaGVja1Blcm1pc3Npb24odGhpcy5fZ2V0TW9kdWxlTmFtZShwYXRoKSwgbW9kZSk7XG4gICAgfSxcblxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucm9vdFBhdGhzID0gW107XG4gICAgICB0aGlzLnNjb3BlTW9kZU1hcCA9IHt9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIG1vZHVsZSBuYW1lIGZvciBhIGdpdmVuIHBhdGguXG4gICAgICovXG4gICAgX2dldE1vZHVsZU5hbWU6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIGlmIChwYXRoWzBdICE9PSAnLycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXRoIHNob3VsZCBzdGFydCB3aXRoIGEgc2xhc2gnKTtcbiAgICAgIH1cbiAgICAgIHZhciBtb2R1bGVNYXRjaCA9IHBhdGgucmVwbGFjZSgvXlxcL3B1YmxpYy8sICcnKS5tYXRjaCgvXlxcLyhbXlxcL10qKVxcLy8pO1xuICAgICAgcmV0dXJuIG1vZHVsZU1hdGNoID8gbW9kdWxlTWF0Y2hbMV0gOiAnKic7XG4gICAgfSxcblxuICAgIF9hZGp1c3RSb290UGF0aHM6IGZ1bmN0aW9uKG5ld1Njb3BlKSB7XG4gICAgICBpZiAoJyonIGluIHRoaXMuc2NvcGVNb2RlTWFwIHx8IG5ld1Njb3BlID09PSAnKicpIHtcbiAgICAgICAgdGhpcy5yb290UGF0aHMgPSBbJy8nXTtcbiAgICAgIH0gZWxzZSBpZiAoISAobmV3U2NvcGUgaW4gdGhpcy5zY29wZU1vZGVNYXApKSB7XG4gICAgICAgIHRoaXMucm9vdFBhdGhzLnB1c2goJy8nICsgbmV3U2NvcGUgKyAnLycpO1xuICAgICAgICB0aGlzLnJvb3RQYXRocy5wdXNoKCcvcHVibGljLycgKyBuZXdTY29wZSArICcvJyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9zY29wZU5hbWVGb3JQYXJhbWV0ZXI6IGZ1bmN0aW9uKHNjb3BlKSB7XG4gICAgICBpZiAoc2NvcGUubmFtZSA9PT0gJyonICYmIHRoaXMuc3RvcmFnZVR5cGUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RvcmFnZVR5cGUgPT09ICcyMDEyLjA0Jykge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0b3JhZ2VUeXBlLm1hdGNoKC9yZW1vdGVzdG9yYWdlLTBbMDFdLykpIHtcbiAgICAgICAgICByZXR1cm4gJ3Jvb3QnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2NvcGUubmFtZTtcbiAgICB9LFxuXG4gICAgc2V0U3RvcmFnZVR5cGU6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIHRoaXMuc3RvcmFnZVR5cGUgPSB0eXBlO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUHJvcGVydHk6IHNjb3Blc1xuICAgKlxuICAgKiBIb2xkcyBhbiBhcnJheSBvZiBjbGFpbWVkIHNjb3BlcyBpbiB0aGUgZm9ybVxuICAgKiA+IHsgbmFtZTogXCI8c2NvcGUtbmFtZT5cIiwgbW9kZTogXCI8bW9kZT5cIiB9XG4gICAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWNjZXNzLnByb3RvdHlwZSwgJ3Njb3BlcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc2NvcGVNb2RlTWFwKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiB7IG5hbWU6IGtleSwgbW9kZTogdGhpcy5zY29wZU1vZGVNYXBba2V5XSB9O1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBY2Nlc3MucHJvdG90eXBlLCAnc2NvcGVQYXJhbWV0ZXInLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnNjb3Blcy5tYXAoZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlTmFtZUZvclBhcmFtZXRlcihzY29wZSkgKyAnOicgKyBzY29wZS5tb2RlO1xuICAgICAgfS5iaW5kKHRoaXMpKS5qb2luKCcgJyk7XG4gICAgfVxuICB9KTtcblxuXG4gIEFjY2Vzcy5fcnNfaW5pdCA9IGZ1bmN0aW9uKCkge307XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBBY2Nlc3M7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYWNjZXNzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("'use strict';\n\n/**\n * Class: Caching\n *\n * Holds/manages caching configuration.\n *\n * Caching strategies:\n *\n *   For each subtree, you can set the caching strategy to 'ALL',\n *   'SEEN' (default), and 'FLUSH'.\n *\n *   - 'ALL' means that once all outgoing changes have been pushed, sync\n *         will start retrieving nodes to cache pro-actively. If a local\n *         copy exists of everything, it will check on each sync whether\n *         the ETag of the root folder changed, and retrieve remote changes\n *         if they exist.\n *   - 'SEEN' does this only for documents and folders that have been either\n *         read from or written to at least once since connecting to the current\n *         remote backend, plus their parent/ancestor folders up to the root\n *         (to make tree-based sync possible).\n *   - 'FLUSH' will only cache outgoing changes, and forget them as soon as\n *         they have been saved to remote successfully.\n *\n **/\n\nvar util = __webpack_require__(2);\nvar log = __webpack_require__(1);\n\nvar containingFolder = util.containingFolder;\n\nvar Caching = function Caching() {\n  this.reset();\n};\n\nCaching.prototype = {\n  pendingActivations: [],\n\n  /**\n   * Method: set\n   *\n   * Configure caching for a given path explicitly.\n   *\n   * Not needed when using <enable>/<disable>.\n   *\n   * Parameters:\n   *   path     - Path to cache\n   *   strategy - Caching strategy. One of 'ALL', 'SEEN', or 'FLUSH'.\n   *\n   * Example:\n   *   (start code)\n   *   remoteStorage.caching.set('/bookmarks/archive')\n   */\n  set: function set(path, strategy) {\n    if (typeof path !== 'string') {\n      throw new Error('path should be a string');\n    }\n    if (!util.isFolder(path)) {\n      throw new Error('path should be a folder');\n    }\n    if (this._remoteStorage && this._remoteStorage.access && !this._remoteStorage.access.checkPathPermission(path, 'r')) {\n      throw new Error('No access to path \"' + path + '\". You have to claim access to it first.');\n    }\n    if (!strategy.match(/^(FLUSH|SEEN|ALL)$/)) {\n      throw new Error(\"strategy should be 'FLUSH', 'SEEN', or 'ALL'\");\n    }\n\n    this._rootPaths[path] = strategy;\n\n    if (strategy === 'ALL') {\n      if (this.activateHandler) {\n        this.activateHandler(path);\n      } else {\n        this.pendingActivations.push(path);\n      }\n    }\n  },\n\n  /**\n   * Method: enable\n   *\n   * Enable caching for a given path.\n   *\n   * Uses caching strategy 'ALL'.\n   *\n   * Parameters:\n   *   path - Path to enable caching for\n   */\n  enable: function enable(path) {\n    this.set(path, 'ALL');\n  },\n\n  /**\n   * Method: disable\n   *\n   * Disable caching for a given path.\n   *\n   * Uses caching strategy 'FLUSH' (meaning items are only cached until\n   * successfully pushed to the remote).\n   *\n   * Parameters:\n   *   path - Path to disable caching for\n   */\n  disable: function disable(path) {\n    this.set(path, 'FLUSH');\n  },\n\n  /**\n   * Method: onActivate\n   *\n   * Set a callback for when caching is activated for a path.\n   *\n   * Parameters:\n   *   callback - Callback function\n   */\n  onActivate: function onActivate(cb) {\n    var i;\n    log('[Caching] Setting activate handler', cb, this.pendingActivations);\n    this.activateHandler = cb;\n    for (i = 0; i < this.pendingActivations.length; i++) {\n      cb(this.pendingActivations[i]);\n    }\n    delete this.pendingActivations;\n  },\n\n  /**\n   * Method: checkPath\n   *\n   * Retrieve caching setting for a given path, or its next parent\n   * with a caching strategy set.\n   *\n   * Parameters:\n   *   path - Path to retrieve setting for\n   **/\n  checkPath: function checkPath(path) {\n    if (this._rootPaths[path] !== undefined) {\n      return this._rootPaths[path];\n    } else if (path === '/') {\n      return 'SEEN';\n    } else {\n      return this.checkPath(containingFolder(path));\n    }\n  },\n\n  /**\n   * Method: reset\n   *\n   * Reset the state of caching by deleting all caching information.\n   **/\n  reset: function reset() {\n    this._rootPaths = {};\n    this._remoteStorage = null;\n  }\n};\n\nCaching._rs_init = function (remoteStorage) {\n  this._remoteStorage = remoteStorage;\n};\n\nmodule.exports = Caching;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){eval('\'use strict\';\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\nvar log = __webpack_require__(1);\nvar util = __webpack_require__(2);\nvar WebFinger = __webpack_require__(32);\n\n// feature detection flags\nvar haveXMLHttpRequest, hasLocalStorage;\n\n// used to store settings in localStorage\nvar SETTINGS_KEY = \'remotestorage:discover\';\n\n// cache loaded from localStorage\nvar cachedInfo = {};\n\n/**\n * Class: Discover\n *\n * This function deals with the Webfinger lookup, discovering a connecting\n * user\'s storage details.\n *\n * The discovery timeout can be configured via\n * `config.discoveryTimeout` (in ms).\n *\n * Arguments:\n *\n *   userAddress - user@host\n *\n * Returns:\n *\n * A promise for an object with the following properties.\n *\n *   href - Storage base URL,\n *   storageType - Storage type,\n *   authUrl - OAuth URL,\n *   properties - Webfinger link properties\n **/\n\nvar Discover = function Discover(userAddress) {\n  return new Promise(function (resolve, reject) {\n\n    if (userAddress in cachedInfo) {\n      return resolve(cachedInfo[userAddress]);\n    }\n\n    var webFinger = new WebFinger({\n      tls_only: false,\n      uri_fallback: true,\n      request_timeout: 5000\n    });\n\n    return webFinger.lookup(userAddress, function (err, response) {\n      if (err) {\n        return reject(err);\n      } else if (_typeof(response.idx.links.remotestorage) !== \'object\' || typeof response.idx.links.remotestorage.length !== \'number\' || response.idx.links.remotestorage.length <= 0) {\n        log("[Discover] WebFinger record for " + userAddress + " does not have remotestorage defined in the links section ", JSON.stringify(response.json));\n        return reject("WebFinger record for " + userAddress + " does not have remotestorage defined in the links section.");\n      }\n\n      var rs = response.idx.links.remotestorage[0];\n      var authURL = rs.properties[\'http://tools.ietf.org/html/rfc6749#section-4.2\'] || rs.properties[\'auth-endpoint\'];\n      var storageType = rs.properties[\'http://remotestorage.io/spec/version\'] || rs.type;\n\n      // cache fetched data\n      cachedInfo[userAddress] = { href: rs.href, storageType: storageType, authURL: authURL, properties: rs.properties };\n\n      if (hasLocalStorage) {\n        localStorage[SETTINGS_KEY] = JSON.stringify({ cache: cachedInfo });\n      }\n\n      return resolve(cachedInfo[userAddress]);\n    });\n  });\n};\n\nDiscover.DiscoveryError = function (message) {\n  Error.apply(this, arguments);\n  this.message = message;\n};\n\nDiscover.DiscoveryError.prototype = Object.create(Error.prototype);\n\nDiscover._rs_init = function (remoteStorage) {\n  hasLocalStorage = util.localStorageAvailable();\n  if (hasLocalStorage) {\n    var settings;\n    try {\n      settings = JSON.parse(localStorage[SETTINGS_KEY]);\n    } catch (e) {}\n    if (settings) {\n      cachedInfo = settings.cache;\n    }\n  }\n};\n\nDiscover._rs_supported = function () {\n  haveXMLHttpRequest = !!util.globalContext.XMLHttpRequest;\n  return haveXMLHttpRequest;\n};\n\nDiscover._rs_cleanup = function () {\n  if (hasLocalStorage) {\n    delete localStorage[SETTINGS_KEY];\n  }\n};\n\nmodule.exports = Discover;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar Authorize = __webpack_require__(4);\nvar BaseClient = __webpack_require__(6);\nvar WireClient = __webpack_require__(9);\nvar util = __webpack_require__(2);\nvar eventHandling = __webpack_require__(3);\nvar Sync = __webpack_require__(8);\n\n/**\n * File: Dropbox\n *\n * WORK IN PROGRESS, NOT RECOMMENDED FOR PRODUCTION USE\n *\n * Dropbox backend for RemoteStorage.js\n * This file exposes a get/put/delete interface which is compatible with\n * <WireClient>.\n *\n * When remoteStorage.backend is set to 'dropbox', this backend will\n * initialize and replace remoteStorage.remote with remoteStorage.dropbox.\n *\n * In order to ensure compatibility with the public folder, <BaseClient.getItemURL>\n * gets hijacked to return the Dropbox public share URL.\n *\n * To use this backend, you need to specify the Dropbox app key like so:\n *\n * (start code)\n *\n * remoteStorage.setApiKeys('dropbox', {\n *   appKey: 'your-app-key'\n * });\n *\n * (end code)\n *\n * An app key can be obtained by registering your app at https://www.dropbox.com/developers/apps\n *\n * Known issues:\n *\n *   - Storing files larger than 150MB is not yet supported\n *   - Listing and deleting folders with more than 10'000 files will cause problems\n *   - Content-Type is not fully supported due to limitations of the Dropbox API\n *   - Dropbox preserves cases but is not case-sensitive\n *   - getItemURL is asynchronous which means getIetmURL returns useful values\n *     after the syncCycle\n */\n\nvar hasLocalStorage;\nvar AUTH_URL = 'https://www.dropbox.com/1/oauth2/authorize';\nvar SETTINGS_KEY = 'remotestorage:dropbox';\nvar PATH_PREFIX = '/remotestorage';\n\nvar isFolder = util.isFolder;\n\n/**\n * Function: getDropboxPath(path)\n *\n * Map a local path to a path in DropBox.\n */\nvar getDropboxPath = function getDropboxPath(path) {\n  return WireClient.cleanPath(PATH_PREFIX + '/' + path);\n};\n\nvar encodeQuery = function encodeQuery(obj) {\n  var pairs = [];\n\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.join('&');\n};\n\n/**\n * class: LowerCaseCache\n *\n * A cache which automatically converts all keys to lower case and can\n * propagate changes up to parent folders.\n *\n * By default the set and delete methods are aliased to justSet and justDelete.\n *\n * Parameters:\n *\n *   defaultValue - the value that is returned for all keys that don't exist\n *                  in the cache\n */\nfunction LowerCaseCache(defaultValue) {\n  this.defaultValue = defaultValue;\n  this._storage = {};\n  this.set = this.justSet;\n  this.delete = this.justDelete;\n}\n\nLowerCaseCache.prototype = {\n  /**\n   * Method: get\n   *\n   * Get a value from the cache or defaultValue, if the key is not in the\n   * cache.\n   */\n  get: function get(key) {\n    key = key.toLowerCase();\n    var stored = this._storage[key];\n    if (typeof stored === 'undefined') {\n      stored = this.defaultValue;\n      this._storage[key] = stored;\n    }\n    return stored;\n  },\n\n  /**\n   * Method: propagateSet\n   *\n   * Set a value and also update the parent folders with that value.\n   */\n  propagateSet: function propagateSet(key, value) {\n    key = key.toLowerCase();\n    if (this._storage[key] === value) {\n      return value;\n    }\n    this._propagate(key, value);\n    this._storage[key] = value;\n    return value;\n  },\n\n  /**\n   * Method: propagateDelete\n   *\n   * Delete a value and propagate the changes to the parent folders.\n   */\n  propagateDelete: function propagateDelete(key) {\n    key = key.toLowerCase();\n    this._propagate(key, this._storage[key]);\n    return delete this._storage[key];\n  },\n\n  _activatePropagation: function _activatePropagation() {\n    this.set = this.propagateSet;\n    this.delete = this.propagateDelete;\n    return true;\n  },\n\n  /**\n   * Method: justSet\n   *\n   * Set a value without propagating.\n   */\n  justSet: function justSet(key, value) {\n    key = key.toLowerCase();\n    this._storage[key] = value;\n    return value;\n  },\n\n  /**\n   * Method: justDelete\n   *\n   * Delete a value without propagating.\n   */\n  justDelete: function justDelete(key, value) {\n    key = key.toLowerCase();\n    return delete this._storage[key];\n  },\n\n  _propagate: function _propagate(key, rev) {\n    var folders = key.split('/').slice(0, -1);\n    var path = '';\n\n    for (var i = 0, len = folders.length; i < len; i++) {\n      path += folders[i] + '/';\n      if (!rev) {\n        rev = this._storage[path] + 1;\n      }\n      this._storage[path] = rev;\n    }\n  }\n};\n\nvar onErrorCb;\n\n/**\n * Class: Dropbox\n */\nvar Dropbox = function Dropbox(rs) {\n\n  this.rs = rs;\n  this.connected = false;\n  this.rs = rs;\n  var self = this;\n\n  onErrorCb = function onErrorCb(error) {\n    if (error instanceof Authorize.Unauthorized) {\n      // Delete all the settings - see the documentation of wireclient.configure\n      self.configure({\n        userAddress: null,\n        href: null,\n        storageApi: null,\n        token: null,\n        options: null\n      });\n    }\n  };\n\n  eventHandling(this, 'change', 'connected', 'wire-busy', 'wire-done', 'not-connected');\n  rs.on('error', onErrorCb);\n\n  this.clientId = rs.apiKeys.dropbox.appKey;\n  this._revCache = new LowerCaseCache('rev');\n  this._itemRefs = {};\n  this._metadataCache = {};\n\n  hasLocalStorage = util.localStorageAvailable();\n\n  if (hasLocalStorage) {\n    var settings;\n    try {\n      settings = JSON.parse(localStorage.getItem(SETTINGS_KEY));\n    } catch (e) {}\n    if (settings) {\n      this.configure(settings);\n    }\n    try {\n      this._itemRefs = JSON.parse(localStorage.getItem(SETTINGS_KEY + ':shares'));\n    } catch (e) {}\n  }\n  if (this.connected) {\n    setTimeout(this._emit.bind(this), 0, 'connected');\n  }\n};\n\nDropbox.prototype = {\n  online: true,\n\n  /**\n   * Method: connect\n   *\n   * Set the backed to 'dropbox' and start the authentication flow in order\n   * to obtain an API token from Dropbox.\n   */\n  connect: function connect() {\n    // TODO handling when token is already present\n    this.rs.setBackend('dropbox');\n    if (this.token) {\n      hookIt(this.rs);\n    } else {\n      Authorize(this.rs, AUTH_URL, '', String(Authorize.getLocation()), this.clientId);\n    }\n  },\n\n  /**\n   * Method : configure(settings)\n   * Accepts its parameters according to the <WireClient>.\n   * Sets the connected flag\n   **/\n  configure: function configure(settings) {\n    // We only update this.userAddress if settings.userAddress is set to a string or to null:\n    if (typeof settings.userAddress !== 'undefined') {\n      this.userAddress = settings.userAddress;\n    }\n    // Same for this.token. If only one of these two is set, we leave the other one at its existing value:\n    if (typeof settings.token !== 'undefined') {\n      this.token = settings.token;\n    }\n\n    var writeSettingsToCache = function writeSettingsToCache() {\n      if (hasLocalStorage) {\n        localStorage.setItem(SETTINGS_KEY, JSON.stringify({\n          userAddress: this.userAddress,\n          token: this.token\n        }));\n      }\n    };\n\n    var handleError = function handleError() {\n      this.connected = false;\n      if (hasLocalStorage) {\n        localStorage.removeItem(SETTINGS_KEY);\n      }\n    };\n\n    if (this.token) {\n      this.connected = true;\n      if (this.userAddress) {\n        this._emit('connected');\n        writeSettingsToCache.apply(this);\n      } else {\n        this.info().then(function (info) {\n          this.userAddress = info.email;\n          this._emit('connected');\n          writeSettingsToCache.apply(this);\n        }.bind(this)).catch(function () {\n          handleError.apply(this);\n          this.rs._emit('error', new Error('Could not fetch user info.'));\n        }.bind(this));\n      }\n    } else {\n      handleError.apply(this);\n    }\n  },\n\n  /**\n   * Method: stopWaitingForToken\n   *\n   * Stop waiting for the token and emit not-connected\n   */\n  stopWaitingForToken: function stopWaitingForToken() {\n    if (!this.connected) {\n      this._emit('not-connected');\n    }\n  },\n\n  /**\n   * Method: _getFolder\n   *\n   * Get all items in a folder.\n   *\n   * Parameters:\n   *\n   *   path - path of the folder to get, with leading slash\n   *   options - not used\n   *\n   * Returns:\n   *\n   *  statusCode - HTTP status code\n   *  body - array of the items found\n   *  contentType - 'application/json; charset=UTF-8'\n   *  revision - revision of the folder\n   */\n  _getFolder: function _getFolder(path, options) {\n    // FIXME simplify promise handling\n    var url = 'https://api.dropbox.com/1/metadata/auto' + getDropboxPath(path);\n    var revCache = this._revCache;\n    var self = this;\n\n    return this._request('GET', url, {}).then(function (resp) {\n      var status = resp.status;\n      if (status === 304) {\n        return Promise.resolve({ statusCode: status });\n      }\n      var listing, body, mime, rev;\n      try {\n        body = JSON.parse(resp.responseText);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n      rev = self._revCache.get(path);\n      mime = 'application/json; charset=UTF-8';\n      if (body.contents) {\n        listing = body.contents.reduce(function (m, item) {\n          var itemName = item.path.split('/').slice(-1)[0] + (item.is_dir ? '/' : '');\n          if (item.is_dir) {\n            m[itemName] = { ETag: revCache.get(path + itemName) };\n          } else {\n            m[itemName] = { ETag: item.rev };\n          }\n          return m;\n        }, {});\n      }\n      return Promise.resolve({ statusCode: status, body: listing, contentType: mime, revision: rev });\n    });\n  },\n\n  /**\n   * Method: get\n   *\n   * Compatible with <WireClient.get>\n   *\n   * Checks for the path in _revCache and decides based on that if file has\n   * changed. Calls _getFolder is the path points to a folder.\n   *\n   * Calls <Dropbox.share> afterwards to fill _itemRefs.\n   */\n  get: function get(path, options) {\n    if (!this.connected) {\n      return Promise.reject(\"not connected (path: \" + path + \")\");\n    }\n    var url = 'https://api-content.dropbox.com/1/files/auto' + getDropboxPath(path);\n    var self = this;\n\n    var savedRev = this._revCache.get(path);\n    if (savedRev === null) {\n      // file was deleted server side\n      return Promise.resolve({ statusCode: 404 });\n    }\n    if (options && options.ifNoneMatch && savedRev && savedRev === options.ifNoneMatch) {\n      // nothing changed.\n      return Promise.resolve({ statusCode: 304 });\n    }\n\n    //use _getFolder for folders\n    if (path.substr(-1) === '/') {\n      return this._getFolder(path, options);\n    }\n\n    return this._request('GET', url, {}).then(function (resp) {\n      var status = resp.status;\n      var meta, body, mime, rev;\n      if (status !== 200) {\n        return Promise.resolve({ statusCode: status });\n      }\n\n      body = resp.responseText;\n      try {\n        meta = JSON.parse(resp.getResponseHeader('x-dropbox-metadata'));\n      } catch (e) {\n        return Promise.reject(e);\n      }\n\n      mime = meta.mime_type; //resp.getResponseHeader('Content-Type');\n      rev = meta.rev;\n      self._revCache.set(path, rev);\n      self._shareIfNeeded(path); // The shared link expires every 4 hours\n\n      // handling binary\n      if (!resp.getResponseHeader('Content-Type') || resp.getResponseHeader('Content-Type').match(/charset=binary/)) {\n\n        // TOFIX: would be better to make readBinaryData return a Promise - les\n        return new Promise(function (resolve, reject) {\n          WireClient.readBinaryData(resp.response, mime, function (result) {\n            resolve({\n              statusCode: status,\n              body: result,\n              contentType: mime,\n              revision: rev\n            });\n          });\n        });\n      }\n\n      // handling json (always try)\n      // comment it out as this is always true (false && false || true)\n      // and jshint is complaining\n      // if (mime && mime.search('application/json') >= 0 || true) {\n      try {\n        body = JSON.parse(body);\n        mime = 'application/json; charset=UTF-8';\n      } catch (e) {}\n      //Failed parsing Json, assume it is something else then\n\n      // }\n\n      return Promise.resolve({ statusCode: status, body: body, contentType: mime, revision: rev });\n    });\n  },\n\n  /**\n   * Method: put\n   *\n   * Compatible with <WireClient>\n   *\n   * Checks for the path in _revCache and decides based on that if file has\n   * changed.\n   *\n   * Calls <Dropbox.share> afterwards to fill _itemRefs.\n   */\n  put: function put(path, body, contentType, options) {\n    var self = this;\n\n    if (!this.connected) {\n      throw new Error(\"not connected (path: \" + path + \")\");\n    }\n\n    //check if file has changed and return 412\n    var savedRev = this._revCache.get(path);\n    if (options && options.ifMatch && savedRev && savedRev !== options.ifMatch) {\n      return Promise.resolve({ statusCode: 412, revision: savedRev });\n    }\n    if (options && options.ifNoneMatch === '*' && savedRev && savedRev !== 'rev') {\n      return Promise.resolve({ statusCode: 412, revision: savedRev });\n    }\n\n    if (!contentType.match(/charset=/) && (body instanceof ArrayBuffer || WireClient.isArrayBufferView(body))) {\n      contentType += '; charset=binary';\n    }\n\n    if (body.length > 150 * 1024 * 1024) {\n      //https://www.dropbox.com/developers/core/docs#chunked-upload\n      return Promise.reject(new Error(\"Cannot upload file larger than 150MB\"));\n    }\n\n    var result;\n    var needsMetadata = options && (options.ifMatch || options.ifNoneMatch === '*');\n    var uploadParams = {\n      body: body,\n      contentType: contentType,\n      path: path\n    };\n\n    if (needsMetadata) {\n      result = this._getMetadata(path).then(function (metadata) {\n        if (options && options.ifNoneMatch === '*' && metadata) {\n          // if !!metadata === true, the file exists\n          return Promise.resolve({\n            statusCode: 412,\n            revision: metadata.rev\n          });\n        }\n\n        if (options && options.ifMatch && metadata && metadata.rev !== options.ifMatch) {\n          return Promise.resolve({\n            statusCode: 412,\n            revision: metadata.rev\n          });\n        }\n\n        return self._uploadSimple(uploadParams);\n      });\n    } else {\n      result = self._uploadSimple(uploadParams);\n    }\n\n    return result.then(function (ret) {\n      self._shareIfNeeded(path);\n      return ret;\n    });\n  },\n\n  /**\n   * Method: delete\n   *\n   * Compatible with <WireClient.delete>\n   *\n   * Checks for the path in _revCache and decides based on that if file has\n   * changed.\n   *\n   * Calls <Dropbox.share> afterwards to fill _itemRefs.\n   */\n  'delete': function _delete(path, options) {\n    var self = this;\n\n    if (!this.connected) {\n      throw new Error(\"not connected (path: \" + path + \")\");\n    }\n\n    //check if file has changed and return 412\n    var savedRev = this._revCache.get(path);\n    if (options && options.ifMatch && savedRev && options.ifMatch !== savedRev) {\n      return Promise.resolve({ statusCode: 412, revision: savedRev });\n    }\n\n    if (options && options.ifMatch) {\n      return this._getMetadata(path).then(function (metadata) {\n        if (options && options.ifMatch && metadata && metadata.rev !== options.ifMatch) {\n          return Promise.resolve({\n            statusCode: 412,\n            revision: metadata.rev\n          });\n        }\n\n        return self._deleteSimple(path);\n      });\n    }\n\n    return self._deleteSimple(path);\n  },\n\n  /**\n   * Method: _shareIfNeeded\n   *\n   * Calls share, if the provided path resides in a public folder.\n   */\n  _shareIfNeeded: function _shareIfNeeded(path) {\n    if (path.match(/^\\/public\\/.*[^\\/]$/) && this._itemRefs[path] === undefined) {\n      this.share(path);\n    }\n  },\n\n  /**\n   * Method: share\n   *\n   * Gets a publicly-accessible URL for the path from Dropbox and stores it\n   * in _itemRefs.\n   *\n   * Returns:\n   *\n   *   A promise for the URL\n   */\n  share: function share(path) {\n    var self = this;\n    var url = 'https://api.dropbox.com/1/media/auto' + getDropboxPath(path);\n\n    return this._request('POST', url, {}).then(function (response) {\n      if (response.status !== 200) {\n        return Promise.reject(new Error('Invalid Dropbox API response status when sharing \"' + path + '\":' + response.status));\n      }\n\n      try {\n        response = JSON.parse(response.responseText);\n      } catch (e) {\n        return Promise.reject(new Error('Invalid Dropbox API response when sharing \"' + path + '\": ' + response.responseText));\n      }\n\n      self._itemRefs[path] = response.url;\n\n      if (hasLocalStorage) {\n        localStorage.setItem(SETTINGS_KEY + ':shares', JSON.stringify(self._itemRefs));\n      }\n\n      return Promise.resolve(url);\n    }, function (error) {\n      err.message = 'Sharing dropbox file or folder (\"' + path + '\") failed.' + err.message;\n      return Promise.reject(error);\n    });\n  },\n\n  /**\n   * Method: info\n   *\n   * Fetches the user's info from dropbox and returns a promise for it.\n   *\n   * Returns:\n   *\n   *   A promise to the user's info\n   */\n  info: function info() {\n    var url = 'https://api.dropbox.com/1/account/info';\n    // requesting user info(mainly for userAdress)\n    return this._request('GET', url, {}).then(function (resp) {\n      try {\n        var info = JSON.parse(resp.responseText);\n        return Promise.resolve(info);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    });\n  },\n\n  /**\n   * Method: _request\n   *\n   * Make a HTTP request.\n   *\n   * Options:\n   *\n   *   headers - an object containing the request headers\n   *\n   * Parameters:\n   *\n   *   method - the method to use\n   *   url - the URL to make the request to\n   *   options - see above\n   */\n  _request: function _request(method, url, options) {\n    var self = this;\n\n    if (!options.headers) {\n      options.headers = {};\n    }\n    options.headers['Authorization'] = 'Bearer ' + this.token;\n\n    this._emit('wire-busy', {\n      method: method,\n      isFolder: isFolder(url)\n    });\n\n    return WireClient.request.call(this, method, url, options).then(function (xhr) {\n      // 503 means retry this later\n      if (xhr && xhr.status === 503) {\n        if (self.online) {\n          self.online = false;\n          self.rs._emit('network-offline');\n        }\n        return setTimeout(self._request(method, url, options), 3210);\n      } else {\n        if (!self.online) {\n          self.online = true;\n          self.rs._emit('network-online');\n        }\n        self._emit('wire-done', {\n          method: method,\n          isFolder: isFolder(url),\n          success: true\n        });\n\n        return Promise.resolve(xhr);\n      }\n    }, function (error) {\n      if (self.online) {\n        self.online = false;\n        self.rs._emit('network-offline');\n      }\n      self._emit('wire-done', {\n        method: method,\n        isFolder: isFolder(url),\n        success: false\n      });\n\n      return Promise.reject(error);\n    });\n  },\n\n  /**\n   * Method: fetchDelta\n   *\n   * Fetches the revision of all the files from dropbox API and puts them\n   * into _revCache. These values can then be used to determine if something\n   * has changed.\n   */\n  fetchDelta: function fetchDelta() {\n    // TODO: Handle `has_more`\n\n    var args = Array.prototype.slice.call(arguments);\n    var self = this;\n    var body = { path_prefix: PATH_PREFIX };\n\n    if (self._deltaCursor) {\n      body.cursor = self._deltaCursor;\n    }\n\n    return self._request('POST', 'https://api.dropbox.com/1/delta', {\n      body: encodeQuery(body),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    }).then(function (response) {\n      // break if status != 200\n      if (response.status !== 200) {\n        if (response.status === 400) {\n          self.rs._emit('error', new Authorize.Unauthorized());\n          return Promise.resolve(args);\n        } else {\n          return Promise.reject(\"dropbox.fetchDelta returned \" + response.status + response.responseText);\n        }\n      }\n\n      var delta;\n      try {\n        delta = JSON.parse(response.responseText);\n      } catch (error) {\n        log('fetchDeltas can not parse response', error);\n        return Promise.reject(\"can not parse response of fetchDelta : \" + error.message);\n      }\n      // break if no entries found\n      if (!delta.entries) {\n        return Promise.reject('dropbox.fetchDeltas failed, no entries found');\n      }\n\n      // Dropbox sends the complete state\n      if (delta.reset) {\n        self._revCache = new LowerCaseCache('rev');\n      }\n\n      //saving the cursor for requesting further deltas in relation to the cursor position\n      if (delta.cursor) {\n        self._deltaCursor = delta.cursor;\n      }\n\n      //updating revCache\n      delta.entries.forEach(function (entry) {\n        var path = entry[0].substr(PATH_PREFIX.length);\n        var rev;\n        if (!entry[1]) {\n          rev = null;\n        } else {\n          if (entry[1].is_dir) {\n            return;\n          }\n          rev = entry[1].rev;\n        }\n        self._revCache.set(path, rev);\n      });\n      return Promise.resolve(args);\n    }, function (err) {\n      this.rs.log('fetchDeltas', err);\n      this.rs._emit('error', new Sync.SyncError('fetchDeltas failed.' + err));\n      return Promise.resolve(args);\n    }.bind(this)).then(function () {\n      if (self._revCache) {\n        var args = Array.prototype.slice.call(arguments);\n        self._revCache._activatePropagation();\n        return Promise.resolve(args);\n      }\n    });\n  },\n\n  /**\n   * Method: _getMetadata\n   *\n   * Gets metadata for a path (can point to either a file or a folder).\n   *\n   * Options:\n   *\n   *   list - if path points to a folder, specifies whether to list the\n   *          metadata of the folder's children. False by default.\n   *\n   * Parameters:\n   *\n   *   path - the path to get metadata for\n   *   options - see above\n   *\n   * Returns:\n   *\n   *   A promise for the metadata\n   */\n  _getMetadata: function _getMetadata(path, options) {\n    var self = this;\n    var cached = this._metadataCache[path];\n    var url = 'https://api.dropbox.com/1/metadata/auto' + getDropboxPath(path);\n    url += '?list=' + (options && options.list ? 'true' : 'false');\n    if (cached && cached.hash) {\n      url += '&hash=' + encodeURIComponent(cached.hash);\n    }\n    return this._request('GET', url, {}).then(function (resp) {\n      if (resp.status === 304) {\n        return Promise.resolve(cached);\n      } else if (resp.status === 200) {\n        var response = JSON.parse(resp.responseText);\n        self._metadataCache[path] = response;\n        return Promise.resolve(response);\n      } else {\n        // The file doesn't exist\n        return Promise.resolve();\n      }\n    });\n  },\n\n  /**\n   * Method: _uploadSimple\n   *\n   * Upload a simple file (the size is no more than 150MB).\n   *\n   * Parameters:\n   *\n   *   ifMatch - same as for get\n   *   path - path of the file\n   *   body - contents of the file to upload\n   *   contentType - mime type of the file\n   *\n   * Returns:\n   *\n   *   statusCode - HTTP status code\n   *   revision - revision of the newly-created file, if any\n   */\n  _uploadSimple: function _uploadSimple(params) {\n    var self = this;\n    var url = 'https://api-content.dropbox.com/1/files_put/auto' + getDropboxPath(params.path) + '?';\n\n    if (params && params.ifMatch) {\n      url += \"parent_rev=\" + encodeURIComponent(params.ifMatch);\n    }\n\n    return self._request('PUT', url, {\n      body: params.body,\n      headers: {\n        'Content-Type': params.contentType\n      }\n    }).then(function (resp) {\n      if (resp.status !== 200) {\n        return Promise.resolve({ statusCode: resp.status });\n      }\n\n      var response;\n\n      try {\n        response = JSON.parse(resp.responseText);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n\n      // Conflict happened. Delete the copy created by dropbox\n      if (response.path !== getDropboxPath(params.path)) {\n        var deleteUrl = 'https://api.dropbox.com/1/fileops/delete?root=auto&path=' + encodeURIComponent(response.path);\n        self._request('POST', deleteUrl, {});\n\n        return self._getMetadata(params.path).then(function (metadata) {\n          return Promise.resolve({\n            statusCode: 412,\n            revision: metadata.rev\n          });\n        });\n      }\n\n      self._revCache.propagateSet(params.path, response.rev);\n      return Promise.resolve({ statusCode: resp.status });\n    });\n  },\n\n  /**\n   * Method: _deleteSimple\n   *\n   * Deletes a file or a folder. If the folder contains more than 10'000 items\n   * (recursively) then the operation may not complete successfully. If that\n   * is the case, an Error gets thrown.\n   *\n   * Parameters:\n   *\n   *   path - the path to delete\n   *\n   * Returns:\n   *\n   *   statusCode - HTTP status code\n   */\n  _deleteSimple: function _deleteSimple(path) {\n    var self = this;\n    var url = 'https://api.dropbox.com/1/fileops/delete?root=auto&path=' + encodeURIComponent(getDropboxPath(path));\n\n    return self._request('POST', url, {}).then(function (resp) {\n      if (resp.status === 406) {\n        // Too many files would be involved in the operation for it to\n        // complete successfully.\n        // TODO: Handle this somehow\n        return Promise.reject(new Error(\"Cannot delete '\" + path + \"': too many files involved\"));\n      }\n\n      if (resp.status === 200 || resp.status === 404) {\n        self._revCache.delete(path);\n        delete self._itemRefs[path];\n      }\n\n      return Promise.resolve({ statusCode: resp.status });\n    });\n  }\n};\n\n// Hooking and unhooking the sync\n\nfunction hookSync(rs) {\n  if (rs._dropboxOrigSync) {\n    return;\n  } // already hooked\n  rs._dropboxOrigSync = rs.sync.sync.bind(rs.sync);\n  rs.sync.sync = function () {\n    return this.dropbox.fetchDelta.apply(this.dropbox, arguments).then(rs._dropboxOrigSync, function (err) {\n      rs._emit('error', new Sync.SyncError(err));\n      return Promise.reject(err);\n    });\n  }.bind(rs);\n}\n\nfunction unHookSync(rs) {\n  if (!rs._dropboxOrigSync) {\n    return;\n  } // not hooked\n  rs.sync.sync = rs._dropboxOrigSync;\n  delete rs._dropboxOrigSync;\n}\n\n// Hooking and unhooking getItemURL\n\nfunction hookGetItemURL(rs) {\n  if (rs._origBaseClientGetItemURL) {\n    return;\n  }\n  rs._origBaseClientGetItemURL = BaseClient.prototype.getItemURL;\n  BaseClient.prototype.getItemURL = function (path) {\n    var ret = rs.dropbox._itemRefs[path];\n    return ret ? ret : '';\n  };\n}\n\nfunction unHookGetItemURL(rs) {\n  if (!rs._origBaseClientGetItemURL) {\n    return;\n  }\n  BaseClient.prototype.getItemURL = rs._origBaseClientGetItemURL;\n  delete rs._origBaseClientGetItemURL;\n}\n\nfunction hookRemote(rs) {\n  if (rs._origRemote) {\n    return;\n  }\n  rs._origRemote = rs.remote;\n  rs.remote = rs.dropbox;\n}\n\nfunction unHookRemote(rs) {\n  if (rs._origRemote) {\n    rs.remote = rs._origRemote;\n    delete rs._origRemote;\n  }\n}\n\nfunction hookIt(rs) {\n  hookRemote(rs);\n  if (rs.sync) {\n    hookSync(rs);\n  } else {\n    // when sync is not available yet, we wait for the remote to be connected,\n    // at which point sync should be available as well\n    rs.on('connected', function () {\n      if (rs.sync) {\n        hookSync(rs);\n      }\n    });\n  }\n  hookGetItemURL(rs);\n}\n\nfunction unHookIt(rs) {\n  unHookRemote(rs);\n  unHookSync(rs);\n  unHookGetItemURL(rs);\n}\n\nDropbox._rs_init = function (rs) {\n  hasLocalStorage = util.localStorageAvailable();\n  if (rs.apiKeys.dropbox) {\n    rs.dropbox = new Dropbox(rs);\n  }\n  if (rs.backend === 'dropbox') {\n    hookIt(rs);\n  }\n};\n\nDropbox._rs_supported = function () {\n  return true;\n};\n\nDropbox._rs_cleanup = function (rs) {\n  unHookIt(rs);\n  if (hasLocalStorage) {\n    localStorage.removeItem(SETTINGS_KEY);\n  }\n  rs.removeEventListener('error', onErrorCb);\n  rs.setBackend(undefined);\n};\n\nmodule.exports = Dropbox;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval('\'use strict\';\n\nvar eventHandling = __webpack_require__(3);\n\nvar mode = typeof window !== \'undefined\' ? \'browser\' : \'node\',\n    env = {},\n    isBackground = false;\n\nvar Env = function Env() {\n  return env;\n};\n\nEnv.isBrowser = function () {\n  return mode === "browser";\n};\n\nEnv.isNode = function () {\n  return mode === "node";\n};\n\nEnv.goBackground = function () {\n  isBackground = true;\n  Env._emit("background");\n};\n\nEnv.goForeground = function () {\n  isBackground = false;\n  Env._emit("foreground");\n};\n\nEnv._rs_init = function (remoteStorage) {\n  eventHandling(Env, "background", "foreground");\n\n  function visibility() {\n    if (document[env.hiddenProperty]) {\n      Env.goBackground();\n    } else {\n      Env.goForeground();\n    }\n  }\n\n  if (mode === \'browser\') {\n    if (typeof document.hidden !== "undefined") {\n      env.hiddenProperty = "hidden";\n      env.visibilityChangeEvent = "visibilitychange";\n    } else if (typeof document.mozHidden !== "undefined") {\n      env.hiddenProperty = "mozHidden";\n      env.visibilityChangeEvent = "mozvisibilitychange";\n    } else if (typeof document.msHidden !== "undefined") {\n      env.hiddenProperty = "msHidden";\n      env.visibilityChangeEvent = "msvisibilitychange";\n    } else if (typeof document.webkitHidden !== "undefined") {\n      env.hiddenProperty = "webkitHidden";\n      env.visibilityChangeEvent = "webkitvisibilitychange";\n    }\n    document.addEventListener(env.visibilityChangeEvent, visibility, false);\n    visibility();\n  }\n};\n\nEnv._rs_cleanup = function (remoteStorage) {};\n\nmodule.exports = Env;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZW52LmpzP2M5OWIiXSwibmFtZXMiOlsiZXZlbnRIYW5kbGluZyIsInJlcXVpcmUiLCJtb2RlIiwid2luZG93IiwiZW52IiwiaXNCYWNrZ3JvdW5kIiwiRW52IiwiaXNCcm93c2VyIiwiaXNOb2RlIiwiZ29CYWNrZ3JvdW5kIiwiX2VtaXQiLCJnb0ZvcmVncm91bmQiLCJfcnNfaW5pdCIsInJlbW90ZVN0b3JhZ2UiLCJ2aXNpYmlsaXR5IiwiZG9jdW1lbnQiLCJoaWRkZW5Qcm9wZXJ0eSIsImhpZGRlbiIsInZpc2liaWxpdHlDaGFuZ2VFdmVudCIsIm1vekhpZGRlbiIsIm1zSGlkZGVuIiwid2Via2l0SGlkZGVuIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9yc19jbGVhbnVwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBRSxJQUFJQSxnQkFBZ0IsbUJBQUFDLENBQVEsQ0FBUixDQUFwQjs7QUFFQSxJQUFJQyxPQUFPLE9BQU9DLE1BQVAsS0FBbUIsV0FBbkIsR0FBaUMsU0FBakMsR0FBNkMsTUFBeEQ7QUFBQSxJQUNJQyxNQUFNLEVBRFY7QUFBQSxJQUVJQyxlQUFlLEtBRm5COztBQUtBLElBQUlDLE1BQU0sU0FBTkEsR0FBTSxHQUFZO0FBQ3BCLFNBQU9GLEdBQVA7QUFDRCxDQUZEOztBQUlBRSxJQUFJQyxTQUFKLEdBQWdCLFlBQVk7QUFDMUIsU0FBT0wsU0FBUyxTQUFoQjtBQUNELENBRkQ7O0FBSUFJLElBQUlFLE1BQUosR0FBYSxZQUFZO0FBQ3ZCLFNBQU9OLFNBQVMsTUFBaEI7QUFDRCxDQUZEOztBQUlBSSxJQUFJRyxZQUFKLEdBQW1CLFlBQVk7QUFDN0JKLGlCQUFlLElBQWY7QUFDQUMsTUFBSUksS0FBSixDQUFVLFlBQVY7QUFDRCxDQUhEOztBQUtBSixJQUFJSyxZQUFKLEdBQW1CLFlBQVk7QUFDN0JOLGlCQUFlLEtBQWY7QUFDQUMsTUFBSUksS0FBSixDQUFVLFlBQVY7QUFDRCxDQUhEOztBQUtBSixJQUFJTSxRQUFKLEdBQWUsVUFBVUMsYUFBVixFQUF5QjtBQUN0Q2IsZ0JBQWNNLEdBQWQsRUFBbUIsWUFBbkIsRUFBaUMsWUFBakM7O0FBRUEsV0FBU1EsVUFBVCxHQUFzQjtBQUNwQixRQUFJQyxTQUFTWCxJQUFJWSxjQUFiLENBQUosRUFBa0M7QUFDaENWLFVBQUlHLFlBQUo7QUFDRCxLQUZELE1BRU87QUFDTEgsVUFBSUssWUFBSjtBQUNEO0FBQ0Y7O0FBRUQsTUFBS1QsU0FBUyxTQUFkLEVBQXlCO0FBQ3ZCLFFBQUssT0FBT2EsU0FBU0UsTUFBaEIsS0FBNEIsV0FBakMsRUFBK0M7QUFDN0NiLFVBQUlZLGNBQUosR0FBcUIsUUFBckI7QUFDQVosVUFBSWMscUJBQUosR0FBNEIsa0JBQTVCO0FBQ0QsS0FIRCxNQUdPLElBQUssT0FBT0gsU0FBU0ksU0FBaEIsS0FBK0IsV0FBcEMsRUFBa0Q7QUFDdkRmLFVBQUlZLGNBQUosR0FBcUIsV0FBckI7QUFDQVosVUFBSWMscUJBQUosR0FBNEIscUJBQTVCO0FBQ0QsS0FITSxNQUdBLElBQUssT0FBT0gsU0FBU0ssUUFBaEIsS0FBOEIsV0FBbkMsRUFBaUQ7QUFDdERoQixVQUFJWSxjQUFKLEdBQXFCLFVBQXJCO0FBQ0FaLFVBQUljLHFCQUFKLEdBQTRCLG9CQUE1QjtBQUNELEtBSE0sTUFHQSxJQUFLLE9BQU9ILFNBQVNNLFlBQWhCLEtBQWtDLFdBQXZDLEVBQXFEO0FBQzFEakIsVUFBSVksY0FBSixHQUFxQixjQUFyQjtBQUNBWixVQUFJYyxxQkFBSixHQUE0Qix3QkFBNUI7QUFDRDtBQUNESCxhQUFTTyxnQkFBVCxDQUEwQmxCLElBQUljLHFCQUE5QixFQUFxREosVUFBckQsRUFBaUUsS0FBakU7QUFDQUE7QUFDRDtBQUNGLENBNUJEOztBQThCQVIsSUFBSWlCLFdBQUosR0FBa0IsVUFBVVYsYUFBVixFQUF5QixDQUMxQyxDQUREOztBQUlBVyxPQUFPQyxPQUFQLEdBQWlCbkIsR0FBakIiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgIHZhciBldmVudEhhbmRsaW5nID0gcmVxdWlyZSgnLi9ldmVudGhhbmRsaW5nJyk7XG4gIFxuICB2YXIgbW9kZSA9IHR5cGVvZih3aW5kb3cpICE9PSAndW5kZWZpbmVkJyA/ICdicm93c2VyJyA6ICdub2RlJyxcbiAgICAgIGVudiA9IHt9LFxuICAgICAgaXNCYWNrZ3JvdW5kID0gZmFsc2U7XG5cblxuICB2YXIgRW52ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlbnY7XG4gIH07XG5cbiAgRW52LmlzQnJvd3NlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9kZSA9PT0gXCJicm93c2VyXCI7XG4gIH07XG5cbiAgRW52LmlzTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9kZSA9PT0gXCJub2RlXCI7XG4gIH07XG5cbiAgRW52LmdvQmFja2dyb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpc0JhY2tncm91bmQgPSB0cnVlO1xuICAgIEVudi5fZW1pdChcImJhY2tncm91bmRcIik7XG4gIH07XG5cbiAgRW52LmdvRm9yZWdyb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpc0JhY2tncm91bmQgPSBmYWxzZTtcbiAgICBFbnYuX2VtaXQoXCJmb3JlZ3JvdW5kXCIpO1xuICB9O1xuXG4gIEVudi5fcnNfaW5pdCA9IGZ1bmN0aW9uIChyZW1vdGVTdG9yYWdlKSB7XG4gICAgZXZlbnRIYW5kbGluZyhFbnYsIFwiYmFja2dyb3VuZFwiLCBcImZvcmVncm91bmRcIik7XG5cbiAgICBmdW5jdGlvbiB2aXNpYmlsaXR5KCkge1xuICAgICAgaWYgKGRvY3VtZW50W2Vudi5oaWRkZW5Qcm9wZXJ0eV0pIHtcbiAgICAgICAgRW52LmdvQmFja2dyb3VuZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRW52LmdvRm9yZWdyb3VuZCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICggbW9kZSA9PT0gJ2Jyb3dzZXInKSB7XG4gICAgICBpZiAoIHR5cGVvZihkb2N1bWVudC5oaWRkZW4pICE9PSBcInVuZGVmaW5lZFwiICkge1xuICAgICAgICBlbnYuaGlkZGVuUHJvcGVydHkgPSBcImhpZGRlblwiO1xuICAgICAgICBlbnYudmlzaWJpbGl0eUNoYW5nZUV2ZW50ID0gXCJ2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgICB9IGVsc2UgaWYgKCB0eXBlb2YoZG9jdW1lbnQubW96SGlkZGVuKSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcbiAgICAgICAgZW52LmhpZGRlblByb3BlcnR5ID0gXCJtb3pIaWRkZW5cIjtcbiAgICAgICAgZW52LnZpc2liaWxpdHlDaGFuZ2VFdmVudCA9IFwibW96dmlzaWJpbGl0eWNoYW5nZVwiO1xuICAgICAgfSBlbHNlIGlmICggdHlwZW9mKGRvY3VtZW50Lm1zSGlkZGVuKSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcbiAgICAgICAgZW52LmhpZGRlblByb3BlcnR5ID0gXCJtc0hpZGRlblwiO1xuICAgICAgICBlbnYudmlzaWJpbGl0eUNoYW5nZUV2ZW50ID0gXCJtc3Zpc2liaWxpdHljaGFuZ2VcIjtcbiAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZihkb2N1bWVudC53ZWJraXRIaWRkZW4pICE9PSBcInVuZGVmaW5lZFwiICkge1xuICAgICAgICBlbnYuaGlkZGVuUHJvcGVydHkgPSBcIndlYmtpdEhpZGRlblwiO1xuICAgICAgICBlbnYudmlzaWJpbGl0eUNoYW5nZUV2ZW50ID0gXCJ3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGVudi52aXNpYmlsaXR5Q2hhbmdlRXZlbnQsIHZpc2liaWxpdHksIGZhbHNlKTtcbiAgICAgIHZpc2liaWxpdHkoKTtcbiAgICB9XG4gIH07XG5cbiAgRW52Ll9yc19jbGVhbnVwID0gZnVuY3Rpb24gKHJlbW90ZVN0b3JhZ2UpIHtcbiAgfTtcblxuXG4gIG1vZHVsZS5leHBvcnRzID0gRW52O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Vudi5qcyJdLCJzb3VyY2VSb290IjoiIn0=')},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _GoogleDrive$prototyp;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Class: GoogleDrive\n *\n * WORK IN PROGRESS, NOT RECOMMENDED FOR PRODUCTION USE\n *\n * To use this backend, you need to specify the app's client ID like so:\n *\n * (start code)\n *\n * remoteStorage.setApiKeys('googledrive', {\n *   clientId: 'your-client-id'\n * });\n *\n * (end code)\n *\n * An client ID can be obtained by registering your app in the Google\n * Developers Console: https://developers.google.com/drive/web/auth/web-client\n *\n * Docs: https://developers.google.com/drive/web/auth/web-client#create_a_client_id_and_client_secret\n **/\n\nvar Authorize = __webpack_require__(4);\nvar WireClient = __webpack_require__(9);\nvar eventHandling = __webpack_require__(3);\nvar util = __webpack_require__(2);\n\nvar BASE_URL = 'https://www.googleapis.com';\nvar AUTH_URL = 'https://accounts.google.com/o/oauth2/auth';\nvar AUTH_SCOPE = 'https://www.googleapis.com/auth/drive';\nvar SETTINGS_KEY = 'remotestorage:googledrive';\n\nvar GD_DIR_MIME_TYPE = 'application/vnd.google-apps.folder';\nvar RS_DIR_MIME_TYPE = 'application/json; charset=UTF-8';\n\nvar isFolder = util.isFolder;\nvar hasLocalStorage;\n\n// function buildQueryString(params) {\n//   return Object.keys(params).map(function (key) {\n//     return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n//   }).join('&');\n// }\n\n// function fileNameFromMeta(meta) {\n//   return encodeURIComponent(meta.title) + (meta.mimeType === GD_DIR_MIME_TYPE ? '/' : '');\n// }\n\nfunction metaTitleFromFileName(filename) {\n  if (filename.substr(-1) === '/') {\n    filename = filename.substr(0, filename.length - 1);\n  }\n  return decodeURIComponent(filename);\n}\n\nfunction parentPath(path) {\n  return path.replace(/[^\\/]+\\/?$/, '');\n}\n\nfunction baseName(path) {\n  var parts = path.split('/');\n  if (path.substr(-1) === '/') {\n    return parts[parts.length - 2] + '/';\n  } else {\n    return parts[parts.length - 1];\n  }\n}\n\nvar Cache = function Cache(maxAge) {\n  this.maxAge = maxAge;\n  this._items = {};\n};\n\nCache.prototype = {\n  get: function get(key) {\n    var item = this._items[key];\n    var now = new Date().getTime();\n    return item && item.t >= now - this.maxAge ? item.v : undefined;\n  },\n\n  set: function set(key, value) {\n    this._items[key] = {\n      v: value,\n      t: new Date().getTime()\n    };\n  }\n};\n\nvar GoogleDrive = function GoogleDrive(remoteStorage, clientId) {\n\n  eventHandling(this, 'change', 'connected', 'wire-busy', 'wire-done', 'not-connected');\n\n  this.rs = remoteStorage;\n  this.clientId = clientId;\n\n  this._fileIdCache = new Cache(60 * 5); // ids expire after 5 minutes (is this a good idea?)\n\n  hasLocalStorage = util.localStorageAvailable();\n\n  if (hasLocalStorage) {\n    var settings;\n    try {\n      settings = JSON.parse(localStorage.getItem(SETTINGS_KEY));\n    } catch (e) {}\n    if (settings) {\n      this.configure(settings);\n    }\n  }\n};\n\nGoogleDrive.prototype = (_GoogleDrive$prototyp = {\n  connected: false,\n  online: true,\n\n  configure: function configure(settings) {\n    // Settings parameter compatible with WireClient\n    // We only update this.userAddress if settings.userAddress is set to a string or to null\n    if (typeof settings.userAddress !== 'undefined') {\n      this.userAddress = settings.userAddress;\n    }\n    // Same for this.token. If only one of these two is set, we leave the other one at its existing value\n    if (typeof settings.token !== 'undefined') {\n      this.token = settings.token;\n    }\n\n    var writeSettingsToCache = function writeSettingsToCache() {\n      if (hasLocalStorage) {\n        localStorage.setItem(SETTINGS_KEY, JSON.stringify({\n          userAddress: this.userAddress,\n          token: this.token\n        }));\n      }\n    };\n\n    var handleError = function handleError() {\n      this.connected = false;\n      delete this.token;\n      if (hasLocalStorage) {\n        localStorage.removeItem(SETTINGS_KEY);\n      }\n    };\n\n    if (this.token) {\n      this.connected = true;\n\n      if (this.userAddress) {\n        this._emit('connected');\n        writeSettingsToCache.apply(this);\n      } else {\n        this.info().then(function (info) {\n          this.userAddress = info.user.emailAddress;\n          this.rs.widget.view.setUserAddress(this.userAddress);\n          this._emit('connected');\n          writeSettingsToCache.apply(this);\n        }.bind(this)).catch(function () {\n          handleError.apply(this);\n          this.rs._emit('error', new Error('Could not fetch user info.'));\n        }.bind(this));\n      }\n    } else {\n      handleError.apply(this);\n    }\n  },\n\n  connect: function connect() {\n    this.rs.setBackend('googledrive');\n    Authorize(this.rs, AUTH_URL, AUTH_SCOPE, String(Authorize.getLocation()), this.clientId);\n  },\n\n  stopWaitingForToken: function stopWaitingForToken() {\n    if (!this.connected) {\n      this._emit('not-connected');\n    }\n  },\n\n  get: function get(path, options) {\n    if (path.substr(-1) === '/') {\n      return this._getFolder(path, options);\n    } else {\n      return this._getFile(path, options);\n    }\n  },\n\n  put: function put(path, body, contentType, options) {\n    var self = this;\n    function putDone(response) {\n      if (response.status >= 200 && response.status < 300) {\n        var meta = JSON.parse(response.responseText);\n        var etagWithoutQuotes = meta.etag.substring(1, meta.etag.length - 1);\n        return Promise.resolve({ statusCode: 200, contentType: meta.mimeType, revision: etagWithoutQuotes });\n      } else if (response.status === 412) {\n        return Promise.resolve({ statusCode: 412, revision: 'conflict' });\n      } else {\n        return Promise.reject(\"PUT failed with status \" + response.status + \" (\" + response.responseText + \")\");\n      }\n    }\n    return self._getFileId(path).then(function (id) {\n      if (id) {\n        if (options && options.ifNoneMatch === '*') {\n          return putDone({ status: 412 });\n        }\n        return self._updateFile(id, path, body, contentType, options).then(putDone);\n      } else {\n        return self._createFile(path, body, contentType, options).then(putDone);\n      }\n    });\n  },\n\n  'delete': function _delete(path, options) {\n    var self = this;\n    return self._getFileId(path).then(function (id) {\n      if (!id) {\n        // File doesn't exist. Ignore.\n        return Promise.resolve({ statusCode: 200 });\n      }\n\n      return self._getMeta(id).then(function (meta) {\n        var etagWithoutQuotes;\n        if ((typeof meta === 'undefined' ? 'undefined' : _typeof(meta)) === 'object' && typeof meta.etag === 'string') {\n          etagWithoutQuotes = meta.etag.substring(1, meta.etag.length - 1);\n        }\n        if (options && options.ifMatch && options.ifMatch !== etagWithoutQuotes) {\n          return { statusCode: 412, revision: etagWithoutQuotes };\n        }\n\n        return self._request('DELETE', BASE_URL + '/drive/v2/files/' + id, {}).then(function (response) {\n          if (response.status === 200 || response.status === 204) {\n            return { statusCode: 200 };\n          } else {\n            return Promise.reject(\"Delete failed: \" + response.status + \" (\" + response.responseText + \")\");\n          }\n        });\n      });\n    });\n  },\n\n  /**\n   * Method: info\n   *\n   * Fetches the user's info from Google and returns a promise for it.\n   *\n   * Returns:\n   *\n   *   A promise to the user's info\n   */\n  info: function info() {\n    var url = BASE_URL + '/drive/v2/about?fields=user';\n    // requesting user info(mainly for userAdress)\n    return this._request('GET', url, {}).then(function (resp) {\n      try {\n        var info = JSON.parse(resp.responseText);\n        return Promise.resolve(info);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    });\n  },\n\n  _updateFile: function _updateFile(id, path, body, contentType, options) {\n    var self = this;\n    var metadata = {\n      mimeType: contentType\n    };\n    var headers = {\n      'Content-Type': 'application/json; charset=UTF-8'\n    };\n\n    if (options && options.ifMatch) {\n      headers['If-Match'] = '\"' + options.ifMatch + '\"';\n    }\n\n    return self._request('PUT', BASE_URL + '/upload/drive/v2/files/' + id + '?uploadType=resumable', {\n      body: JSON.stringify(metadata),\n      headers: headers\n    }).then(function (response) {\n      if (response.status === 412) {\n        return response;\n      } else {\n        return self._request('PUT', response.getResponseHeader('Location'), {\n          body: contentType.match(/^application\\/json/) ? JSON.stringify(body) : body\n        });\n      }\n    });\n  },\n\n  _createFile: function _createFile(path, body, contentType, options) {\n    var self = this;\n    return self._getParentId(path).then(function (parentId) {\n      var fileName = baseName(path);\n      var metadata = {\n        title: metaTitleFromFileName(fileName),\n        mimeType: contentType,\n        parents: [{\n          kind: \"drive#fileLink\",\n          id: parentId\n        }]\n      };\n      return self._request('POST', BASE_URL + '/upload/drive/v2/files?uploadType=resumable', {\n        body: JSON.stringify(metadata),\n        headers: {\n          'Content-Type': 'application/json; charset=UTF-8'\n        }\n      }).then(function (response) {\n        return self._request('POST', response.getResponseHeader('Location'), {\n          body: contentType.match(/^application\\/json/) ? JSON.stringify(body) : body\n        });\n      });\n    });\n  },\n\n  _getFile: function _getFile(path, options) {\n    var self = this;\n    return self._getFileId(path).then(function (id) {\n      return self._getMeta(id).then(function (meta) {\n        var etagWithoutQuotes;\n        if ((typeof meta === 'undefined' ? 'undefined' : _typeof(meta)) === 'object' && typeof meta.etag === 'string') {\n          etagWithoutQuotes = meta.etag.substring(1, meta.etag.length - 1);\n        }\n\n        if (options && options.ifNoneMatch && etagWithoutQuotes === options.ifNoneMatch) {\n          return Promise.resolve({ statusCode: 304 });\n        }\n\n        var options2 = {};\n        if (!meta.downloadUrl) {\n          if (meta.exportLinks && meta.exportLinks['text/html']) {\n            // Documents that were generated inside GoogleDocs have no\n            // downloadUrl, but you can export them to text/html instead:\n            meta.mimeType += ';export=text/html';\n            meta.downloadUrl = meta.exportLinks['text/html'];\n          } else {\n            // empty file\n            return Promise.resolve({ statusCode: 200, body: '', contentType: meta.mimeType, revision: etagWithoutQuotes });\n          }\n        }\n\n        if (meta.mimeType.match(/charset=binary/)) {\n          options2.responseType = 'blob';\n        }\n        return self._request('GET', meta.downloadUrl, options2).then(function (response) {\n          var body = response.response;\n          if (meta.mimeType.match(/^application\\/json/)) {\n            try {\n              body = JSON.parse(body);\n            } catch (e) {}\n          }\n          return Promise.resolve({ statusCode: 200, body: body, contentType: meta.mimeType, revision: etagWithoutQuotes });\n        });\n      });\n    });\n  },\n\n  _getFolder: function _getFolder(path, options) {\n    var self = this;\n    return self._getFileId(path).then(function (id) {\n      var query, fields, data, etagWithoutQuotes, itemsMap;\n      if (!id) {\n        return Promise.resolve({ statusCode: 404 });\n      }\n\n      query = '\\'' + id + '\\' in parents';\n      fields = 'items(downloadUrl,etag,fileSize,id,mimeType,title)';\n      return self._request('GET', BASE_URL + '/drive/v2/files?' + 'q=' + encodeURIComponent(query) + '&fields=' + encodeURIComponent(fields) + '&maxResults=1000', {}).then(function (response) {\n        if (response.status !== 200) {\n          return Promise.reject('request failed or something: ' + response.status);\n        }\n\n        try {\n          data = JSON.parse(response.responseText);\n        } catch (e) {\n          return Promise.reject('non-JSON response from GoogleDrive');\n        }\n\n        itemsMap = {};\n        for (var i = 0, len = data.items.length; i < len; i++) {\n          etagWithoutQuotes = data.items[i].etag.substring(1, data.items[i].etag.length - 1);\n          if (data.items[i].mimeType === GD_DIR_MIME_TYPE) {\n            self._fileIdCache.set(path + data.items[i].title + '/', data.items[i].id);\n            itemsMap[data.items[i].title + '/'] = {\n              ETag: etagWithoutQuotes\n            };\n          } else {\n            self._fileIdCache.set(path + data.items[i].title, data.items[i].id);\n            itemsMap[data.items[i].title] = {\n              ETag: etagWithoutQuotes,\n              'Content-Type': data.items[i].mimeType,\n              'Content-Length': data.items[i].fileSize\n            };\n          }\n        }\n        // FIXME: add revision of folder!\n        return Promise.resolve({ statusCode: 200, body: itemsMap, contentType: RS_DIR_MIME_TYPE, revision: undefined });\n      });\n    });\n  },\n\n  _getParentId: function _getParentId(path) {\n    var foldername = parentPath(path);\n    var self = this;\n    return self._getFileId(foldername).then(function (parentId) {\n      if (parentId) {\n        return Promise.resolve(parentId);\n      } else {\n        return self._createFolder(foldername);\n      }\n    });\n  },\n\n  _createFolder: function _createFolder(path) {\n    var self = this;\n    return self._getParentId(path).then(function (parentId) {\n      return self._request('POST', BASE_URL + '/drive/v2/files', {\n        body: JSON.stringify({\n          title: metaTitleFromFileName(baseName(path)),\n          mimeType: GD_DIR_MIME_TYPE,\n          parents: [{\n            id: parentId\n          }]\n        }),\n        headers: {\n          'Content-Type': 'application/json; charset=UTF-8'\n        }\n      }).then(function (response) {\n        var meta = JSON.parse(response.responseText);\n        return Promise.resolve(meta.id);\n      });\n    });\n  },\n\n  _getFileId: function _getFileId(path) {\n    var self = this;\n    var id;\n    if (path === '/') {\n      // \"root\" is a special alias for the fileId of the root folder\n      return Promise.resolve('root');\n    } else if (id = this._fileIdCache.get(path)) {\n      // id is cached.\n      return Promise.resolve(id);\n    }\n    // id is not cached (or file doesn't exist).\n    // load parent folder listing to propagate / update id cache.\n    return self._getFolder(parentPath(path)).then(function () {\n      id = self._fileIdCache.get(path);\n      if (!id) {\n        if (path.substr(-1) === '/') {\n          return self._createFolder(path).then(function () {\n            return self._getFileId(path);\n          });\n        } else {\n          return Promise.resolve();\n        }\n      }\n      return Promise.resolve(id);\n    });\n  },\n\n  _getMeta: function _getMeta(id) {\n    return this._request('GET', BASE_URL + '/drive/v2/files/' + id, {}).then(function (response) {\n      if (response.status === 200) {\n        return Promise.resolve(JSON.parse(response.responseText));\n      } else {\n        return Promise.reject(\"request (getting metadata for \" + id + \") failed with status: \" + response.status);\n      }\n    });\n  }\n\n}, _defineProperty(_GoogleDrive$prototyp, 'info', function info() {\n  var url = BASE_URL + '/drive/v2/about';\n  // requesting user info(mainly for userAdress)\n  return this._request('GET', url, {}).then(function (resp) {\n    try {\n      var info = JSON.parse(resp.responseText);\n      return Promise.resolve(info);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  });\n}), _defineProperty(_GoogleDrive$prototyp, '_request', function _request(method, url, options) {\n  var self = this;\n\n  if (!options.headers) {\n    options.headers = {};\n  }\n  options.headers['Authorization'] = 'Bearer ' + self.token;\n\n  this._emit('wire-busy', {\n    method: method,\n    isFolder: isFolder(url)\n  });\n\n  return WireClient.request.call(this, method, url, options).then(function (xhr) {\n    // Google tokens expire from time to time...\n    if (xhr && xhr.status === 401) {\n      self.connect();\n      return;\n    } else {\n      if (!self.online) {\n        self.online = true;\n        self.rs._emit('network-online');\n      }\n      self._emit('wire-done', {\n        method: method,\n        isFolder: isFolder(url),\n        success: true\n      });\n\n      return Promise.resolve(xhr);\n    }\n  }, function (error) {\n    if (self.online) {\n      self.online = false;\n      self.rs._emit('network-offline');\n    }\n    self._emit('wire-done', {\n      method: method,\n      isFolder: isFolder(url),\n      success: false\n    });\n\n    return Promise.reject(error);\n  });\n}), _GoogleDrive$prototyp);\n\nGoogleDrive._rs_init = function (remoteStorage) {\n  var config = remoteStorage.apiKeys.googledrive;\n  if (config) {\n    remoteStorage.googledrive = new GoogleDrive(remoteStorage, config.clientId);\n    if (remoteStorage.backend === 'googledrive') {\n      remoteStorage._origRemote = remoteStorage.remote;\n      remoteStorage.remote = remoteStorage.googledrive;\n    }\n  }\n};\n\nGoogleDrive._rs_supported = function (rs) {\n  return true;\n};\n\nGoogleDrive._rs_cleanup = function (remoteStorage) {\n  remoteStorage.setBackend(undefined);\n  if (remoteStorage._origRemote) {\n    remoteStorage.remote = remoteStorage._origRemote;\n    delete remoteStorage._origRemote;\n  }\n};\n\nmodule.exports = GoogleDrive;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar hasLocalStorage;\n\nfunction emitUnauthorized(r) {\n  if (r.statusCode === 403 || r.statusCode === 401) {\n    this._emit('error', new Authorize.Unauthorized());\n  }\n  return Promise.resolve(r);\n}\n\nvar util = __webpack_require__(2);\nvar Dropbox = __webpack_require__(13);\nvar GoogleDrive = __webpack_require__(15);\nvar Discover = __webpack_require__(12);\nvar BaseClient = __webpack_require__(6);\nvar config = __webpack_require__(5);\nvar Authorize = __webpack_require__(4);\nvar Sync = __webpack_require__(8);\nvar _log = __webpack_require__(1);\nvar Features = __webpack_require__(17);\nvar globalContext = util.getGlobalContext();\nvar eventHandling = __webpack_require__(3);\n\n/**\n * Class: RemoteStorage\n *\n * TODO needs proper introduction and links to relevant classes etc\n *\n * Constructor for remoteStorage object.\n *\n * This class primarily contains feature detection code and convenience API.\n *\n * Depending on which features are built in, it contains different attributes and\n * functions. See the individual features for more information.\n *\n *  (start code)\n *  var remoteStorage = new RemoteStorage({\n *    logging: true,  // defaults to false\n *    cordovaRedirectUri: 'https://app.mygreatapp.com' // defaults to undefined\n *  });\n *  (end code)\n */\nvar RemoteStorage = function RemoteStorage(cfg) {\n  /**\n   * Event: ready\n   *\n   * Fired when ready\n   **/\n  /**\n   * Event: not-connected\n   *\n   * Fired when ready, but no storage connected (\"anonymous mode\")\n   **/\n  /**\n   * Event: connected\n   *\n   * Fired when a remote storage has been connected\n   **/\n  /**\n   * Event: disconnected\n   *\n   * Fired after disconnect\n   **/\n  /**\n   * Event: error\n   *\n   * Fired when an error occurs\n   *\n   * Arguments:\n   * the error\n   **/\n  /**\n   * Event: features-loaded\n   *\n   * Fired when all features are loaded\n   **/\n  /**\n   * Event: connecting\n   *\n   * Fired before webfinger lookup\n   **/\n  /**\n   * Event: authing\n   *\n   * Fired before redirecting to the authing server\n   **/\n  /**\n   * Event: wire-busy\n   *\n   * Fired when a wire request starts\n   **/\n  /**\n   * Event: wire-done\n   *\n   * Fired when a wire request completes\n   **/\n  /**\n   * Event: network-offline\n   *\n   * Fired once when a wire request fails for the first time, and\n   * `remote.online` is set to false\n   **/\n  /**\n   * Event: network-online\n   *\n   * Fired once when a wire request succeeds for the first time after a\n   * failed one, and `remote.online` is set back to true\n   **/\n\n  // Initial configuration property settings.\n  if ((typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) === 'object') {\n    util.extend(config, cfg);\n  }\n\n  eventHandling(this, 'ready', 'connected', 'disconnected', 'not-connected', 'conflict', 'error', 'features-loaded', 'connecting', 'authing', 'sync-interval-change', 'wire-busy', 'wire-done', 'network-offline', 'network-online');\n\n  // pending get/put/delete calls.\n  this._pending = [];\n\n  this._setGPD({\n    get: this._pendingGPD('get'),\n    put: this._pendingGPD('put'),\n    delete: this._pendingGPD('delete')\n  });\n\n  this._cleanups = [];\n\n  this._pathHandlers = { change: {} };\n\n  this.apiKeys = {};\n\n  hasLocalStorage = util.localStorageAvailable();\n\n  if (hasLocalStorage) {\n    try {\n      this.apiKeys = JSON.parse(localStorage.getItem('remotestorage:api-keys')) || {};\n    } catch (exc) {\n      // ignored\n    }\n    this.setBackend(localStorage.getItem('remotestorage:backend') || 'remotestorage');\n  }\n\n  var origOn = this.on;\n\n  this.on = function (eventName, handler) {\n    if (eventName === 'ready' && this.remote && this.remote.connected && this._allLoaded) {\n      setTimeout(handler, 0);\n    } else if (eventName === 'features-loaded' && this._allLoaded) {\n      setTimeout(handler, 0);\n    }\n    return origOn.call(this, eventName, handler);\n  };\n\n  // load all features and emit `ready`\n  this._init();\n\n  this.fireInitial = function () {\n    if (this.local) {\n      setTimeout(this.local.fireInitial.bind(this.local), 0);\n    }\n  }.bind(this);\n\n  this.on('ready', this.fireInitial.bind(this));\n};\n\n// TOFIX: Instead of doing this, would be better to only \n// export setAuthURL / getAuthURL from RemoteStorage prototype\nRemoteStorage.Authorize = Authorize;\n\nRemoteStorage.SyncError = Sync.SyncError;\nRemoteStorage.Unauthorized = Authorize.Unauthorized;\nRemoteStorage.DiscoveryError = Discover.DiscoveryError;\n\nRemoteStorage.prototype = {\n  authorize: function authorize(authURL, cordovaRedirectUri) {\n    this.access.setStorageType(this.remote.storageType);\n    var scope = this.access.scopeParameter;\n\n    var redirectUri = globalContext.cordova ? cordovaRedirectUri : String(Authorize.getLocation());\n\n    var clientId = redirectUri.match(/^(https?:\\/\\/[^\\/]+)/)[0];\n\n    Authorize(this, authURL, scope, redirectUri, clientId);\n  },\n\n  impliedauth: function impliedauth(storageApi, redirectUri) {\n    storageApi = this.remote.storageApi;\n    redirectUri = String(document.location);\n\n    _log('ImpliedAuth proceeding due to absent authURL; storageApi = ' + storageApi + ' redirectUri = ' + redirectUri);\n    // Set a fixed access token, signalling to not send it as Bearer\n    this.remote.configure({\n      token: Authorize.IMPLIED_FAKE_TOKEN\n    });\n    document.location = redirectUri;\n  },\n  /**\n   * Property: remote\n   *\n   * Properties:\n   *\n   *   connected   - Boolean, whether or not a remote store is connected\n   *   online      - Boolean, whether last sync action was successful or not\n   *   userAddress - String, the user address of the connected user\n   *   properties  - String, the properties of the WebFinger link\n   */\n\n  /**\n   * Method: scope\n   *\n   * Returns a BaseClient with a certain scope (base path). Please use this method\n   * only for debugging, and always use defineModule instead, to get access to a\n   * BaseClient from a module in an app.\n   *\n   * Parameters:\n   *\n   *   scope - A string, with a leading and a trailing slash, specifying the\n   *           base path of the BaseClient that will be returned.\n   *\n   * Code example:\n   *\n   * (start code)\n   * remoteStorage.scope('/pictures/').getListing('');\n   * remoteStorage.scope('/public/pictures/').getListing('');\n   */\n\n  /**\n   * Method: startSync\n   *\n   * Start synchronization with remote storage, downloading and uploading any\n   * changes within the cached paths.\n   *\n   * Please consider: local changes will attempt sync immediately, and remote\n   * changes should also be synced timely when using library defaults. So\n   * this is mostly useful for letting users sync manually, when pressing a\n   * sync button for example. This might feel safer to them sometimes, esp.\n   * when shifting between offline and online a lot.\n   */\n  // (see src/sync.js for implementation)\n\n  /**\n   * Method: connect\n   *\n   * Connect to a remoteStorage server.\n   *\n   * Parameters:\n   *   userAddress        - The user address (user@host) to connect to.\n   *   token              - (optional) A bearer token acquired beforehand\n   *\n   * Discovers the WebFinger profile of the given user address and initiates\n   * the OAuth dance.\n   *\n   * This method must be called *after* all required access has been claimed.\n   * When using the connect widget, it will call this method itself.\n   *\n   * Special cases:\n   *\n   * 1. If a bearer token is supplied as second argument, the OAuth dance\n   *    will be skipped and the supplied token be used instead. This is\n   *    useful outside of browser environments, where the token has been\n   *    acquired in a different way.\n   *\n   * 2. If the Webfinger profile for the given user address doesn't contain\n   *    an auth URL, the library will assume that client and server have\n   *    established authorization among themselves, which will omit bearer\n   *    tokens in all requests later on. This is useful for example when using\n   *    Kerberos and similar protocols.\n   */\n  connect: function connect(userAddress, token) {\n    this.setBackend('remotestorage');\n    if (userAddress.indexOf('@') < 0) {\n      this._emit('error', new RemoteStorage.DiscoveryError(\"User address doesn't contain an @.\"));\n      return;\n    }\n\n    if (globalContext.cordova) {\n      if (typeof config.cordovaRedirectUri !== 'string') {\n        this._emit('error', new RemoteStorage.DiscoveryError(\"Please supply a custom HTTPS redirect URI for your Cordova app\"));\n        return;\n      }\n      if (!globalContext.cordova.InAppBrowser) {\n        this._emit('error', new RemoteStorage.DiscoveryError(\"Please include the InAppBrowser Cordova plugin to enable OAuth\"));\n        return;\n      }\n    }\n\n    this.remote.configure({\n      userAddress: userAddress\n    });\n    this._emit('connecting');\n\n    var discoveryTimeout = setTimeout(function () {\n      this._emit('error', new RemoteStorage.DiscoveryError(\"No storage information found for this user address.\"));\n    }.bind(this), config.discoveryTimeout);\n\n    Discover(userAddress).then(function (info) {\n      // Info contains fields: href, storageApi, authURL (optional), properties\n\n      clearTimeout(discoveryTimeout);\n      this._emit('authing');\n      info.userAddress = userAddress;\n      this.remote.configure(info);\n      if (!this.remote.connected) {\n        if (info.authURL) {\n          if (typeof token === 'undefined') {\n            // Normal authorization step; the default way to connect\n            this.authorize(info.authURL, config.cordovaRedirectUri);\n          } else if (typeof token === 'string') {\n            // Token supplied directly by app/developer/user\n            _log('Skipping authorization sequence and connecting with known token');\n            this.remote.configure({ token: token });\n          } else {\n            throw new Error(\"Supplied bearer token must be a string\");\n          }\n        } else {\n          // In lieu of an excplicit authURL, assume that the browser and\n          // server handle any authorization needs; for instance, TLS may\n          // trigger the browser to use a client certificate, or a 401 Not\n          // Authorized response may make the browser send a Kerberos ticket\n          // using the SPNEGO method.\n          this.impliedauth();\n        }\n      }\n    }.bind(this), function (err) {\n      clearTimeout(discoveryTimeout);\n      this._emit('error', new RemoteStorage.DiscoveryError(\"No storage information found for this user address.\"));\n    }.bind(this));\n  },\n\n  /**\n   * Method: disconnect\n   *\n   * \"Disconnect\" from remotestorage server to terminate current session.\n   * This method clears all stored settings and deletes the entire local\n   * cache.\n   */\n  disconnect: function disconnect() {\n    if (this.remote) {\n      this.remote.configure({\n        userAddress: null,\n        href: null,\n        storageApi: null,\n        token: null,\n        properties: null\n      });\n    }\n    this._setGPD({\n      get: this._pendingGPD('get'),\n      put: this._pendingGPD('put'),\n      delete: this._pendingGPD('delete')\n    });\n    var n = this._cleanups.length,\n        i = 0;\n\n    var oneDone = function () {\n      i++;\n      if (i >= n) {\n        this._init();\n        _log('Done cleaning up, emitting disconnected and disconnect events');\n        this._emit('disconnected');\n      }\n    }.bind(this);\n\n    if (n > 0) {\n      this._cleanups.forEach(function (cleanup) {\n        var cleanupResult = cleanup(this);\n        if ((typeof cleanupResult === 'undefined' ? 'undefined' : _typeof(cleanupResult)) === 'object' && typeof cleanupResult.then === 'function') {\n          cleanupResult.then(oneDone);\n        } else {\n          oneDone();\n        }\n      }.bind(this));\n    } else {\n      oneDone();\n    }\n  },\n\n  setBackend: function setBackend(what) {\n    this.backend = what;\n    if (hasLocalStorage) {\n      if (what) {\n        localStorage.setItem('remotestorage:backend', what);\n      } else {\n        localStorage.removeItem('remotestorage:backend');\n      }\n    }\n  },\n\n  /**\n   * Method: onChange\n   *\n   * Add a \"change\" event handler to the given path. Whenever a \"change\"\n   * happens (as determined by the backend, such as e.g.\n   * <RemoteStorage.IndexedDB>) and the affected path is equal to or below\n   * the given 'path', the given handler is called.\n   *\n   * You should usually not use this method directly, but instead use the\n   * \"change\" events provided by <RemoteStorage.BaseClient>.\n   *\n   * Parameters:\n   *   path    - Absolute path to attach handler to.\n   *   handler - Handler function.\n   */\n  onChange: function onChange(path, handler) {\n    if (!this._pathHandlers.change[path]) {\n      this._pathHandlers.change[path] = [];\n    }\n    this._pathHandlers.change[path].push(handler);\n  },\n\n  /**\n   * Method: enableLog\n   *\n   * Enable remoteStorage logging.\n   */\n  enableLog: function enableLog() {\n    config.logging = true;\n  },\n\n  /**\n   * Method: disableLog\n   *\n   * Disable remoteStorage logging\n   */\n  disableLog: function disableLog() {\n    config.logging = false;\n  },\n\n  /**\n   * Method: log\n   *\n   * The same as <RemoteStorage.log>.\n   */\n  log: function log() {\n    _log.apply(RemoteStorage, arguments);\n  },\n\n  /**\n   * Method: setApiKeys (experimental)\n   *\n   * Set API keys for (currently) GoogleDrive and/or Dropbox backend support.\n   * See also the 'backends' example in the starter-kit. Note that support for\n   * both these backends is still experimental.\n   *\n   * Parameters:\n   *   type - string, either 'googledrive' or 'dropbox'\n   *   keys - object, with one string field; 'clientId' for GoogleDrive, or\n   *          'appKey' for Dropbox.\n   *\n   */\n  setApiKeys: function setApiKeys(type, keys) {\n    if (keys) {\n      this.apiKeys[type] = keys;\n      if (type === 'dropbox' && (typeof this.dropbox === 'undefined' || this.dropbox.clientId !== keys.appKey)) {\n        Dropbox._rs_init(this);\n      } else if (type === 'googledrive' && (typeof this.googledrive === 'undefined' || this.googledrive.clientId !== keys.clientId)) {\n        GoogleDrive._rs_init(this);\n      }\n    } else {\n      delete this.apiKeys[type];\n    }\n    if (hasLocalStorage) {\n      localStorage.setItem('remotestorage:api-keys', JSON.stringify(this.apiKeys));\n    }\n  },\n\n  /**\n   * Method: setCordovaRedirectUri\n   *\n   * Set redirect URI to be used for the OAuth redirect within the\n   * in-app-browser window in Cordova apps.\n   *\n   * Parameters:\n   *   uri - string, valid HTTP(S) URI\n   */\n  setCordovaRedirectUri: function setCordovaRedirectUri(uri) {\n    if (typeof uri !== 'string' || !uri.match(/http(s)?\\:\\/\\//)) {\n      throw new Error(\"Cordova redirect URI must be a URI string\");\n    }\n    config.cordovaRedirectUri = uri;\n  },\n\n  /* FEATURES INITIALIZATION */\n  _init: Features.loadFeatures,\n  features: Features.features,\n  loadFeature: Features.loadFeature,\n  featureSupported: Features.featureSupported,\n  featureDone: Features.featureDone,\n  featuresDone: Features.featuresDone,\n  featuresLoaded: Features.featuresLoaded,\n  featureInitialized: Features.featureInitialized,\n  featureFailed: Features.featureFailed,\n  hasFeature: Features.hasFeature,\n  _setCachingModule: Features._setCachingModule,\n  _collectCleanupFunctions: Features._collectCleanupFunctions,\n  _fireReady: Features._fireReady,\n  initFeature: Features.initFeature,\n\n  /**\n   * TOFIX: needs some explanation on this -les\n   ** GET/PUT/DELETE INTERFACE HELPERS\n   **/\n\n  _setGPD: function _setGPD(impl, context) {\n    function wrap(func) {\n      return function () {\n        return func.apply(context, arguments).then(emitUnauthorized.bind(this));\n      };\n    }\n    this.get = wrap(impl.get);\n    this.put = wrap(impl.put);\n    this.delete = wrap(impl.delete);\n  },\n\n  _pendingGPD: function _pendingGPD(methodName) {\n    return function () {\n      var methodArguments = Array.prototype.slice.call(arguments);\n      return new Promise(function (resolve, reject) {\n        this._pending.push({\n          method: methodName,\n          args: methodArguments,\n          promise: {\n            resolve: resolve,\n            reject: reject\n          }\n        });\n      }.bind(this));\n    }.bind(this);\n  },\n\n  _processPending: function _processPending() {\n    this._pending.forEach(function (pending) {\n      try {\n        this[pending.method].apply(this, pending.args).then(pending.promise.resolve, pending.promise.reject);\n      } catch (e) {\n        pending.promise.reject(e);\n      }\n    }.bind(this));\n    this._pending = [];\n  },\n\n  /**\n   ** CHANGE EVENT HANDLING\n   **/\n  _bindChange: function _bindChange(object) {\n    object.on('change', this._dispatchEvent.bind(this, 'change'));\n  },\n\n  _dispatchEvent: function _dispatchEvent(eventName, event) {\n    var self = this;\n    Object.keys(this._pathHandlers[eventName]).forEach(function (path) {\n      var pl = path.length;\n      if (event.path.substr(0, pl) === path) {\n        self._pathHandlers[eventName][path].forEach(function (handler) {\n          var ev = {};\n          for (var key in event) {\n            ev[key] = event[key];\n          }\n          ev.relativePath = event.path.replace(new RegExp('^' + path), '');\n          try {\n            handler(ev);\n          } catch (e) {\n            console.error(\"'change' handler failed: \", e, e.stack);\n            self._emit('error', e);\n          }\n        });\n      }\n    });\n  },\n\n  scope: function scope(path) {\n    if (typeof path !== 'string') {\n      throw 'Argument \\'path\\' of baseClient.scope must be a string';\n    }\n\n    if (!this.access.checkPathPermission(path, 'r')) {\n      var escapedPath = path.replace(/(['\\\\])/g, '\\\\$1');\n      console.warn('WARNING: please call remoteStorage.access.claim(\\'' + escapedPath + '\\', \\'r\\') (read only) or remoteStorage.access.claim(\\'' + escapedPath + '\\', \\'rw\\') (read/write) first');\n    }\n    return new BaseClient(this, path);\n  },\n\n  /**\n   * Method: getSyncInterval\n   *\n   * Get the value of the sync interval when application is in the foreground\n   *\n   * Returns a number of milliseconds\n   *\n  //  */\n  getSyncInterval: function getSyncInterval() {\n    return config.syncInterval;\n  },\n\n  /**\n   * Method: setSyncInterval\n   *\n   * Set the value of the sync interval when application is in the foreground\n   *\n   * Parameters:\n   *   interval - sync interval in milliseconds\n   *\n   */\n  setSyncInterval: function setSyncInterval(interval) {\n    if (!isValidInterval(interval)) {\n      throw interval + \" is not a valid sync interval\";\n    }\n    var oldValue = config.syncInterval;\n    config.syncInterval = parseInt(interval, 10);\n    this._emit('sync-interval-change', { oldValue: oldValue, newValue: interval });\n  },\n\n  /**\n   * Method: getBackgroundSyncInterval\n   *\n   * Get the value of the sync interval when application is in the background\n   *\n   * Returns a number of milliseconds\n   *\n   */\n  getBackgroundSyncInterval: function getBackgroundSyncInterval() {\n    return config.backgroundSyncInterval;\n  },\n\n  /**\n   * Method: setBackgroundSyncInterval\n   *\n   * Set the value of the sync interval when the application is in the background\n   *\n   * Parameters:\n   *   interval - sync interval in milliseconds\n   *\n   */\n  setBackgroundSyncInterval: function setBackgroundSyncInterval(interval) {\n    if (!isValidInterval(interval)) {\n      throw interval + \" is not a valid sync interval\";\n    }\n    var oldValue = config.backgroundSyncInterval;\n    config.backgroundSyncInterval = parseInt(interval, 10);\n    this._emit('sync-interval-change', { oldValue: oldValue, newValue: interval });\n  },\n\n  /**\n   * Method: getCurrentSyncInterval\n   *\n   * Get the value of the current sync interval\n   *\n   * Returns a number of milliseconds\n   *\n   */\n  getCurrentSyncInterval: function getCurrentSyncInterval() {\n    return config.isBackground ? config.backgroundSyncInterval : config.syncInterval;\n  },\n\n  syncCycle: function syncCycle() {\n    if (this.sync.stopped) {\n      return;\n    }\n\n    this.sync.on('done', function () {\n      _log('[Sync] Sync done. Setting timer to', this.getCurrentSyncInterval());\n      if (!this.sync.stopped) {\n        if (this._syncTimer) {\n          clearTimeout(this._syncTimer);\n        }\n        this._syncTimer = setTimeout(this.sync.sync.bind(this.sync), this.getCurrentSyncInterval());\n      }\n    }.bind(this));\n\n    this.sync.sync();\n  },\n\n  stopSync: function stopSync() {\n    if (this.sync) {\n      _log('[Sync] Stopping sync');\n      this.sync.stopped = true;\n    } else {\n      // TODO When is this ever the case and what is syncStopped for then?\n      _log('[Sync] Will instantiate sync stopped');\n      this.syncStopped = true;\n    }\n  },\n\n  startSync: function startSync() {\n    if (!config.cache) {\n      return;\n    }\n    this.sync.stopped = false;\n    this.syncStopped = false;\n    this.sync.sync();\n  }\n\n};\n\n/**\n* Check if interval is valid: numeric and between 1000ms and 3600000ms\n*\n*/\nfunction isValidInterval(interval) {\n  return typeof interval === 'number' && interval > 1000 && interval < 3600000;\n}\n\nRemoteStorage.util = util;\n// RemoteStorage.defineModule = modules.defineModule;\n\n/**\n * Property: connected\n *\n * Boolean property indicating if remoteStorage is currently connected.\n */\nObject.defineProperty(RemoteStorage.prototype, 'connected', {\n  get: function get() {\n    return this.remote.connected;\n  }\n});\n\n/**\n * Property: access\n *\n * Tracking claimed access scopes. A <RemoteStorage.Access> instance.\n*/\nvar Access = __webpack_require__(10);\nObject.defineProperty(RemoteStorage.prototype, 'access', {\n  get: function get() {\n    var access = new Access();\n    Object.defineProperty(this, 'access', {\n      value: access\n    });\n    return access;\n  },\n  configurable: true\n});\n\n// TODO clean up/harmonize how modules are loaded and/or document this architecture properly\n//\n// At this point the remoteStorage object has not been created yet.\n// Only its prototype exists so far, so we define a self-constructing\n// property on there:\n/**\n *\n * Property: caching\n *\n * Caching settings. A <RemoteStorage.Caching> instance.\n *\n * Not available in no-cache builds.\n *\n */\n\n// TOFIX was in rs_init of Caching but don't want to require RemoteStorage from there.\nvar Caching = __webpack_require__(11);\nObject.defineProperty(RemoteStorage.prototype, 'caching', {\n  configurable: true,\n  get: function get() {\n    var caching = new Caching();\n    Object.defineProperty(this, 'caching', {\n      value: caching\n    });\n    return caching;\n  }\n});\n\n/*\n* Property: remote\n*\n* Access to the remote backend used. Usually a <RemoteStorage.WireClient>.\n*\n*\n* Property: local\n*\n* Access to the local caching backend used. Usually either a\n* <RemoteStorage.IndexedDB> or <RemoteStorage.LocalStorage> instance.\n*\n* Not available in no-cache builds.\n*/\n\nmodule.exports = RemoteStorage;\n__webpack_require__(21);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVtb3Rlc3RvcmFnZS5qcz9hMTc4Il0sIm5hbWVzIjpbImhhc0xvY2FsU3RvcmFnZSIsImVtaXRVbmF1dGhvcml6ZWQiLCJyIiwic3RhdHVzQ29kZSIsIl9lbWl0IiwiQXV0aG9yaXplIiwiVW5hdXRob3JpemVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ1dGlsIiwicmVxdWlyZSIsIkRyb3Bib3giLCJHb29nbGVEcml2ZSIsIkRpc2NvdmVyIiwiQmFzZUNsaWVudCIsImNvbmZpZyIsIlN5bmMiLCJsb2ciLCJGZWF0dXJlcyIsImdsb2JhbENvbnRleHQiLCJnZXRHbG9iYWxDb250ZXh0IiwiZXZlbnRIYW5kbGluZyIsIlJlbW90ZVN0b3JhZ2UiLCJjZmciLCJleHRlbmQiLCJfcGVuZGluZyIsIl9zZXRHUEQiLCJnZXQiLCJfcGVuZGluZ0dQRCIsInB1dCIsImRlbGV0ZSIsIl9jbGVhbnVwcyIsIl9wYXRoSGFuZGxlcnMiLCJjaGFuZ2UiLCJhcGlLZXlzIiwibG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImV4YyIsInNldEJhY2tlbmQiLCJvcmlnT24iLCJvbiIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJyZW1vdGUiLCJjb25uZWN0ZWQiLCJfYWxsTG9hZGVkIiwic2V0VGltZW91dCIsImNhbGwiLCJfaW5pdCIsImZpcmVJbml0aWFsIiwibG9jYWwiLCJiaW5kIiwiU3luY0Vycm9yIiwiRGlzY292ZXJ5RXJyb3IiLCJwcm90b3R5cGUiLCJhdXRob3JpemUiLCJhdXRoVVJMIiwiY29yZG92YVJlZGlyZWN0VXJpIiwiYWNjZXNzIiwic2V0U3RvcmFnZVR5cGUiLCJzdG9yYWdlVHlwZSIsInNjb3BlIiwic2NvcGVQYXJhbWV0ZXIiLCJyZWRpcmVjdFVyaSIsImNvcmRvdmEiLCJTdHJpbmciLCJnZXRMb2NhdGlvbiIsImNsaWVudElkIiwibWF0Y2giLCJpbXBsaWVkYXV0aCIsInN0b3JhZ2VBcGkiLCJkb2N1bWVudCIsImxvY2F0aW9uIiwiY29uZmlndXJlIiwidG9rZW4iLCJJTVBMSUVEX0ZBS0VfVE9LRU4iLCJjb25uZWN0IiwidXNlckFkZHJlc3MiLCJpbmRleE9mIiwiSW5BcHBCcm93c2VyIiwiZGlzY292ZXJ5VGltZW91dCIsInRoZW4iLCJpbmZvIiwiY2xlYXJUaW1lb3V0IiwiRXJyb3IiLCJlcnIiLCJkaXNjb25uZWN0IiwiaHJlZiIsInByb3BlcnRpZXMiLCJuIiwibGVuZ3RoIiwiaSIsIm9uZURvbmUiLCJmb3JFYWNoIiwiY2xlYW51cCIsImNsZWFudXBSZXN1bHQiLCJ3aGF0IiwiYmFja2VuZCIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwib25DaGFuZ2UiLCJwYXRoIiwicHVzaCIsImVuYWJsZUxvZyIsImxvZ2dpbmciLCJkaXNhYmxlTG9nIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzZXRBcGlLZXlzIiwidHlwZSIsImtleXMiLCJkcm9wYm94IiwiYXBwS2V5IiwiX3JzX2luaXQiLCJnb29nbGVkcml2ZSIsInN0cmluZ2lmeSIsInNldENvcmRvdmFSZWRpcmVjdFVyaSIsInVyaSIsImxvYWRGZWF0dXJlcyIsImZlYXR1cmVzIiwibG9hZEZlYXR1cmUiLCJmZWF0dXJlU3VwcG9ydGVkIiwiZmVhdHVyZURvbmUiLCJmZWF0dXJlc0RvbmUiLCJmZWF0dXJlc0xvYWRlZCIsImZlYXR1cmVJbml0aWFsaXplZCIsImZlYXR1cmVGYWlsZWQiLCJoYXNGZWF0dXJlIiwiX3NldENhY2hpbmdNb2R1bGUiLCJfY29sbGVjdENsZWFudXBGdW5jdGlvbnMiLCJfZmlyZVJlYWR5IiwiaW5pdEZlYXR1cmUiLCJpbXBsIiwiY29udGV4dCIsIndyYXAiLCJmdW5jIiwibWV0aG9kTmFtZSIsIm1ldGhvZEFyZ3VtZW50cyIsIkFycmF5Iiwic2xpY2UiLCJyZWplY3QiLCJtZXRob2QiLCJhcmdzIiwicHJvbWlzZSIsIl9wcm9jZXNzUGVuZGluZyIsInBlbmRpbmciLCJlIiwiX2JpbmRDaGFuZ2UiLCJvYmplY3QiLCJfZGlzcGF0Y2hFdmVudCIsImV2ZW50Iiwic2VsZiIsIk9iamVjdCIsInBsIiwic3Vic3RyIiwiZXYiLCJrZXkiLCJyZWxhdGl2ZVBhdGgiLCJyZXBsYWNlIiwiUmVnRXhwIiwiY29uc29sZSIsImVycm9yIiwic3RhY2siLCJjaGVja1BhdGhQZXJtaXNzaW9uIiwiZXNjYXBlZFBhdGgiLCJ3YXJuIiwiZ2V0U3luY0ludGVydmFsIiwic3luY0ludGVydmFsIiwic2V0U3luY0ludGVydmFsIiwiaW50ZXJ2YWwiLCJpc1ZhbGlkSW50ZXJ2YWwiLCJvbGRWYWx1ZSIsInBhcnNlSW50IiwibmV3VmFsdWUiLCJnZXRCYWNrZ3JvdW5kU3luY0ludGVydmFsIiwiYmFja2dyb3VuZFN5bmNJbnRlcnZhbCIsInNldEJhY2tncm91bmRTeW5jSW50ZXJ2YWwiLCJnZXRDdXJyZW50U3luY0ludGVydmFsIiwiaXNCYWNrZ3JvdW5kIiwic3luY0N5Y2xlIiwic3luYyIsInN0b3BwZWQiLCJfc3luY1RpbWVyIiwic3RvcFN5bmMiLCJzeW5jU3RvcHBlZCIsInN0YXJ0U3luYyIsImNhY2hlIiwiZGVmaW5lUHJvcGVydHkiLCJBY2Nlc3MiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIkNhY2hpbmciLCJjYWNoaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFDRSxJQUFJQSxlQUFKOztBQUVBLFNBQVNDLGdCQUFULENBQTBCQyxDQUExQixFQUE2QjtBQUMzQixNQUFJQSxFQUFFQyxVQUFGLEtBQWlCLEdBQWpCLElBQXlCRCxFQUFFQyxVQUFGLEtBQWlCLEdBQTlDLEVBQW1EO0FBQ2pELFNBQUtDLEtBQUwsQ0FBVyxPQUFYLEVBQW9CLElBQUlDLFVBQVVDLFlBQWQsRUFBcEI7QUFDRDtBQUNELFNBQU9DLFFBQVFDLE9BQVIsQ0FBZ0JOLENBQWhCLENBQVA7QUFDRDs7QUFFRCxJQUFNTyxPQUFPLG1CQUFBQyxDQUFRLENBQVIsQ0FBYjtBQUNBLElBQU1DLFVB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O0FBV0M7Ozs7Ozs7Ozs7Ozs7O0FBZUhDLE9BQU9DLE9BQVAsR0FBaUIvSyxhQUFqQjtBQUNBLG1CQUFBWixDQUFRLEVBQVIiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4gIHZhciBoYXNMb2NhbFN0b3JhZ2U7XG5cbiAgZnVuY3Rpb24gZW1pdFVuYXV0aG9yaXplZChyKSB7XG4gICAgaWYgKHIuc3RhdHVzQ29kZSA9PT0gNDAzICB8fCByLnN0YXR1c0NvZGUgPT09IDQwMSkge1xuICAgICAgdGhpcy5fZW1pdCgnZXJyb3InLCBuZXcgQXV0aG9yaXplLlVuYXV0aG9yaXplZCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyKTtcbiAgfVxuXG4gIGNvbnN0IHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbiAgY29uc3QgRHJvcGJveCA9IHJlcXVpcmUoJy4vZHJvcGJveCcpO1xuICBjb25zdCBHb29nbGVEcml2ZSA9IHJlcXVpcmUoJy4vZ29vZ2xlZHJpdmUnKTtcbiAgY29uc3QgRGlzY292ZXIgPSByZXF1aXJlKCcuL2Rpc2NvdmVyJyk7XG4gIGNvbnN0IEJhc2VDbGllbnQgPSByZXF1aXJlKCcuL2Jhc2VjbGllbnQnKTtcbiAgY29uc3QgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbiAgY29uc3QgQXV0aG9yaXplID0gcmVxdWlyZSgnLi9hdXRob3JpemUnKTtcbiAgY29uc3QgU3luYyA9IHJlcXVpcmUoJy4vc3luYycpO1xuICBjb25zdCBsb2cgPSByZXF1aXJlKCcuL2xvZycpO1xuICBjb25zdCBGZWF0dXJlcyA9IHJlcXVpcmUoJy4vZmVhdHVyZXMnKTtcbiAgY29uc3QgZ2xvYmFsQ29udGV4dCA9IHV0aWwuZ2V0R2xvYmFsQ29udGV4dCgpO1xuICBjb25zdCBldmVudEhhbmRsaW5nID0gcmVxdWlyZSgnLi9ldmVudGhhbmRsaW5nJyk7XG5cblxuICAvKipcbiAgICogQ2xhc3M6IFJlbW90ZVN0b3JhZ2VcbiAgICpcbiAgICogVE9ETyBuZWVkcyBwcm9wZXIgaW50cm9kdWN0aW9uIGFuZCBsaW5rcyB0byByZWxldmFudCBjbGFzc2VzIGV0Y1xuICAgKlxuICAgKiBDb25zdHJ1Y3RvciBmb3IgcmVtb3RlU3RvcmFnZSBvYmplY3QuXG4gICAqXG4gICAqIFRoaXMgY2xhc3MgcHJpbWFyaWx5IGNvbnRhaW5zIGZlYXR1cmUgZGV0ZWN0aW9uIGNvZGUgYW5kIGNvbnZlbmllbmNlIEFQSS5cbiAgICpcbiAgICogRGVwZW5kaW5nIG9uIHdoaWNoIGZlYXR1cmVzIGFyZSBidWlsdCBpbiwgaXQgY29udGFpbnMgZGlmZmVyZW50IGF0dHJpYnV0ZXMgYW5kXG4gICAqIGZ1bmN0aW9ucy4gU2VlIHRoZSBpbmRpdmlkdWFsIGZlYXR1cmVzIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiAgKHN0YXJ0IGNvZGUpXG4gICAqICB2YXIgcmVtb3RlU3RvcmFnZSA9IG5ldyBSZW1vdGVTdG9yYWdlKHtcbiAgICogICAgbG9nZ2luZzogdHJ1ZSwgIC8vIGRlZmF1bHRzIHRvIGZhbHNlXG4gICAqICAgIGNvcmRvdmFSZWRpcmVjdFVyaTogJ2h0dHBzOi8vYXBwLm15Z3JlYXRhcHAuY29tJyAvLyBkZWZhdWx0cyB0byB1bmRlZmluZWRcbiAgICogIH0pO1xuICAgKiAgKGVuZCBjb2RlKVxuICAgKi9cbiAgdmFyIFJlbW90ZVN0b3JhZ2UgPSBmdW5jdGlvbiAoY2ZnKSB7XG4gICAgLyoqXG4gICAgICogRXZlbnQ6IHJlYWR5XG4gICAgICpcbiAgICAgKiBGaXJlZCB3aGVuIHJlYWR5XG4gICAgICoqL1xuICAgIC8qKlxuICAgICAqIEV2ZW50OiBub3QtY29ubmVjdGVkXG4gICAgICpcbiAgICAgKiBGaXJlZCB3aGVuIHJlYWR5LCBidXQgbm8gc3RvcmFnZSBjb25uZWN0ZWQgKFwiYW5vbnltb3VzIG1vZGVcIilcbiAgICAgKiovXG4gICAgLyoqXG4gICAgICogRXZlbnQ6IGNvbm5lY3RlZFxuICAgICAqXG4gICAgICogRmlyZWQgd2hlbiBhIHJlbW90ZSBzdG9yYWdlIGhhcyBiZWVuIGNvbm5lY3RlZFxuICAgICAqKi9cbiAgICAvKipcbiAgICAgKiBFdmVudDogZGlzY29ubmVjdGVkXG4gICAgICpcbiAgICAgKiBGaXJlZCBhZnRlciBkaXNjb25uZWN0XG4gICAgICoqL1xuICAgIC8qKlxuICAgICAqIEV2ZW50OiBlcnJvclxuICAgICAqXG4gICAgICogRmlyZWQgd2hlbiBhbiBlcnJvciBvY2N1cnNcbiAgICAgKlxuICAgICAqIEFyZ3VtZW50czpcbiAgICAgKiB0aGUgZXJyb3JcbiAgICAgKiovXG4gICAgLyoqXG4gICAgICogRXZlbnQ6IGZlYXR1cmVzLWxvYWRlZFxuICAgICAqXG4gICAgICogRmlyZWQgd2hlbiBhbGwgZmVhdHVyZXMgYXJlIGxvYWRlZFxuICAgICAqKi9cbiAgICAvKipcbiAgICAgKiBFdmVudDogY29ubmVjdGluZ1xuICAgICAqXG4gICAgICogRmlyZWQgYmVmb3JlIHdlYmZpbmdlciBsb29rdXBcbiAgICAgKiovXG4gICAgLyoqXG4gICAgICogRXZlbnQ6IGF1dGhpbmdcbiAgICAgKlxuICAgICAqIEZpcmVkIGJlZm9yZSByZWRpcmVjdGluZyB0byB0aGUgYXV0aGluZyBzZXJ2ZXJcbiAgICAgKiovXG4gICAgLyoqXG4gICAgICogRXZlbnQ6IHdpcmUtYnVzeVxuICAgICAqXG4gICAgICogRmlyZWQgd2hlbiBhIHdpcmUgcmVxdWVzdCBzdGFydHNcbiAgICAgKiovXG4gICAgLyoqXG4gICAgICogRXZlbnQ6IHdpcmUtZG9uZVxuICAgICAqXG4gICAgICogRmlyZWQgd2hlbiBhIHdpcmUgcmVxdWVzdCBjb21wbGV0ZXNcbiAgICAgKiovXG4gICAgLyoqXG4gICAgICogRXZlbnQ6IG5ldHdvcmstb2ZmbGluZVxuICAgICAqXG4gICAgICogRmlyZWQgb25jZSB3aGVuIGEgd2lyZSByZXF1ZXN0IGZhaWxzIGZvciB0aGUgZmlyc3QgdGltZSwgYW5kXG4gICAgICogYHJlbW90ZS5vbmxpbmVgIGlzIHNldCB0byBmYWxzZVxuICAgICAqKi9cbiAgICAvKipcbiAgICAgKiBFdmVudDogbmV0d29yay1vbmxpbmVcbiAgICAgKlxuICAgICAqIEZpcmVkIG9uY2Ugd2hlbiBhIHdpcmUgcmVxdWVzdCBzdWNjZWVkcyBmb3IgdGhlIGZpcnN0IHRpbWUgYWZ0ZXIgYVxuICAgICAqIGZhaWxlZCBvbmUsIGFuZCBgcmVtb3RlLm9ubGluZWAgaXMgc2V0IGJhY2sgdG8gdHJ1ZVxuICAgICAqKi9cblxuICAgIC8vIEluaXRpYWwgY29uZmlndXJhdGlvbiBwcm9wZXJ0eSBzZXR0aW5ncy5cbiAgICBpZiAodHlwZW9mIGNmZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHV0aWwuZXh0ZW5kKGNvbmZpZywgY2ZnKTtcbiAgICB9XG5cbiAgICBldmVudEhhbmRsaW5nKFxuICAgICAgdGhpcywgJ3JlYWR5JywgJ2Nvbm5lY3RlZCcsICdkaXNjb25uZWN0ZWQnLCAnbm90LWNvbm5lY3RlZCcsICdjb25mbGljdCcsXG4gICAgICAgICAgICAnZXJyb3InLCAnZmVhdHVyZXMtbG9hZGVkJywgJ2Nvbm5lY3RpbmcnLCAnYXV0aGluZycsXG4gICAgICAgICAgICAnc3luYy1pbnRlcnZhbC1jaGFuZ2UnLCAnd2lyZS1idXN5JywgJ3dpcmUtZG9uZScsXG4gICAgICAgICAgICAnbmV0d29yay1vZmZsaW5lJywgJ25ldHdvcmstb25saW5lJ1xuICAgICk7XG5cbiAgICAvLyBwZW5kaW5nIGdldC9wdXQvZGVsZXRlIGNhbGxzLlxuICAgIHRoaXMuX3BlbmRpbmcgPSBbXTtcblxuICAgIHRoaXMuX3NldEdQRCh7XG4gICAgICBnZXQ6IHRoaXMuX3BlbmRpbmdHUEQoJ2dldCcpLFxuICAgICAgcHV0OiB0aGlzLl9wZW5kaW5nR1BEKCdwdXQnKSxcbiAgICAgIGRlbGV0ZTogdGhpcy5fcGVuZGluZ0dQRCgnZGVsZXRlJylcbiAgICB9KTtcblxuICAgIHRoaXMuX2NsZWFudXBzID0gW107XG5cbiAgICB0aGlzLl9wYXRoSGFuZGxlcnMgPSB7IGNoYW5nZToge30gfTtcblxuICAgIHRoaXMuYXBpS2V5cyA9IHt9O1xuXG4gICAgaGFzTG9jYWxTdG9yYWdlID0gdXRpbC5sb2NhbFN0b3JhZ2VBdmFpbGFibGUoKTtcblxuICAgIGlmIChoYXNMb2NhbFN0b3JhZ2UpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuYXBpS2V5cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3JlbW90ZXN0b3JhZ2U6YXBpLWtleXMnKSkgfHwge307XG4gICAgICB9IGNhdGNoKGV4Yykge1xuICAgICAgICAvLyBpZ25vcmVkXG4gICAgICB9XG4gICAgICB0aGlzLnNldEJhY2tlbmQobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3JlbW90ZXN0b3JhZ2U6YmFja2VuZCcpIHx8ICdyZW1vdGVzdG9yYWdlJyk7XG4gICAgfVxuXG4gICAgdmFyIG9yaWdPbiA9IHRoaXMub247XG5cbiAgICB0aGlzLm9uID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ3JlYWR5JyAmJiB0aGlzLnJlbW90ZSAmJiB0aGlzLnJlbW90ZS5jb25uZWN0ZWQgJiYgdGhpcy5fYWxsTG9hZGVkKSB7XG4gICAgICAgIHNldFRpbWVvdXQoaGFuZGxlciwgMCk7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50TmFtZSA9PT0gJ2ZlYXR1cmVzLWxvYWRlZCcgJiYgdGhpcy5fYWxsTG9hZGVkKSB7XG4gICAgICAgIHNldFRpbWVvdXQoaGFuZGxlciwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ09uLmNhbGwodGhpcywgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9O1xuXG4gICAgLy8gbG9hZCBhbGwgZmVhdHVyZXMgYW5kIGVtaXQgYHJlYWR5YFxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIHRoaXMuZmlyZUluaXRpYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5sb2NhbCkge1xuICAgICAgICBzZXRUaW1lb3V0KHRoaXMubG9jYWwuZmlyZUluaXRpYWwuYmluZCh0aGlzLmxvY2FsKSwgMCk7XG4gICAgICB9XG4gICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5vbigncmVhZHknLCB0aGlzLmZpcmVJbml0aWFsLmJpbmQodGhpcykpO1xuICB9O1xuXG5cbiAgLy8gVE9GSVg6IEluc3RlYWQgb2YgZG9pbmcgdGhpcywgd291bGQgYmUgYmV0dGVyIHRvIG9ubHkgXG4gIC8vIGV4cG9ydCBzZXRBdXRoVVJMIC8gZ2V0QXV0aFVSTCBmcm9tIFJlbW90ZVN0b3JhZ2UgcHJvdG90eXBlXG4gIFJlbW90ZVN0b3JhZ2UuQXV0aG9yaXplID0gQXV0aG9yaXplO1xuXG4gIFJlbW90ZVN0b3JhZ2UuU3luY0Vycm9yID0gU3luYy5TeW5jRXJyb3I7XG4gIFJlbW90ZVN0b3JhZ2UuVW5hdXRob3JpemVkID0gQXV0aG9yaXplLlVuYXV0aG9yaXplZDtcbiAgUmVtb3RlU3RvcmFnZS5EaXNjb3ZlcnlFcnJvciA9IERpc2NvdmVyLkRpc2NvdmVyeUVycm9yO1xuXG4gXG4gIFJlbW90ZVN0b3JhZ2UucHJvdG90eXBlID0ge1xuICAgIGF1dGhvcml6ZTogZnVuY3Rpb24gYXV0aG9yaXplKGF1dGhVUkwsIGNvcmRvdmFSZWRpcmVjdFVyaSkge1xuICAgICAgdGhpcy5hY2Nlc3Muc2V0U3RvcmFnZVR5cGUodGhpcy5yZW1vdGUuc3RvcmFnZVR5cGUpO1xuICAgICAgdmFyIHNjb3BlID0gdGhpcy5hY2Nlc3Muc2NvcGVQYXJhbWV0ZXI7XG5cbiAgICAgIHZhciByZWRpcmVjdFVyaSA9IGdsb2JhbENvbnRleHQuY29yZG92YSA/XG4gICAgICAgIGNvcmRvdmFSZWRpcmVjdFVyaSA6XG4gICAgICAgIFN0cmluZyhBdXRob3JpemUuZ2V0TG9jYXRpb24oKSk7XG5cbiAgICAgIHZhciBjbGllbnRJZCA9IHJlZGlyZWN0VXJpLm1hdGNoKC9eKGh0dHBzPzpcXC9cXC9bXlxcL10rKS8pWzBdO1xuXG4gICAgICBBdXRob3JpemUodGhpcywgYXV0aFVSTCwgc2NvcGUsIHJlZGlyZWN0VXJpLCBjbGllbnRJZCk7XG4gICAgfSxcbiAgXG5cbiAgICBpbXBsaWVkYXV0aDogZnVuY3Rpb24gKHN0b3JhZ2VBcGksIHJlZGlyZWN0VXJpKSB7XG4gICAgICBzdG9yYWdlQXBpID0gdGhpcy5yZW1vdGUuc3RvcmFnZUFwaTtcbiAgICAgIHJlZGlyZWN0VXJpID0gIFN0cmluZyhkb2N1bWVudC5sb2NhdGlvbik7XG5cbiAgICAgIGxvZygnSW1wbGllZEF1dGggcHJvY2VlZGluZyBkdWUgdG8gYWJzZW50IGF1dGhVUkw7IHN0b3JhZ2VBcGkgPSAnICsgc3RvcmFnZUFwaSArICcgcmVkaXJlY3RVcmkgPSAnICsgcmVkaXJlY3RVcmkpO1xuICAgICAgLy8gU2V0IGEgZml4ZWQgYWNjZXNzIHRva2VuLCBzaWduYWxsaW5nIHRvIG5vdCBzZW5kIGl0IGFzIEJlYXJlclxuICAgICAgdGhpcy5yZW1vdGUuY29uZmlndXJlKHtcbiAgICAgICAgdG9rZW46IEF1dGhvcml6ZS5JTVBMSUVEX0ZBS0VfVE9LRU5cbiAgICAgIH0pO1xuICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSByZWRpcmVjdFVyaTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5OiByZW1vdGVcbiAgICAgKlxuICAgICAqIFByb3BlcnRpZXM6XG4gICAgICpcbiAgICAgKiAgIGNvbm5lY3RlZCAgIC0gQm9vbGVhbiwgd2hldGhlciBvciBub3QgYSByZW1vdGUgc3RvcmUgaXMgY29ubmVjdGVkXG4gICAgICogICBvbmxpbmUgICAgICAtIEJvb2xlYW4sIHdoZXRoZXIgbGFzdCBzeW5jIGFjdGlvbiB3YXMgc3VjY2Vzc2Z1bCBvciBub3RcbiAgICAgKiAgIHVzZXJBZGRyZXNzIC0gU3RyaW5nLCB0aGUgdXNlciBhZGRyZXNzIG9mIHRoZSBjb25uZWN0ZWQgdXNlclxuICAgICAqICAgcHJvcGVydGllcyAgLSBTdHJpbmcsIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBXZWJGaW5nZXIgbGlua1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogTWV0aG9kOiBzY29wZVxuICAgICAqXG4gICAgICogUmV0dXJucyBhIEJhc2VDbGllbnQgd2l0aCBhIGNlcnRhaW4gc2NvcGUgKGJhc2UgcGF0aCkuIFBsZWFzZSB1c2UgdGhpcyBtZXRob2RcbiAgICAgKiBvbmx5IGZvciBkZWJ1Z2dpbmcsIGFuZCBhbHdheXMgdXNlIGRlZmluZU1vZHVsZSBpbnN0ZWFkLCB0byBnZXQgYWNjZXNzIHRvIGFcbiAgICAgKiBCYXNlQ2xpZW50IGZyb20gYSBtb2R1bGUgaW4gYW4gYXBwLlxuICAgICAqXG4gICAgICogUGFyYW1ldGVyczpcbiAgICAgKlxuICAgICAqICAgc2NvcGUgLSBBIHN0cmluZywgd2l0aCBhIGxlYWRpbmcgYW5kIGEgdHJhaWxpbmcgc2xhc2gsIHNwZWNpZnlpbmcgdGhlXG4gICAgICogICAgICAgICAgIGJhc2UgcGF0aCBvZiB0aGUgQmFzZUNsaWVudCB0aGF0IHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBDb2RlIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiAoc3RhcnQgY29kZSlcbiAgICAgKiByZW1vdGVTdG9yYWdlLnNjb3BlKCcvcGljdHVyZXMvJykuZ2V0TGlzdGluZygnJyk7XG4gICAgICogcmVtb3RlU3RvcmFnZS5zY29wZSgnL3B1YmxpYy9waWN0dXJlcy8nKS5nZXRMaXN0aW5nKCcnKTtcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogc3RhcnRTeW5jXG4gICAgICpcbiAgICAgKiBTdGFydCBzeW5jaHJvbml6YXRpb24gd2l0aCByZW1vdGUgc3RvcmFnZSwgZG93bmxvYWRpbmcgYW5kIHVwbG9hZGluZyBhbnlcbiAgICAgKiBjaGFuZ2VzIHdpdGhpbiB0aGUgY2FjaGVkIHBhdGhzLlxuICAgICAqXG4gICAgICogUGxlYXNlIGNvbnNpZGVyOiBsb2NhbCBjaGFuZ2VzIHdpbGwgYXR0ZW1wdCBzeW5jIGltbWVkaWF0ZWx5LCBhbmQgcmVtb3RlXG4gICAgICogY2hhbmdlcyBzaG91bGQgYWxzbyBiZSBzeW5jZWQgdGltZWx5IHdoZW4gdXNpbmcgbGlicmFyeSBkZWZhdWx0cy4gU29cbiAgICAgKiB0aGlzIGlzIG1vc3RseSB1c2VmdWwgZm9yIGxldHRpbmcgdXNlcnMgc3luYyBtYW51YWxseSwgd2hlbiBwcmVzc2luZyBhXG4gICAgICogc3luYyBidXR0b24gZm9yIGV4YW1wbGUuIFRoaXMgbWlnaHQgZmVlbCBzYWZlciB0byB0aGVtIHNvbWV0aW1lcywgZXNwLlxuICAgICAqIHdoZW4gc2hpZnRpbmcgYmV0d2VlbiBvZmZsaW5lIGFuZCBvbmxpbmUgYSBsb3QuXG4gICAgICovXG4gICAgIC8vIChzZWUgc3JjL3N5bmMuanMgZm9yIGltcGxlbWVudGF0aW9uKVxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kOiBjb25uZWN0XG4gICAgICpcbiAgICAgKiBDb25uZWN0IHRvIGEgcmVtb3RlU3RvcmFnZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBQYXJhbWV0ZXJzOlxuICAgICAqICAgdXNlckFkZHJlc3MgICAgICAgIC0gVGhlIHVzZXIgYWRkcmVzcyAodXNlckBob3N0KSB0byBjb25uZWN0IHRvLlxuICAgICAqICAgdG9rZW4gICAgICAgICAgICAgIC0gKG9wdGlvbmFsKSBBIGJlYXJlciB0b2tlbiBhY3F1aXJlZCBiZWZvcmVoYW5kXG4gICAgICpcbiAgICAgKiBEaXNjb3ZlcnMgdGhlIFdlYkZpbmdlciBwcm9maWxlIG9mIHRoZSBnaXZlbiB1c2VyIGFkZHJlc3MgYW5kIGluaXRpYXRlc1xuICAgICAqIHRoZSBPQXV0aCBkYW5jZS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG11c3QgYmUgY2FsbGVkICphZnRlciogYWxsIHJlcXVpcmVkIGFjY2VzcyBoYXMgYmVlbiBjbGFpbWVkLlxuICAgICAqIFdoZW4gdXNpbmcgdGhlIGNvbm5lY3Qgd2lkZ2V0LCBpdCB3aWxsIGNhbGwgdGhpcyBtZXRob2QgaXRzZWxmLlxuICAgICAqXG4gICAgICogU3BlY2lhbCBjYXNlczpcbiAgICAgKlxuICAgICAqIDEuIElmIGEgYmVhcmVyIHRva2VuIGlzIHN1cHBsaWVkIGFzIHNlY29uZCBhcmd1bWVudCwgdGhlIE9BdXRoIGRhbmNlXG4gICAgICogICAgd2lsbCBiZSBza2lwcGVkIGFuZCB0aGUgc3VwcGxpZWQgdG9rZW4gYmUgdXNlZCBpbnN0ZWFkLiBUaGlzIGlzXG4gICAgICogICAgdXNlZnVsIG91dHNpZGUgb2YgYnJvd3NlciBlbnZpcm9ubWVudHMsIHdoZXJlIHRoZSB0b2tlbiBoYXMgYmVlblxuICAgICAqICAgIGFjcXVpcmVkIGluIGEgZGlmZmVyZW50IHdheS5cbiAgICAgKlxuICAgICAqIDIuIElmIHRoZSBXZWJmaW5nZXIgcHJvZmlsZSBmb3IgdGhlIGdpdmVuIHVzZXIgYWRkcmVzcyBkb2Vzbid0IGNvbnRhaW5cbiAgICAgKiAgICBhbiBhdXRoIFVSTCwgdGhlIGxpYnJhcnkgd2lsbCBhc3N1bWUgdGhhdCBjbGllbnQgYW5kIHNlcnZlciBoYXZlXG4gICAgICogICAgZXN0YWJsaXNoZWQgYXV0aG9yaXphdGlvbiBhbW9uZyB0aGVtc2VsdmVzLCB3aGljaCB3aWxsIG9taXQgYmVhcmVyXG4gICAgICogICAgdG9rZW5zIGluIGFsbCByZXF1ZXN0cyBsYXRlciBvbi4gVGhpcyBpcyB1c2VmdWwgZm9yIGV4YW1wbGUgd2hlbiB1c2luZ1xuICAgICAqICAgIEtlcmJlcm9zIGFuZCBzaW1pbGFyIHByb3RvY29scy5cbiAgICAgKi9cbiAgICBjb25uZWN0OiBmdW5jdGlvbiAodXNlckFkZHJlc3MsIHRva2VuKSB7XG4gICAgICB0aGlzLnNldEJhY2tlbmQoJ3JlbW90ZXN0b3JhZ2UnKTtcbiAgICAgIGlmICh1c2VyQWRkcmVzcy5pbmRleE9mKCdAJykgPCAwKSB7XG4gICAgICAgIHRoaXMuX2VtaXQoJ2Vycm9yJywgbmV3IFJlbW90ZVN0b3JhZ2UuRGlzY292ZXJ5RXJyb3IoXCJVc2VyIGFkZHJlc3MgZG9lc24ndCBjb250YWluIGFuIEAuXCIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2xvYmFsQ29udGV4dC5jb3Jkb3ZhKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLmNvcmRvdmFSZWRpcmVjdFVyaSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0KCdlcnJvcicsIG5ldyBSZW1vdGVTdG9yYWdlLkRpc2NvdmVyeUVycm9yKFwiUGxlYXNlIHN1cHBseSBhIGN1c3RvbSBIVFRQUyByZWRpcmVjdCBVUkkgZm9yIHlvdXIgQ29yZG92YSBhcHBcIikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWdsb2JhbENvbnRleHQuY29yZG92YS5JbkFwcEJyb3dzZXIpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0KCdlcnJvcicsIG5ldyBSZW1vdGVTdG9yYWdlLkRpc2NvdmVyeUVycm9yKFwiUGxlYXNlIGluY2x1ZGUgdGhlIEluQXBwQnJvd3NlciBDb3Jkb3ZhIHBsdWdpbiB0byBlbmFibGUgT0F1dGhcIikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbW90ZS5jb25maWd1cmUoe1xuICAgICAgICB1c2VyQWRkcmVzczogdXNlckFkZHJlc3NcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fZW1pdCgnY29ubmVjdGluZycpO1xuXG4gICAgICB2YXIgZGlzY292ZXJ5VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9lbWl0KCdlcnJvcicsIG5ldyBSZW1vdGVTdG9yYWdlLkRpc2NvdmVyeUVycm9yKFwiTm8gc3RvcmFnZSBpbmZvcm1hdGlvbiBmb3VuZCBmb3IgdGhpcyB1c2VyIGFkZHJlc3MuXCIpKTtcbiAgICAgIH0uYmluZCh0aGlzKSwgY29uZmlnLmRpc2NvdmVyeVRpbWVvdXQpO1xuXG4gICAgICBEaXNjb3Zlcih1c2VyQWRkcmVzcykudGhlbihmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAvLyBJbmZvIGNvbnRhaW5zIGZpZWxkczogaHJlZiwgc3RvcmFnZUFwaSwgYXV0aFVSTCAob3B0aW9uYWwpLCBwcm9wZXJ0aWVzXG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KGRpc2NvdmVyeVRpbWVvdXQpO1xuICAgICAgICB0aGlzLl9lbWl0KCdhdXRoaW5nJyk7XG4gICAgICAgIGluZm8udXNlckFkZHJlc3MgPSB1c2VyQWRkcmVzcztcbiAgICAgICAgdGhpcy5yZW1vdGUuY29uZmlndXJlKGluZm8pO1xuICAgICAgICBpZiAoISB0aGlzLnJlbW90ZS5jb25uZWN0ZWQpIHtcbiAgICAgICAgICBpZiAoaW5mby5hdXRoVVJMKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAvLyBOb3JtYWwgYXV0aG9yaXphdGlvbiBzdGVwOyB0aGUgZGVmYXVsdCB3YXkgdG8gY29ubmVjdFxuICAgICAgICAgICAgICB0aGlzLmF1dGhvcml6ZShpbmZvLmF1dGhVUkwsIGNvbmZpZy5jb3Jkb3ZhUmVkaXJlY3RVcmkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIC8vIFRva2VuIHN1cHBsaWVkIGRpcmVjdGx5IGJ5IGFwcC9kZXZlbG9wZXIvdXNlclxuICAgICAgICAgICAgICBsb2coJ1NraXBwaW5nIGF1dGhvcml6YXRpb24gc2VxdWVuY2UgYW5kIGNvbm5lY3Rpbmcgd2l0aCBrbm93biB0b2tlbicpO1xuICAgICAgICAgICAgICB0aGlzLnJlbW90ZS5jb25maWd1cmUoeyB0b2tlbjogdG9rZW4gfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdXBwbGllZCBiZWFyZXIgdG9rZW4gbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSW4gbGlldSBvZiBhbiBleGNwbGljaXQgYXV0aFVSTCwgYXNzdW1lIHRoYXQgdGhlIGJyb3dzZXIgYW5kXG4gICAgICAgICAgICAvLyBzZXJ2ZXIgaGFuZGxlIGFueSBhdXRob3JpemF0aW9uIG5lZWRzOyBmb3IgaW5zdGFuY2UsIFRMUyBtYXlcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgdGhlIGJyb3dzZXIgdG8gdXNlIGEgY2xpZW50IGNlcnRpZmljYXRlLCBvciBhIDQwMSBOb3RcbiAgICAgICAgICAgIC8vIEF1dGhvcml6ZWQgcmVzcG9uc2UgbWF5IG1ha2UgdGhlIGJyb3dzZXIgc2VuZCBhIEtlcmJlcm9zIHRpY2tldFxuICAgICAgICAgICAgLy8gdXNpbmcgdGhlIFNQTkVHTyBtZXRob2QuXG4gICAgICAgICAgICB0aGlzLmltcGxpZWRhdXRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcyksIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjbGVhclRpbWVvdXQoZGlzY292ZXJ5VGltZW91dCk7XG4gICAgICAgIHRoaXMuX2VtaXQoJ2Vycm9yJywgbmV3IFJlbW90ZVN0b3JhZ2UuRGlzY292ZXJ5RXJyb3IoXCJObyBzdG9yYWdlIGluZm9ybWF0aW9uIGZvdW5kIGZvciB0aGlzIHVzZXIgYWRkcmVzcy5cIikpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kOiBkaXNjb25uZWN0XG4gICAgICpcbiAgICAgKiBcIkRpc2Nvbm5lY3RcIiBmcm9tIHJlbW90ZXN0b3JhZ2Ugc2VydmVyIHRvIHRlcm1pbmF0ZSBjdXJyZW50IHNlc3Npb24uXG4gICAgICogVGhpcyBtZXRob2QgY2xlYXJzIGFsbCBzdG9yZWQgc2V0dGluZ3MgYW5kIGRlbGV0ZXMgdGhlIGVudGlyZSBsb2NhbFxuICAgICAqIGNhY2hlLlxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnJlbW90ZSkge1xuICAgICAgICB0aGlzLnJlbW90ZS5jb25maWd1cmUoe1xuICAgICAgICAgIHVzZXJBZGRyZXNzOiBudWxsLFxuICAgICAgICAgIGhyZWY6IG51bGwsXG4gICAgICAgICAgc3RvcmFnZUFwaTogbnVsbCxcbiAgICAgICAgICB0b2tlbjogbnVsbCxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0R1BEKHtcbiAgICAgICAgZ2V0OiB0aGlzLl9wZW5kaW5nR1BEKCdnZXQnKSxcbiAgICAgICAgcHV0OiB0aGlzLl9wZW5kaW5nR1BEKCdwdXQnKSxcbiAgICAgICAgZGVsZXRlOiB0aGlzLl9wZW5kaW5nR1BEKCdkZWxldGUnKVxuICAgICAgfSk7XG4gICAgICB2YXIgbiA9IHRoaXMuX2NsZWFudXBzLmxlbmd0aCwgaSA9IDA7XG5cbiAgICAgIHZhciBvbmVEb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpKys7XG4gICAgICAgIGlmIChpID49IG4pIHtcbiAgICAgICAgICB0aGlzLl9pbml0KCk7XG4gICAgICAgICAgbG9nKCdEb25lIGNsZWFuaW5nIHVwLCBlbWl0dGluZyBkaXNjb25uZWN0ZWQgYW5kIGRpc2Nvbm5lY3QgZXZlbnRzJyk7XG4gICAgICAgICAgdGhpcy5fZW1pdCgnZGlzY29ubmVjdGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgIHRoaXMuX2NsZWFudXBzLmZvckVhY2goZnVuY3Rpb24gKGNsZWFudXApIHtcbiAgICAgICAgICB2YXIgY2xlYW51cFJlc3VsdCA9IGNsZWFudXAodGhpcyk7XG4gICAgICAgICAgaWYgKHR5cGVvZihjbGVhbnVwUmVzdWx0KSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mKGNsZWFudXBSZXN1bHQudGhlbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNsZWFudXBSZXN1bHQudGhlbihvbmVEb25lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb25lRG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uZURvbmUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0QmFja2VuZDogZnVuY3Rpb24gKHdoYXQpIHtcbiAgICAgIHRoaXMuYmFja2VuZCA9IHdoYXQ7XG4gICAgICBpZiAoaGFzTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgIGlmICh3aGF0KSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3JlbW90ZXN0b3JhZ2U6YmFja2VuZCcsIHdoYXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdyZW1vdGVzdG9yYWdlOmJhY2tlbmQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2Q6IG9uQ2hhbmdlXG4gICAgICpcbiAgICAgKiBBZGQgYSBcImNoYW5nZVwiIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGdpdmVuIHBhdGguIFdoZW5ldmVyIGEgXCJjaGFuZ2VcIlxuICAgICAqIGhhcHBlbnMgKGFzIGRldGVybWluZWQgYnkgdGhlIGJhY2tlbmQsIHN1Y2ggYXMgZS5nLlxuICAgICAqIDxSZW1vdGVTdG9yYWdlLkluZGV4ZWREQj4pIGFuZCB0aGUgYWZmZWN0ZWQgcGF0aCBpcyBlcXVhbCB0byBvciBiZWxvd1xuICAgICAqIHRoZSBnaXZlbiAncGF0aCcsIHRoZSBnaXZlbiBoYW5kbGVyIGlzIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIFlvdSBzaG91bGQgdXN1YWxseSBub3QgdXNlIHRoaXMgbWV0aG9kIGRpcmVjdGx5LCBidXQgaW5zdGVhZCB1c2UgdGhlXG4gICAgICogXCJjaGFuZ2VcIiBldmVudHMgcHJvdmlkZWQgYnkgPFJlbW90ZVN0b3JhZ2UuQmFzZUNsaWVudD4uXG4gICAgICpcbiAgICAgKiBQYXJhbWV0ZXJzOlxuICAgICAqICAgcGF0aCAgICAtIEFic29sdXRlIHBhdGggdG8gYXR0YWNoIGhhbmRsZXIgdG8uXG4gICAgICogICBoYW5kbGVyIC0gSGFuZGxlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBvbkNoYW5nZTogZnVuY3Rpb24gKHBhdGgsIGhhbmRsZXIpIHtcbiAgICAgIGlmICghIHRoaXMuX3BhdGhIYW5kbGVycy5jaGFuZ2VbcGF0aF0pIHtcbiAgICAgICAgdGhpcy5fcGF0aEhhbmRsZXJzLmNoYW5nZVtwYXRoXSA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpcy5fcGF0aEhhbmRsZXJzLmNoYW5nZVtwYXRoXS5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2Q6IGVuYWJsZUxvZ1xuICAgICAqXG4gICAgICogRW5hYmxlIHJlbW90ZVN0b3JhZ2UgbG9nZ2luZy5cbiAgICAgKi9cbiAgICBlbmFibGVMb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbmZpZy5sb2dnaW5nID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kOiBkaXNhYmxlTG9nXG4gICAgICpcbiAgICAgKiBEaXNhYmxlIHJlbW90ZVN0b3JhZ2UgbG9nZ2luZ1xuICAgICAqL1xuICAgIGRpc2FibGVMb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbmZpZy5sb2dnaW5nID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogbG9nXG4gICAgICpcbiAgICAgKiBUaGUgc2FtZSBhcyA8UmVtb3RlU3RvcmFnZS5sb2c+LlxuICAgICAqL1xuICAgIGxvZzogZnVuY3Rpb24gKCkge1xuICAgICAgbG9nLmFwcGx5KFJlbW90ZVN0b3JhZ2UsIGFyZ3VtZW50cyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogc2V0QXBpS2V5cyAoZXhwZXJpbWVudGFsKVxuICAgICAqXG4gICAgICogU2V0IEFQSSBrZXlzIGZvciAoY3VycmVudGx5KSBHb29nbGVEcml2ZSBhbmQvb3IgRHJvcGJveCBiYWNrZW5kIHN1cHBvcnQuXG4gICAgICogU2VlIGFsc28gdGhlICdiYWNrZW5kcycgZXhhbXBsZSBpbiB0aGUgc3RhcnRlci1raXQuIE5vdGUgdGhhdCBzdXBwb3J0IGZvclxuICAgICAqIGJvdGggdGhlc2UgYmFja2VuZHMgaXMgc3RpbGwgZXhwZXJpbWVudGFsLlxuICAgICAqXG4gICAgICogUGFyYW1ldGVyczpcbiAgICAgKiAgIHR5cGUgLSBzdHJpbmcsIGVpdGhlciAnZ29vZ2xlZHJpdmUnIG9yICdkcm9wYm94J1xuICAgICAqICAga2V5cyAtIG9iamVjdCwgd2l0aCBvbmUgc3RyaW5nIGZpZWxkOyAnY2xpZW50SWQnIGZvciBHb29nbGVEcml2ZSwgb3JcbiAgICAgKiAgICAgICAgICAnYXBwS2V5JyBmb3IgRHJvcGJveC5cbiAgICAgKlxuICAgICAqL1xuICAgIHNldEFwaUtleXM6IGZ1bmN0aW9uICh0eXBlLCBrZXlzKSB7XG4gICAgICBpZiAoa2V5cykge1xuICAgICAgICB0aGlzLmFwaUtleXNbdHlwZV0gPSBrZXlzO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2Ryb3Bib3gnICYmICh0eXBlb2YgdGhpcy5kcm9wYm94ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bib3guY2xpZW50SWQgIT09IGtleXMuYXBwS2V5KSkge1xuICAgICAgICAgIERyb3Bib3guX3JzX2luaXQodGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2dvb2dsZWRyaXZlJyAmJiAodHlwZW9mIHRoaXMuZ29vZ2xlZHJpdmUgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nb29nbGVkcml2ZS5jbGllbnRJZCAhPT0ga2V5cy5jbGllbnRJZCkpIHtcbiAgICAgICAgICBHb29nbGVEcml2ZS5fcnNfaW5pdCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuYXBpS2V5c1t0eXBlXTtcbiAgICAgIH1cbiAgICAgIGlmIChoYXNMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3JlbW90ZXN0b3JhZ2U6YXBpLWtleXMnLCBKU09OLnN0cmluZ2lmeSh0aGlzLmFwaUtleXMpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kOiBzZXRDb3Jkb3ZhUmVkaXJlY3RVcmlcbiAgICAgKlxuICAgICAqIFNldCByZWRpcmVjdCBVUkkgdG8gYmUgdXNlZCBmb3IgdGhlIE9BdXRoIHJlZGlyZWN0IHdpdGhpbiB0aGVcbiAgICAgKiBpbi1hcHAtYnJvd3NlciB3aW5kb3cgaW4gQ29yZG92YSBhcHBzLlxuICAgICAqXG4gICAgICogUGFyYW1ldGVyczpcbiAgICAgKiAgIHVyaSAtIHN0cmluZywgdmFsaWQgSFRUUChTKSBVUklcbiAgICAgKi9cbiAgICBzZXRDb3Jkb3ZhUmVkaXJlY3RVcmk6IGZ1bmN0aW9uICh1cmkpIHtcbiAgICAgIGlmICh0eXBlb2YgdXJpICE9PSAnc3RyaW5nJyB8fCAhdXJpLm1hdGNoKC9odHRwKHMpP1xcOlxcL1xcLy8pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvcmRvdmEgcmVkaXJlY3QgVVJJIG11c3QgYmUgYSBVUkkgc3RyaW5nXCIpO1xuICAgICAgfVxuICAgICAgY29uZmlnLmNvcmRvdmFSZWRpcmVjdFVyaSA9IHVyaTtcbiAgICB9LFxuXG5cbiAgICAvKiBGRUFUVVJFUyBJTklUSUFMSVpBVElPTiAqL1xuICAgIF9pbml0OiBGZWF0dXJlcy5sb2FkRmVhdHVyZXMsXG4gICAgZmVhdHVyZXM6IEZlYXR1cmVzLmZlYXR1cmVzLFxuICAgIGxvYWRGZWF0dXJlOiBGZWF0dXJlcy5sb2FkRmVhdHVyZSxcbiAgICBmZWF0dXJlU3VwcG9ydGVkOiBGZWF0dXJlcy5mZWF0dXJlU3VwcG9ydGVkLFxuICAgIGZlYXR1cmVEb25lOiBGZWF0dXJlcy5mZWF0dXJlRG9uZSxcbiAgICBmZWF0dXJlc0RvbmU6IEZlYXR1cmVzLmZlYXR1cmVzRG9uZSxcbiAgICBmZWF0dXJlc0xvYWRlZDogRmVhdHVyZXMuZmVhdHVyZXNMb2FkZWQsXG4gICAgZmVhdHVyZUluaXRpYWxpemVkOiBGZWF0dXJlcy5mZWF0dXJlSW5pdGlhbGl6ZWQsXG4gICAgZmVhdHVyZUZhaWxlZDogRmVhdHVyZXMuZmVhdHVyZUZhaWxlZCxcbiAgICBoYXNGZWF0dXJlOiBGZWF0dXJlcy5oYXNGZWF0dXJlLFxuICAgIF9zZXRDYWNoaW5nTW9kdWxlOiBGZWF0dXJlcy5fc2V0Q2FjaGluZ01vZHVsZSxcbiAgICBfY29sbGVjdENsZWFudXBGdW5jdGlvbnM6IEZlYXR1cmVzLl9jb2xsZWN0Q2xlYW51cEZ1bmN0aW9ucyxcbiAgICBfZmlyZVJlYWR5OiBGZWF0dXJlcy5fZmlyZVJlYWR5LFxuICAgIGluaXRGZWF0dXJlOiBGZWF0dXJlcy5pbml0RmVhdHVyZSxcblxuXG4gICAgLyoqXG4gICAgICogVE9GSVg6IG5lZWRzIHNvbWUgZXhwbGFuYXRpb24gb24gdGhpcyAtbGVzXG4gICAgICoqIEdFVC9QVVQvREVMRVRFIElOVEVSRkFDRSBIRUxQRVJTXG4gICAgICoqL1xuXG4gICAgX3NldEdQRDogZnVuY3Rpb24gKGltcGwsIGNvbnRleHQpIHtcbiAgICAgIGZ1bmN0aW9uIHdyYXAoZnVuYykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIC50aGVuKGVtaXRVbmF1dGhvcml6ZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB0aGlzLmdldCA9IHdyYXAoaW1wbC5nZXQpO1xuICAgICAgdGhpcy5wdXQgPSB3cmFwKGltcGwucHV0KTtcbiAgICAgIHRoaXMuZGVsZXRlID0gd3JhcChpbXBsLmRlbGV0ZSk7XG4gICAgfSxcblxuICAgIF9wZW5kaW5nR1BEOiBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1ldGhvZEFyZ3VtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICB0aGlzLl9wZW5kaW5nLnB1c2goe1xuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2ROYW1lLFxuICAgICAgICAgICAgYXJnczogbWV0aG9kQXJndW1lbnRzLFxuICAgICAgICAgICAgcHJvbWlzZToge1xuICAgICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3Q6IHJlamVjdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgfS5iaW5kKHRoaXMpO1xuICAgIH0sXG5cbiAgICBfcHJvY2Vzc1BlbmRpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmcuZm9yRWFjaChmdW5jdGlvbiAocGVuZGluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXNbcGVuZGluZy5tZXRob2RdLmFwcGx5KHRoaXMsIHBlbmRpbmcuYXJncykudGhlbihwZW5kaW5nLnByb21pc2UucmVzb2x2ZSwgcGVuZGluZy5wcm9taXNlLnJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgIHBlbmRpbmcucHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICB0aGlzLl9wZW5kaW5nID0gW107XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqKiBDSEFOR0UgRVZFTlQgSEFORExJTkdcbiAgICAgKiovXG4gICAgX2JpbmRDaGFuZ2U6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIG9iamVjdC5vbignY2hhbmdlJywgdGhpcy5fZGlzcGF0Y2hFdmVudC5iaW5kKHRoaXMsICdjaGFuZ2UnKSk7XG4gICAgfSxcblxuICAgIF9kaXNwYXRjaEV2ZW50OiBmdW5jdGlvbiAoZXZlbnROYW1lLCBldmVudCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgT2JqZWN0LmtleXModGhpcy5fcGF0aEhhbmRsZXJzW2V2ZW50TmFtZV0pLmZvckVhY2goZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIHBsID0gcGF0aC5sZW5ndGg7XG4gICAgICAgIGlmIChldmVudC5wYXRoLnN1YnN0cigwLCBwbCkgPT09IHBhdGgpIHtcbiAgICAgICAgICBzZWxmLl9wYXRoSGFuZGxlcnNbZXZlbnROYW1lXVtwYXRoXS5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgZXYgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBldmVudCkgeyBldltrZXldID0gZXZlbnRba2V5XTsgfVxuICAgICAgICAgICAgZXYucmVsYXRpdmVQYXRoID0gZXZlbnQucGF0aC5yZXBsYWNlKG5ldyBSZWdFeHAoJ14nICsgcGF0aCksICcnKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGhhbmRsZXIoZXYpO1xuICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCInY2hhbmdlJyBoYW5kbGVyIGZhaWxlZDogXCIsIGUsIGUuc3RhY2spO1xuICAgICAgICAgICAgICBzZWxmLl9lbWl0KCdlcnJvcicsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG5cbiAgICBzY29wZTogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIGlmICh0eXBlb2YocGF0aCkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93ICdBcmd1bWVudCBcXCdwYXRoXFwnIG9mIGJhc2VDbGllbnQuc2NvcGUgbXVzdCBiZSBhIHN0cmluZyc7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5hY2Nlc3MuY2hlY2tQYXRoUGVybWlzc2lvbihwYXRoLCAncicpKSB7XG4gICAgICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGgucmVwbGFjZSgvKFsnXFxcXF0pL2csICdcXFxcJDEnKTtcbiAgICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBwbGVhc2UgY2FsbCByZW1vdGVTdG9yYWdlLmFjY2Vzcy5jbGFpbShcXCcnICsgZXNjYXBlZFBhdGggKyAnXFwnLCBcXCdyXFwnKSAocmVhZCBvbmx5KSBvciByZW1vdGVTdG9yYWdlLmFjY2Vzcy5jbGFpbShcXCcnICsgZXNjYXBlZFBhdGggKyAnXFwnLCBcXCdyd1xcJykgKHJlYWQvd3JpdGUpIGZpcnN0Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEJhc2VDbGllbnQodGhpcywgcGF0aCk7XG4gICAgfSxcblxuXG5cblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogZ2V0U3luY0ludGVydmFsXG4gICAgICpcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBzeW5jIGludGVydmFsIHdoZW4gYXBwbGljYXRpb24gaXMgaW4gdGhlIGZvcmVncm91bmRcbiAgICAgKlxuICAgICAqIFJldHVybnMgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzXG4gICAgICpcbiAgICAvLyAgKi9cbiAgICBnZXRTeW5jSW50ZXJ2YWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjb25maWcuc3luY0ludGVydmFsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2Q6IHNldFN5bmNJbnRlcnZhbFxuICAgICAqXG4gICAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGUgc3luYyBpbnRlcnZhbCB3aGVuIGFwcGxpY2F0aW9uIGlzIGluIHRoZSBmb3JlZ3JvdW5kXG4gICAgICpcbiAgICAgKiBQYXJhbWV0ZXJzOlxuICAgICAqICAgaW50ZXJ2YWwgLSBzeW5jIGludGVydmFsIGluIG1pbGxpc2Vjb25kc1xuICAgICAqXG4gICAgICovXG4gICAgc2V0U3luY0ludGVydmFsOiBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcbiAgICAgIGlmICghaXNWYWxpZEludGVydmFsKGludGVydmFsKSkge1xuICAgICAgICB0aHJvdyBpbnRlcnZhbCArIFwiIGlzIG5vdCBhIHZhbGlkIHN5bmMgaW50ZXJ2YWxcIjtcbiAgICAgIH1cbiAgICAgIHZhciBvbGRWYWx1ZSA9IGNvbmZpZy5zeW5jSW50ZXJ2YWw7XG4gICAgICBjb25maWcuc3luY0ludGVydmFsID0gcGFyc2VJbnQoaW50ZXJ2YWwsIDEwKTtcbiAgICAgIHRoaXMuX2VtaXQoJ3N5bmMtaW50ZXJ2YWwtY2hhbmdlJywge29sZFZhbHVlOiBvbGRWYWx1ZSwgbmV3VmFsdWU6IGludGVydmFsfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZDogZ2V0QmFja2dyb3VuZFN5bmNJbnRlcnZhbFxuICAgICAqXG4gICAgICogR2V0IHRoZSB2YWx1ZSBvZiB0aGUgc3luYyBpbnRlcnZhbCB3aGVuIGFwcGxpY2F0aW9uIGlzIGluIHRoZSBiYWNrZ3JvdW5kXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xuICAgICAqXG4gICAgICovXG4gICAgZ2V0QmFja2dyb3VuZFN5bmNJbnRlcnZhbDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5iYWNrZ3JvdW5kU3luY0ludGVydmFsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2Q6IHNldEJhY2tncm91bmRTeW5jSW50ZXJ2YWxcbiAgICAgKlxuICAgICAqIFNldCB0aGUgdmFsdWUgb2YgdGhlIHN5bmMgaW50ZXJ2YWwgd2hlbiB0aGUgYXBwbGljYXRpb24gaXMgaW4gdGhlIGJhY2tncm91bmRcbiAgICAgKlxuICAgICAqIFBhcmFtZXRlcnM6XG4gICAgICogICBpbnRlcnZhbCAtIHN5bmMgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzXG4gICAgICpcbiAgICAgKi9cbiAgICBzZXRCYWNrZ3JvdW5kU3luY0ludGVydmFsOiBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcbiAgICAgIGlmKCFpc1ZhbGlkSW50ZXJ2YWwoaW50ZXJ2YWwpKSB7XG4gICAgICAgIHRocm93IGludGVydmFsICsgXCIgaXMgbm90IGEgdmFsaWQgc3luYyBpbnRlcnZhbFwiO1xuICAgICAgfVxuICAgICAgdmFyIG9sZFZhbHVlID0gY29uZmlnLmJhY2tncm91bmRTeW5jSW50ZXJ2YWw7XG4gICAgICBjb25maWcuYmFja2dyb3VuZFN5bmNJbnRlcnZhbCA9IHBhcnNlSW50KGludGVydmFsLCAxMCk7XG4gICAgICB0aGlzLl9lbWl0KCdzeW5jLWludGVydmFsLWNoYW5nZScsIHtvbGRWYWx1ZTogb2xkVmFsdWUsIG5ld1ZhbHVlOiBpbnRlcnZhbH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2Q6IGdldEN1cnJlbnRTeW5jSW50ZXJ2YWxcbiAgICAgKlxuICAgICAqIEdldCB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgc3luYyBpbnRlcnZhbFxuICAgICAqXG4gICAgICogUmV0dXJucyBhIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAgICAgKlxuICAgICAqL1xuICAgIGdldEN1cnJlbnRTeW5jSW50ZXJ2YWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjb25maWcuaXNCYWNrZ3JvdW5kID8gY29uZmlnLmJhY2tncm91bmRTeW5jSW50ZXJ2YWwgOiBjb25maWcuc3luY0ludGVydmFsO1xuICAgIH0sXG5cblxuXG4gICAgc3luY0N5Y2xlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5zeW5jLnN0b3BwZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN5bmMub24oJ2RvbmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvZygnW1N5bmNdIFN5bmMgZG9uZS4gU2V0dGluZyB0aW1lciB0bycsIHRoaXMuZ2V0Q3VycmVudFN5bmNJbnRlcnZhbCgpKTtcbiAgICAgICAgaWYgKCF0aGlzLnN5bmMuc3RvcHBlZCkge1xuICAgICAgICAgIGlmICh0aGlzLl9zeW5jVGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9zeW5jVGltZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9zeW5jVGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuc3luYy5zeW5jLmJpbmQodGhpcy5zeW5jKSwgdGhpcy5nZXRDdXJyZW50U3luY0ludGVydmFsKCkpO1xuICAgICAgICB9XG4gICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICB0aGlzLnN5bmMuc3luYygpO1xuICAgIH0sXG5cbiAgICBzdG9wU3luYzogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuc3luYykge1xuICAgICAgICBsb2coJ1tTeW5jXSBTdG9wcGluZyBzeW5jJyk7XG4gICAgICAgIHRoaXMuc3luYy5zdG9wcGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE8gV2hlbiBpcyB0aGlzIGV2ZXIgdGhlIGNhc2UgYW5kIHdoYXQgaXMgc3luY1N0b3BwZWQgZm9yIHRoZW4/XG4gICAgICAgIGxvZygnW1N5bmNdIFdpbGwgaW5zdGFudGlhdGUgc3luYyBzdG9wcGVkJyk7XG4gICAgICAgIHRoaXMuc3luY1N0b3BwZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdGFydFN5bmM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghY29uZmlnLmNhY2hlKSB7IHJldHVybjsgfVxuICAgICAgdGhpcy5zeW5jLnN0b3BwZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc3luY1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc3luYy5zeW5jKCk7XG4gICAgfVxuXG4gIH07XG5cblxuICAgIC8qKlxuICAgKiBDaGVjayBpZiBpbnRlcnZhbCBpcyB2YWxpZDogbnVtZXJpYyBhbmQgYmV0d2VlbiAxMDAwbXMgYW5kIDM2MDAwMDBtc1xuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gaXNWYWxpZEludGVydmFsKGludGVydmFsKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgaW50ZXJ2YWwgPT09ICdudW1iZXInICYmIGludGVydmFsID4gMTAwMCAmJiBpbnRlcnZhbCA8IDM2MDAwMDApO1xuICB9XG5cblxuICBSZW1vdGVTdG9yYWdlLnV0aWwgPSB1dGlsO1xuICAvLyBSZW1vdGVTdG9yYWdlLmRlZmluZU1vZHVsZSA9IG1vZHVsZXMuZGVmaW5lTW9kdWxlO1xuXG4gIC8qKlxuICAgKiBQcm9wZXJ0eTogY29ubmVjdGVkXG4gICAqXG4gICAqIEJvb2xlYW4gcHJvcGVydHkgaW5kaWNhdGluZyBpZiByZW1vdGVTdG9yYWdlIGlzIGN1cnJlbnRseSBjb25uZWN0ZWQuXG4gICAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVtb3RlU3RvcmFnZS5wcm90b3R5cGUsICdjb25uZWN0ZWQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdGUuY29ubmVjdGVkO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFByb3BlcnR5OiBhY2Nlc3NcbiAgICpcbiAgICogVHJhY2tpbmcgY2xhaW1lZCBhY2Nlc3Mgc2NvcGVzLiBBIDxSZW1vdGVTdG9yYWdlLkFjY2Vzcz4gaW5zdGFuY2UuXG4gICovXG4gIHZhciBBY2Nlc3MgPSByZXF1aXJlKCcuL2FjY2VzcycpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVtb3RlU3RvcmFnZS5wcm90b3R5cGUsICdhY2Nlc3MnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhY2Nlc3MgPSBuZXcgQWNjZXNzKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2FjY2VzcycsIHtcbiAgICAgICAgdmFsdWU6IGFjY2Vzc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjZXNzO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuXG5cblxuXG5cbiAgLy8gVE9ETyBjbGVhbiB1cC9oYXJtb25pemUgaG93IG1vZHVsZXMgYXJlIGxvYWRlZCBhbmQvb3IgZG9jdW1lbnQgdGhpcyBhcmNoaXRlY3R1cmUgcHJvcGVybHlcbiAgLy9cbiAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcmVtb3RlU3RvcmFnZSBvYmplY3QgaGFzIG5vdCBiZWVuIGNyZWF0ZWQgeWV0LlxuICAvLyBPbmx5IGl0cyBwcm90b3R5cGUgZXhpc3RzIHNvIGZhciwgc28gd2UgZGVmaW5lIGEgc2VsZi1jb25zdHJ1Y3RpbmdcbiAgLy8gcHJvcGVydHkgb24gdGhlcmU6XG4gIC8qKlxuICAgKlxuICAgKiBQcm9wZXJ0eTogY2FjaGluZ1xuICAgKlxuICAgKiBDYWNoaW5nIHNldHRpbmdzLiBBIDxSZW1vdGVTdG9yYWdlLkNhY2hpbmc+IGluc3RhbmNlLlxuICAgKlxuICAgKiBOb3QgYXZhaWxhYmxlIGluIG5vLWNhY2hlIGJ1aWxkcy5cbiAgICpcbiAgICovXG5cbiAgLy8gVE9GSVggd2FzIGluIHJzX2luaXQgb2YgQ2FjaGluZyBidXQgZG9uJ3Qgd2FudCB0byByZXF1aXJlIFJlbW90ZVN0b3JhZ2UgZnJvbSB0aGVyZS5cbiAgdmFyIENhY2hpbmcgPSByZXF1aXJlKCcuL2NhY2hpbmcnKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlbW90ZVN0b3JhZ2UucHJvdG90eXBlLCAnY2FjaGluZycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FjaGluZyA9IG5ldyBDYWNoaW5nKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NhY2hpbmcnLCB7XG4gICAgICAgIHZhbHVlOiBjYWNoaW5nXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjYWNoaW5nO1xuICAgIH1cbiAgfSk7XG5cbiAgIC8qXG4gICAqIFByb3BlcnR5OiByZW1vdGVcbiAgICpcbiAgICogQWNjZXNzIHRvIHRoZSByZW1vdGUgYmFja2VuZCB1c2VkLiBVc3VhbGx5IGEgPFJlbW90ZVN0b3JhZ2UuV2lyZUNsaWVudD4uXG4gICAqXG4gICAqXG4gICAqIFByb3BlcnR5OiBsb2NhbFxuICAgKlxuICAgKiBBY2Nlc3MgdG8gdGhlIGxvY2FsIGNhY2hpbmcgYmFja2VuZCB1c2VkLiBVc3VhbGx5IGVpdGhlciBhXG4gICAqIDxSZW1vdGVTdG9yYWdlLkluZGV4ZWREQj4gb3IgPFJlbW90ZVN0b3JhZ2UuTG9jYWxTdG9yYWdlPiBpbnN0YW5jZS5cbiAgICpcbiAgICogTm90IGF2YWlsYWJsZSBpbiBuby1jYWNoZSBidWlsZHMuXG4gICAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUmVtb3RlU3RvcmFnZTtcbnJlcXVpcmUoJy4vbW9kdWxlcycpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9yZW1vdGVzdG9yYWdlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar util = __webpack_require__(2);\nvar log = __webpack_require__(1);\nvar SyncedGetPutDelete = __webpack_require__(22);\nvar config = __webpack_require__(5);\n\nvar Features = {\n  features: [],\n  featuresDone: 0,\n  readyFired: false,\n\n  loadFeatures: function loadFeatures() {\n    var _this = this;\n\n    this.features = [];\n    this.featuresDone = 0;\n    this.readyFired = false;\n\n    this.featureModules = {\n      'WireClient': __webpack_require__(9),\n      'Dropbox': __webpack_require__(13),\n      'GoogleDrive': __webpack_require__(15),\n      'Access': __webpack_require__(10),\n      'Discover': __webpack_require__(12),\n      'Authorize': __webpack_require__(4),\n      'BaseClient': __webpack_require__(6),\n      'Env': __webpack_require__(14)\n    };\n\n    // enable caching releate module if needed\n    if (config.cache) {\n      util.extend(this.featureModules, {\n        'Caching': __webpack_require__(11),\n        'IndexedDB': __webpack_require__(18),\n        'LocalStorage': __webpack_require__(20),\n        'InMemoryStorage': __webpack_require__(19),\n        'Sync': __webpack_require__(8)\n      });\n    }\n\n    // disable specified modules\n    config.disableFeatures.forEach(function (feature) {\n      if (_this.featureModules[feature]) {\n        // this.featureModules[feature] = undefined\n        delete _this.featureModules[feature];\n      }\n    });\n\n    this._allLoaded = false;\n\n    for (var featureName in this.featureModules) {\n      // TOFIX this has to push the promised return value into an\n      // array of promises and use Promise.all to emit `ready`\n      // instead of increment a counter of loaded features. -les\n      this.loadFeature(featureName);\n    }\n  },\n\n\n  /**\n   * Method: hasFeature\n   *\n   * Checks whether a feature is enabled or not within remoteStorage.\n   * Returns a boolean.\n   *\n   * Parameters:\n   *   name - Capitalized name of the feature. e.g. Authorize, or IndexedDB\n   *\n   * Example:\n   *   (start code)\n   *   if (remoteStorage.hasFeature('LocalStorage')) {\n   *     console.log('LocalStorage is enabled!');\n   *   }\n   *   (end code)\n   *\n   */\n  hasFeature: function hasFeature(feature) {\n    for (var i = this.features.length - 1; i >= 0; i--) {\n      if (this.features[i].name === feature) {\n        return this.features[i].supported;\n      }\n    }\n    return false;\n  },\n  loadFeature: function loadFeature(featureName) {\n    var _this2 = this;\n\n    var feature = this.featureModules[featureName];\n    var supported = !feature._rs_supported || feature._rs_supported();\n\n    log('[RemoteStorage] [FEATURE ' + featureName + '] initializing ...');\n\n    if ((typeof supported === 'undefined' ? 'undefined' : _typeof(supported)) === 'object') {\n      supported.then(function () {\n        _this2.featureSupported(featureName, true);\n        _this2.initFeature(featureName);\n      }, function () {\n        _this2.featureSupported(featureName, false);\n      });\n    } else if (typeof supported === 'boolean') {\n      this.featureSupported(featureName, supported);\n      if (supported) {\n        this.initFeature(featureName);\n      }\n    } else {\n      this.featureSupported(featureName, false);\n    }\n  },\n  initFeature: function initFeature(featureName) {\n    var _this3 = this;\n\n    var feature = this.featureModules[featureName];\n    var initResult = void 0;\n    try {\n      initResult = feature._rs_init(this);\n    } catch (e) {\n      this.featureFailed(featureName, e);\n      return;\n    }\n\n    if ((typeof initResult === 'undefined' ? 'undefined' : _typeof(initResult)) === 'object' && typeof initResult.then === 'function') {\n      initResult.then(function () {\n        _this3.featureInitialized(featureName);\n      }, function (err) {\n        _this3.featureFailed(featureName, err);\n      });\n    } else {\n      this.featureInitialized(featureName);\n    }\n  },\n  featureFailed: function featureFailed(featureName, err) {\n    log('[RemoteStorage] [FEATURE ' + featureName + '] initialization failed (' + err + ')');\n    this.featureDone();\n  },\n  featureSupported: function featureSupported(featureName, success) {\n    log('[RemoteStorage] [FEATURE ' + featureName + ']  ' + (success ? '' : ' not') + ' supported');\n    if (!success) {\n      this.featureDone();\n    }\n  },\n  featureInitialized: function featureInitialized(featureName) {\n    log('[RemoteStorage] [FEATURE ' + featureName + '] initialized.');\n    this.features.push({\n      name: featureName,\n      init: this.featureModules[featureName]._rs_init,\n      supported: true,\n      cleanup: this.featureModules[featureName]._rs_cleanup\n    });\n    this.featureDone();\n  },\n  featureDone: function featureDone() {\n    this.featuresDone++;\n    if (this.featuresDone === Object.keys(this.featureModules).length) {\n      setTimeout(this.featuresLoaded.bind(this), 0);\n    }\n  },\n  _setCachingModule: function _setCachingModule() {\n    var _this4 = this;\n\n    var cachingModules = ['IndexedDB', 'LocalStorage', 'InMemoryStorage'];\n\n    cachingModules.some(function (cachingLayer) {\n      if (_this4.features.some(function (feature) {\n        return feature.name === cachingLayer;\n      })) {\n        _this4.features.local = _this4.featureModules[cachingLayer];\n        return true;\n      }\n    });\n  },\n  _fireReady: function _fireReady() {\n    try {\n      if (!this.readyFired) {\n        this._emit('ready');\n        this.readyFired = true;\n      }\n    } catch (e) {\n      console.error(\"'ready' failed: \", e, e.stack);\n      this._emit('error', e);\n    }\n  },\n  featuresLoaded: function featuresLoaded() {\n    var _this5 = this;\n\n    log('[REMOTESTORAGE] All features loaded !');\n\n    this._setCachingModule();\n    this.local = config.cache && this.features.local && new this.features.local();\n\n    // this.remote set by WireClient._rs_init as lazy property on\n    // RS.prototype\n\n    if (this.local && this.remote) {\n      this._setGPD(SyncedGetPutDelete, this);\n      this._bindChange(this.local);\n    } else if (this.remote) {\n      this._setGPD(this.remote, this.remote);\n    }\n    if (this.remote) {\n      this.remote.on('connected', function () {\n        _this5._fireReady();\n        _this5._emit('connected');\n      });\n      this.remote.on('not-connected', function () {\n        _this5._fireReady();\n        _this5._emit('not-connected');\n      });\n      if (this.remote.connected) {\n        this._fireReady();\n        this._emit('connected');\n      }\n\n      if (!this.hasFeature('Authorize')) {\n        this.remote.stopWaitingForToken();\n      }\n    }\n\n    this._collectCleanupFunctions();\n\n    try {\n      this._allLoaded = true;\n      this._emit('features-loaded');\n    } catch (exc) {\n      util.logError(exc);\n      this._emit('error', exc);\n    }\n    this._processPending();\n  },\n  _collectCleanupFunctions: function _collectCleanupFunctions() {\n    this._cleanups = [];\n    for (var i = 0; i < this.features.length; i++) {\n      var cleanup = this.features[i].cleanup;\n      if (typeof cleanup === 'function') {\n        this._cleanups.push(cleanup);\n      }\n    }\n  }\n};\n\nmodule.exports = Features;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Class: IndexedDB\n *\n *\n * IndexedDB Interface\n * -------------------\n *\n * TODO rewrite, doesn't expose GPD anymore, it's in cachinglayer now\n *\n * This file exposes a get/put/delete interface, accessing data in an IndexedDB.\n *\n * There are multiple parts to this interface:\n *\n *   The RemoteStorage integration:\n *     - IndexedDB._rs_supported() determines if IndexedDB support\n *       is available. If it isn't, RemoteStorage won't initialize the feature.\n *     - IndexedDB._rs_init() initializes the feature. It returns\n *       a promise that is fulfilled as soon as the database has been opened and\n *       migrated.\n *\n *   The storage interface (IndexedDB object):\n *     - Usually this is accessible via \"remoteStorage.local\"\n *     - #get() takes a path and returns a promise.\n *     - #put() takes a path, body and contentType and also returns a promise.\n *     - #delete() takes a path and also returns a promise.\n *     - #on('change', ...) events, being fired whenever something changes in\n *       the storage. Change events roughly follow the StorageEvent pattern.\n *       They have \"oldValue\" and \"newValue\" properties, which can be used to\n *       distinguish create/update/delete operations and analyze changes in\n *       change handlers. In addition they carry a \"origin\" property, which\n *       is either \"window\", \"local\", or \"remote\". \"remote\" events are fired\n *       whenever a change comes in from Sync.\n *\n *   The sync interface (also on IndexedDB object):\n *     - #getNodes([paths]) returns the requested nodes in a promise.\n *     - #setNodes(map) stores all the nodes given in the (path -> node) map.\n *\n */\n\nvar log = __webpack_require__(1);\nvar cachingLayer = __webpack_require__(7);\nvar eventHandling = __webpack_require__(3);\nvar util = __webpack_require__(2);\n\nvar DB_VERSION = 2;\n\nvar DEFAULT_DB_NAME = 'remotestorage';\nvar DEFAULT_DB;\n\nvar IndexedDB = function IndexedDB(database) {\n  this.db = database || DEFAULT_DB;\n\n  if (!this.db) {\n    log(\"[IndexedDB] Failed to open DB\");\n    return undefined;\n  }\n\n  cachingLayer(this);\n  eventHandling(this, 'change', 'local-events-done');\n\n  this.getsRunning = 0;\n  this.putsRunning = 0;\n\n  /**\n   * Property: changesQueued\n   *\n   * Given a node for which uncommitted changes exist, this cache\n   * stores either the entire uncommitted node, or false for a deletion.\n   * The node's path is used as the key.\n   *\n   * changesQueued stores changes for which no IndexedDB transaction has\n   * been started yet.\n   */\n  this.changesQueued = {};\n\n  /**\n   * Property: changesRunning\n   *\n   * Given a node for which uncommitted changes exist, this cache\n   * stores either the entire uncommitted node, or false for a deletion.\n   * The node's path is used as the key.\n   *\n   * At any time there is at most one IndexedDB transaction running.\n   * changesRunning stores the changes that are included in that currently\n   * running IndexedDB transaction, or if none is running, of the last one\n   * that ran.\n   */\n  this.changesRunning = {};\n};\n\nIndexedDB.prototype = {\n  getNodes: function getNodes(paths) {\n    var misses = [],\n        fromCache = {};\n    for (var i = 0, len = paths.length; i < len; i++) {\n      if (this.changesQueued[paths[i]] !== undefined) {\n        fromCache[paths[i]] = util.deepClone(this.changesQueued[paths[i]] || undefined);\n      } else if (this.changesRunning[paths[i]] !== undefined) {\n        fromCache[paths[i]] = util.deepClone(this.changesRunning[paths[i]] || undefined);\n      } else {\n        misses.push(paths[i]);\n      }\n    }\n    if (misses.length > 0) {\n      return this.getNodesFromDb(misses).then(function (nodes) {\n        for (var i in fromCache) {\n          nodes[i] = fromCache[i];\n        }\n        return nodes;\n      });\n    } else {\n      return Promise.resolve(fromCache);\n    }\n  },\n\n  setNodes: function setNodes(nodes) {\n    for (var i in nodes) {\n      this.changesQueued[i] = nodes[i] || false;\n    }\n    this.maybeFlush();\n    return Promise.resolve();\n  },\n\n  maybeFlush: function maybeFlush() {\n    if (this.putsRunning === 0) {\n      this.flushChangesQueued();\n    } else {\n      if (!this.commitSlownessWarning) {\n        this.commitSlownessWarning = setInterval(function () {\n          console.log('WARNING: waited more than 10 seconds for previous commit to finish');\n        }, 10000);\n      }\n    }\n  },\n\n  flushChangesQueued: function flushChangesQueued() {\n    if (this.commitSlownessWarning) {\n      clearInterval(this.commitSlownessWarning);\n      this.commitSlownessWarning = null;\n    }\n    if (Object.keys(this.changesQueued).length > 0) {\n      this.changesRunning = this.changesQueued;\n      this.changesQueued = {};\n      this.setNodesInDb(this.changesRunning).then(this.flushChangesQueued.bind(this));\n    }\n  },\n\n  getNodesFromDb: function getNodesFromDb(paths) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n\n      var transaction = _this.db.transaction(['nodes'], 'readonly');\n      var nodes = transaction.objectStore('nodes');\n      var retrievedNodes = {};\n\n      _this.getsRunning++;\n\n      paths.map(function (path, i) {\n        nodes.get(path).onsuccess = function (evt) {\n          retrievedNodes[path] = evt.target.result;\n        };\n      });\n\n      transaction.oncomplete = function () {\n        resolve(retrievedNodes);\n        this.getsRunning--;\n      }.bind(_this);\n\n      transaction.onerror = transaction.onabort = function () {\n        reject('get transaction error/abort');\n        this.getsRunning--;\n      }.bind(_this);\n    });\n  },\n\n  setNodesInDb: function setNodesInDb(nodes) {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n\n      var transaction = _this2.db.transaction(['nodes'], 'readwrite');\n      var nodesStore = transaction.objectStore('nodes');\n      var startTime = new Date().getTime();\n\n      _this2.putsRunning++;\n\n      log('[IndexedDB] Starting put', nodes, _this2.putsRunning);\n\n      for (var path in nodes) {\n        var node = nodes[path];\n        if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {\n          try {\n            nodesStore.put(node);\n          } catch (e) {\n            log('[IndexedDB] Error while putting', node, e);\n            throw e;\n          }\n        } else {\n          try {\n            nodesStore.delete(path);\n          } catch (e) {\n            log('[IndexedDB] Error while removing', nodesStore, node, e);\n            throw e;\n          }\n        }\n      }\n\n      transaction.oncomplete = function () {\n        this.putsRunning--;\n        log('[IndexedDB] Finished put', nodes, this.putsRunning, new Date().getTime() - startTime + 'ms');\n        resolve();\n      }.bind(_this2);\n\n      transaction.onerror = function () {\n        this.putsRunning--;\n        reject('transaction error');\n      }.bind(_this2);\n\n      transaction.onabort = function () {\n        reject('transaction abort');\n        this.putsRunning--;\n      }.bind(_this2);\n    });\n  },\n\n  reset: function reset(callback) {\n    var dbName = this.db.name;\n    var self = this;\n\n    this.db.close();\n\n    IndexedDB.clean(this.db.name, function () {\n      IndexedDB.open(dbName, function (err, other) {\n        if (err) {\n          log('[IndexedDB] Error while resetting local storage', err);\n        } else {\n          // hacky!\n          self.db = other;\n        }\n        if (typeof callback === 'function') {\n          callback(self);\n        }\n      });\n    });\n  },\n\n  forAllNodes: function forAllNodes(cb) {\n    var _this3 = this;\n\n    return new Promise(function (resolve, reject) {\n\n      var transaction = _this3.db.transaction(['nodes'], 'readonly');\n      var cursorReq = transaction.objectStore('nodes').openCursor();\n\n      cursorReq.onsuccess = function (evt) {\n        var cursor = evt.target.result;\n\n        if (cursor) {\n          cb(this.migrate(cursor.value));\n          cursor.continue();\n        } else {\n          resolve();\n        }\n      }.bind(_this3);\n    });\n  },\n\n  closeDB: function closeDB() {\n    this.db.close();\n  }\n\n};\n\nIndexedDB.open = function (name, callback) {\n  var timer = setTimeout(function () {\n    callback(\"timeout trying to open db\");\n  }, 10000);\n\n  try {\n    var req = indexedDB.open(name, DB_VERSION);\n\n    req.onerror = function () {\n      log('[IndexedDB] Opening DB failed', req);\n\n      clearTimeout(timer);\n      callback(req.error);\n    };\n\n    req.onupgradeneeded = function (event) {\n      var db = req.result;\n\n      log(\"[IndexedDB] Upgrade: from \", event.oldVersion, \" to \", event.newVersion);\n\n      if (event.oldVersion !== 1) {\n        log(\"[IndexedDB] Creating object store: nodes\");\n        db.createObjectStore('nodes', { keyPath: 'path' });\n      }\n\n      log(\"[IndexedDB] Creating object store: changes\");\n\n      db.createObjectStore('changes', { keyPath: 'path' });\n    };\n\n    req.onsuccess = function () {\n      clearTimeout(timer);\n\n      // check if all object stores exist\n      var db = req.result;\n      if (!db.objectStoreNames.contains('nodes') || !db.objectStoreNames.contains('changes')) {\n        log(\"[IndexedDB] Missing object store. Resetting the database.\");\n        IndexedDB.clean(name, function () {\n          IndexedDB.open(name, callback);\n        });\n        return;\n      }\n\n      callback(null, req.result);\n    };\n  } catch (error) {\n    log(\"[IndexedDB] Failed to open database: \" + error);\n    log(\"[IndexedDB] Resetting database and trying again.\");\n\n    clearTimeout(timer);\n\n    IndexedDB.clean(name, function () {\n      IndexedDB.open(name, callback);\n    });\n  }\n};\n\nIndexedDB.clean = function (databaseName, callback) {\n  var req = indexedDB.deleteDatabase(databaseName);\n\n  req.onsuccess = function () {\n    log('[IndexedDB] Done removing DB');\n    callback();\n  };\n\n  req.onerror = req.onabort = function (evt) {\n    console.error('Failed to remove database \"' + databaseName + '\"', evt);\n  };\n};\n\nIndexedDB._rs_init = function (remoteStorage) {\n\n  return new Promise(function (resolve, reject) {\n\n    IndexedDB.open(DEFAULT_DB_NAME, function (err, db) {\n      if (err) {\n        reject(err);\n      } else {\n        DEFAULT_DB = db;\n        db.onerror = function () {\n          remoteStorage._emit('error', err);\n        };\n        resolve();\n      }\n    });\n  });\n};\n\nIndexedDB._rs_supported = function () {\n  return new Promise(function (resolve, reject) {\n\n    var context = util.getGlobalContext();\n\n    // TOFIX this is causing an error in chrome\n    // context.indexedDB = context.indexedDB    || context.webkitIndexedDB ||\n    //                    context.mozIndexedDB || context.oIndexedDB      ||\n    //                    context.msIndexedDB;\n\n    // Detect browsers with known IndexedDb issues (e.g. Android pre-4.4)\n    var poorIndexedDbSupport = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent.match(/Android (2|3|4\\.[0-3])/)) {\n      // Chrome and Firefox support IndexedDB\n      if (!navigator.userAgent.match(/Chrome|Firefox/)) {\n        poorIndexedDbSupport = true;\n      }\n    }\n\n    if ('indexedDB' in context && !poorIndexedDbSupport) {\n      try {\n        var check = indexedDB.open(\"rs-check\");\n        check.onerror = function (event) {\n          reject();\n        };\n        check.onsuccess = function (event) {\n          check.result.close();\n          indexedDB.deleteDatabase(\"rs-check\");\n          resolve();\n        };\n      } catch (e) {\n        reject();\n      }\n    } else {\n      reject();\n    }\n  });\n};\n\nIndexedDB._rs_cleanup = function (remoteStorage) {\n  return new Promise(function (resolve, reject) {\n    if (remoteStorage.local) {\n      remoteStorage.local.closeDB();\n    }\n\n    IndexedDB.clean(DEFAULT_DB_NAME, resolve);\n  });\n};\n\nmodule.exports = IndexedDB;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar eventHandling = __webpack_require__(3);\nvar log = __webpack_require__(1);\nvar cachingLayer = __webpack_require__(7);\n/**\n * Class: InMemoryStorage\n *\n * In-memory caching adapter. Used when no IndexedDB or localStorage\n * available.\n **/\n\nvar InMemoryStorage = function InMemoryStorage() {\n  cachingLayer(this);\n  log('[InMemoryStorage] Registering events');\n  eventHandling(this, 'change', 'local-events-done');\n\n  this._storage = {};\n};\n\nInMemoryStorage.prototype = {\n\n  getNodes: function getNodes(paths) {\n    var nodes = {};\n\n    for (var i = 0, len = paths.length; i < len; i++) {\n      nodes[paths[i]] = this._storage[paths[i]];\n    }\n\n    return Promise.resolve(nodes);\n  },\n\n  setNodes: function setNodes(nodes) {\n    for (var path in nodes) {\n      if (nodes[path] === undefined) {\n        delete this._storage[path];\n      } else {\n        this._storage[path] = nodes[path];\n      }\n    }\n\n    return Promise.resolve();\n  },\n\n  forAllNodes: function forAllNodes(cb) {\n    for (var path in this._storage) {\n      cb(this.migrate(this._storage[path]));\n    }\n    return Promise.resolve();\n  }\n\n};\n\nInMemoryStorage._rs_init = function () {};\n\nInMemoryStorage._rs_supported = function () {\n  // In-memory storage is always supported\n  return true;\n};\n\nInMemoryStorage._rs_cleanup = function () {};\n\nmodule.exports = InMemoryStorage;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5tZW1vcnlzdG9yYWdlLmpzPzY1NDMiXSwibmFtZXMiOlsiZXZlbnRIYW5kbGluZyIsInJlcXVpcmUiLCJsb2ciLCJjYWNoaW5nTGF5ZXIiLCJJbk1lbW9yeVN0b3JhZ2UiLCJfc3RvcmFnZSIsInByb3RvdHlwZSIsImdldE5vZGVzIiwicGF0aHMiLCJub2RlcyIsImkiLCJsZW4iLCJsZW5ndGgiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldE5vZGVzIiwicGF0aCIsInVuZGVmaW5lZCIsImZvckFsbE5vZGVzIiwiY2IiLCJtaWdyYXRlIiwiX3JzX2luaXQiLCJfcnNfc3VwcG9ydGVkIiwiX3JzX2NsZWFudXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFFLElBQUlBLGdCQUFnQixtQkFBQUMsQ0FBUSxDQUFSLENBQXBCO0FBQ0EsSUFBSUMsTUFBTSxtQkFBQUQsQ0FBUSxDQUFSLENBQVY7QUFDQSxJQUFJRSxlQUFlLG1CQUFBRixDQUFRLENBQVIsQ0FBbkI7QUFDQTs7Ozs7OztBQU9BLElBQUlHLGtCQUFrQixTQUFsQkEsZUFBa0IsR0FBWTtBQUNoQ0QsZUFBYSxJQUFiO0FBQ0FELE1BQUksc0NBQUo7QUFDQUYsZ0JBQWMsSUFBZCxFQUFvQixRQUFwQixFQUE4QixtQkFBOUI7O0FBRUEsT0FBS0ssUUFBTCxHQUFnQixFQUFoQjtBQUNELENBTkQ7O0FBUUFELGdCQUFnQkUsU0FBaEIsR0FBNEI7O0FBRTFCQyxZQUFVLGtCQUFVQyxLQUFWLEVBQWlCO0FBQ3pCLFFBQUlDLFFBQVEsRUFBWjs7QUFFQSxTQUFJLElBQUlDLElBQUksQ0FBUixFQUFXQyxNQUFNSCxNQUFNSSxNQUEzQixFQUFtQ0YsSUFBSUMsR0FBdkMsRUFBNENELEdBQTVDLEVBQWlEO0FBQy9DRCxZQUFNRCxNQUFNRSxDQUFOLENBQU4sSUFBa0IsS0FBS0wsUUFBTCxDQUFjRyxNQUFNRSxDQUFOLENBQWQsQ0FBbEI7QUFDRDs7QUFFRCxXQUFPRyxRQUFRQyxPQUFSLENBQWdCTCxLQUFoQixDQUFQO0FBQ0QsR0FWeUI7O0FBWTFCTSxZQUFVLGtCQUFVTixLQUFWLEVBQWlCO0FBQ3pCLFNBQUssSUFBSU8sSUFBVCxJQUFpQlAsS0FBakIsRUFBd0I7QUFDdEIsVUFBSUEsTUFBTU8sSUFBTixNQUFnQkMsU0FBcEIsRUFBK0I7QUFDN0IsZUFBTyxLQUFLWixRQUFMLENBQWNXLElBQWQsQ0FBUDtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUtYLFFBQUwsQ0FBY1csSUFBZCxJQUFzQlAsTUFBTU8sSUFBTixDQUF0QjtBQUNEO0FBQ0Y7O0FBRUQsV0FBT0gsUUFBUUMsT0FBUixFQUFQO0FBQ0QsR0F0QnlCOztBQXdCMUJJLGVBQWEscUJBQVVDLEVBQVYsRUFBYztBQUN6QixTQUFLLElBQUlILElBQVQsSUFBaUIsS0FBS1gsUUFBdEIsRUFBZ0M7QUFDOUJjLFNBQUcsS0FBS0MsT0FBTCxDQUFhLEtBQUtmLFFBQUwsQ0FBY1csSUFBZCxDQUFiLENBQUg7QUFDRDtBQUNELFdBQU9ILFFBQVFDLE9BQVIsRUFBUDtBQUNEOztBQTdCeUIsQ0FBNUI7O0FBaUNBVixnQkFBZ0JpQixRQUFoQixHQUEyQixZQUFZLENBQUUsQ0FBekM7O0FBRUFqQixnQkFBZ0JrQixhQUFoQixHQUFnQyxZQUFZO0FBQzFDO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FIRDs7QUFLQWxCLGdCQUFnQm1CLFdBQWhCLEdBQThCLFlBQVksQ0FBRSxDQUE1Qzs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQnJCLGVBQWpCIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiICB2YXIgZXZlbnRIYW5kbGluZyA9IHJlcXVpcmUoJy4vZXZlbnRoYW5kbGluZycpO1xuICB2YXIgbG9nID0gcmVxdWlyZSgnLi9sb2cnKTtcbiAgdmFyIGNhY2hpbmdMYXllciA9IHJlcXVpcmUoJy4vY2FjaGluZ2xheWVyJyk7XG4gIC8qKlxuICAgKiBDbGFzczogSW5NZW1vcnlTdG9yYWdlXG4gICAqXG4gICAqIEluLW1lbW9yeSBjYWNoaW5nIGFkYXB0ZXIuIFVzZWQgd2hlbiBubyBJbmRleGVkREIgb3IgbG9jYWxTdG9yYWdlXG4gICAqIGF2YWlsYWJsZS5cbiAgICoqL1xuXG4gIHZhciBJbk1lbW9yeVN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FjaGluZ0xheWVyKHRoaXMpO1xuICAgIGxvZygnW0luTWVtb3J5U3RvcmFnZV0gUmVnaXN0ZXJpbmcgZXZlbnRzJyk7XG4gICAgZXZlbnRIYW5kbGluZyh0aGlzLCAnY2hhbmdlJywgJ2xvY2FsLWV2ZW50cy1kb25lJyk7XG5cbiAgICB0aGlzLl9zdG9yYWdlID0ge307XG4gIH07XG5cbiAgSW5NZW1vcnlTdG9yYWdlLnByb3RvdHlwZSA9IHtcblxuICAgIGdldE5vZGVzOiBmdW5jdGlvbiAocGF0aHMpIHtcbiAgICAgIHZhciBub2RlcyA9IHt9O1xuXG4gICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSBwYXRocy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBub2Rlc1twYXRoc1tpXV0gPSB0aGlzLl9zdG9yYWdlW3BhdGhzW2ldXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2Rlcyk7XG4gICAgfSxcblxuICAgIHNldE5vZGVzOiBmdW5jdGlvbiAobm9kZXMpIHtcbiAgICAgIGZvciAodmFyIHBhdGggaW4gbm9kZXMpIHtcbiAgICAgICAgaWYgKG5vZGVzW3BhdGhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fc3RvcmFnZVtwYXRoXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zdG9yYWdlW3BhdGhdID0gbm9kZXNbcGF0aF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH0sXG5cbiAgICBmb3JBbGxOb2RlczogZnVuY3Rpb24gKGNiKSB7XG4gICAgICBmb3IgKHZhciBwYXRoIGluIHRoaXMuX3N0b3JhZ2UpIHtcbiAgICAgICAgY2IodGhpcy5taWdyYXRlKHRoaXMuX3N0b3JhZ2VbcGF0aF0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgfTtcblxuICBJbk1lbW9yeVN0b3JhZ2UuX3JzX2luaXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBJbk1lbW9yeVN0b3JhZ2UuX3JzX3N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBJbi1tZW1vcnkgc3RvcmFnZSBpcyBhbHdheXMgc3VwcG9ydGVkXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgSW5NZW1vcnlTdG9yYWdlLl9yc19jbGVhbnVwID0gZnVuY3Rpb24gKCkge307XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBJbk1lbW9yeVN0b3JhZ2U7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2lubWVtb3J5c3RvcmFnZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar cachingLayer = __webpack_require__(7);\nvar log = __webpack_require__(1);\nvar eventHandling = __webpack_require__(3);\nvar util = __webpack_require__(2);\n\n/**\n * Class: LocalStorage\n *\n * localStorage caching adapter. Used when no IndexedDB available.\n **/\n\nvar NODES_PREFIX = \"remotestorage:cache:nodes:\";\nvar CHANGES_PREFIX = \"remotestorage:cache:changes:\";\n\nvar LocalStorage = function LocalStorage() {\n  cachingLayer(this);\n  log('[LocalStorage] Registering events');\n  eventHandling(this, 'change', 'local-events-done');\n};\n\nfunction isRemoteStorageKey(key) {\n  return key.substr(0, NODES_PREFIX.length) === NODES_PREFIX || key.substr(0, CHANGES_PREFIX.length) === CHANGES_PREFIX;\n}\n\nfunction isNodeKey(key) {\n  return key.substr(0, NODES_PREFIX.length) === NODES_PREFIX;\n}\n\nLocalStorage.prototype = {\n\n  getNodes: function getNodes(paths) {\n    var nodes = {};\n\n    for (var i = 0, len = paths.length; i < len; i++) {\n      try {\n        nodes[paths[i]] = JSON.parse(localStorage[NODES_PREFIX + paths[i]]);\n      } catch (e) {\n        nodes[paths[i]] = undefined;\n      }\n    }\n\n    return Promise.resolve(nodes);\n  },\n\n  setNodes: function setNodes(nodes) {\n    for (var path in nodes) {\n      // TODO shouldn't we use getItem/setItem?\n      localStorage[NODES_PREFIX + path] = JSON.stringify(nodes[path]);\n    }\n\n    return Promise.resolve();\n  },\n\n  forAllNodes: function forAllNodes(cb) {\n    var node;\n\n    for (var i = 0, len = localStorage.length; i < len; i++) {\n      if (isNodeKey(localStorage.key(i))) {\n        try {\n          node = this.migrate(JSON.parse(localStorage[localStorage.key(i)]));\n        } catch (e) {\n          node = undefined;\n        }\n        if (node) {\n          cb(node);\n        }\n      }\n    }\n    return Promise.resolve();\n  }\n\n};\n\nLocalStorage._rs_init = function () {};\n\nLocalStorage._rs_supported = function () {\n  return util.localStorageAvailable();\n};\n\n// TODO tests missing!\nLocalStorage._rs_cleanup = function () {\n  var keys = [];\n\n  for (var i = 0, len = localStorage.length; i < len; i++) {\n    var key = localStorage.key(i);\n    if (isRemoteStorageKey(key)) {\n      keys.push(key);\n    }\n  }\n\n  keys.forEach(function (key) {\n    log('[LocalStorage] Removing', key);\n    delete localStorage[key];\n  });\n};\n\nmodule.exports = LocalStorage;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbG9jYWxzdG9yYWdlLmpzPzlhYjYiXSwibmFtZXMiOlsiY2FjaGluZ0xheWVyIiwicmVxdWlyZSIsImxvZyIsImV2ZW50SGFuZGxpbmciLCJ1dGlsIiwiTk9ERVNfUFJFRklYIiwiQ0hBTkdFU19QUkVGSVgiLCJMb2NhbFN0b3JhZ2UiLCJpc1JlbW90ZVN0b3JhZ2VLZXkiLCJrZXkiLCJzdWJzdHIiLCJsZW5ndGgiLCJpc05vZGVLZXkiLCJwcm90b3R5cGUiLCJnZXROb2RlcyIsInBhdGhzIiwibm9kZXMiLCJpIiwibGVuIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZSIsInVuZGVmaW5lZCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0Tm9kZXMiLCJwYXRoIiwic3RyaW5naWZ5IiwiZm9yQWxsTm9kZXMiLCJjYiIsIm5vZGUiLCJtaWdyYXRlIiwiX3JzX2luaXQiLCJfcnNfc3VwcG9ydGVkIiwibG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwiX3JzX2NsZWFudXAiLCJrZXlzIiwicHVzaCIsImZvckVhY2giLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFFLElBQUlBLGVBQWUsbUJBQUFDLENBQVEsQ0FBUixDQUFuQjtBQUNBLElBQUlDLE1BQU0sbUJBQUFELENBQVEsQ0FBUixDQUFWO0FBQ0EsSUFBSUUsZ0JBQWdCLG1CQUFBRixDQUFRLENBQVIsQ0FBcEI7QUFDQSxJQUFJRyxPQUFPLG1CQUFBSCxDQUFRLENBQVIsQ0FBWDs7QUFFQTs7Ozs7O0FBTUEsSUFBSUksZUFBZSw0QkFBbkI7QUFDQSxJQUFJQyxpQkFBaUIsOEJBQXJCOztBQUVBLElBQUlDLGVBQWUsU0FBZkEsWUFBZSxHQUFZO0FBQzdCUCxlQUFhLElBQWI7QUFDQUUsTUFBSSxtQ0FBSjtBQUNBQyxnQkFBYyxJQUFkLEVBQW9CLFFBQXBCLEVBQThCLG1CQUE5QjtBQUNELENBSkQ7O0FBTUEsU0FBU0ssa0JBQVQsQ0FBNEJDLEdBQTVC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OztBQWdCQStCLE9BQU9DLE9BQVAsR0FBaUJsQyxZQUFqQiIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiAgdmFyIGNhY2hpbmdMYXllciA9IHJlcXVpcmUoJy4vY2FjaGluZ2xheWVyJyk7XG4gIHZhciBsb2cgPSByZXF1aXJlKCcuL2xvZycpO1xuICB2YXIgZXZlbnRIYW5kbGluZyA9IHJlcXVpcmUoJy4vZXZlbnRoYW5kbGluZycpO1xuICB2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4gIC8qKlxuICAgKiBDbGFzczogTG9jYWxTdG9yYWdlXG4gICAqXG4gICAqIGxvY2FsU3RvcmFnZSBjYWNoaW5nIGFkYXB0ZXIuIFVzZWQgd2hlbiBubyBJbmRleGVkREIgYXZhaWxhYmxlLlxuICAgKiovXG5cbiAgdmFyIE5PREVTX1BSRUZJWCA9IFwicmVtb3Rlc3RvcmFnZTpjYWNoZTpub2RlczpcIjtcbiAgdmFyIENIQU5HRVNfUFJFRklYID0gXCJyZW1vdGVzdG9yYWdlOmNhY2hlOmNoYW5nZXM6XCI7XG5cbiAgdmFyIExvY2FsU3RvcmFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYWNoaW5nTGF5ZXIodGhpcyk7XG4gICAgbG9nKCdbTG9jYWxTdG9yYWdlXSBSZWdpc3RlcmluZyBldmVudHMnKTtcbiAgICBldmVudEhhbmRsaW5nKHRoaXMsICdjaGFuZ2UnLCAnbG9jYWwtZXZlbnRzLWRvbmUnKTtcbiAgfTtcblxuICBmdW5jdGlvbiBpc1JlbW90ZVN0b3JhZ2VLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5zdWJzdHIoMCwgTk9ERVNfUFJFRklYLmxlbmd0aCkgPT09IE5PREVTX1BSRUZJWCB8fFxuICAgICAgICAgICBrZXkuc3Vic3RyKDAsIENIQU5HRVNfUFJFRklYLmxlbmd0aCkgPT09IENIQU5HRVNfUFJFRklYO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNOb2RlS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkuc3Vic3RyKDAsIE5PREVTX1BSRUZJWC5sZW5ndGgpID09PSBOT0RFU19QUkVGSVg7XG4gIH1cblxuICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlID0ge1xuXG4gICAgZ2V0Tm9kZXM6IGZ1bmN0aW9uIChwYXRocykge1xuICAgICAgdmFyIG5vZGVzID0ge307XG5cbiAgICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHBhdGhzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbm9kZXNbcGF0aHNbaV1dID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2VbTk9ERVNfUFJFRklYK3BhdGhzW2ldXSk7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgIG5vZGVzW3BhdGhzW2ldXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGVzKTtcbiAgICB9LFxuXG4gICAgc2V0Tm9kZXM6IGZ1bmN0aW9uIChub2Rlcykge1xuICAgICAgZm9yICh2YXIgcGF0aCBpbiBub2Rlcykge1xuICAgICAgICAvLyBUT0RPIHNob3VsZG4ndCB3ZSB1c2UgZ2V0SXRlbS9zZXRJdGVtP1xuICAgICAgICBsb2NhbFN0b3JhZ2VbTk9ERVNfUFJFRklYK3BhdGhdID0gSlNPTi5zdHJpbmdpZnkobm9kZXNbcGF0aF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSxcblxuICAgIGZvckFsbE5vZGVzOiBmdW5jdGlvbiAoY2IpIHtcbiAgICAgIHZhciBub2RlO1xuXG4gICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSBsb2NhbFN0b3JhZ2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGlzTm9kZUtleShsb2NhbFN0b3JhZ2Uua2V5KGkpKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5taWdyYXRlKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlW2xvY2FsU3RvcmFnZS5rZXkoaSldKSk7XG4gICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICBub2RlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgY2Iobm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gIH07XG5cbiAgTG9jYWxTdG9yYWdlLl9yc19pbml0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgTG9jYWxTdG9yYWdlLl9yc19zdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHV0aWwubG9jYWxTdG9yYWdlQXZhaWxhYmxlKCk7XG4gIH07XG5cbiAgLy8gVE9ETyB0ZXN0cyBtaXNzaW5nIVxuICBMb2NhbFN0b3JhZ2UuX3JzX2NsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsb2NhbFN0b3JhZ2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpO1xuICAgICAgaWYgKGlzUmVtb3RlU3RvcmFnZUtleShrZXkpKSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBsb2coJ1tMb2NhbFN0b3JhZ2VdIFJlbW92aW5nJywga2V5KTtcbiAgICAgIGRlbGV0ZSBsb2NhbFN0b3JhZ2Vba2V5XTtcbiAgICB9KTtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IExvY2FsU3RvcmFnZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9sb2NhbHN0b3JhZ2UuanMiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar BaseClient = __webpack_require__(6);\nvar RemoteStorage = __webpack_require__(16);\n\nRemoteStorage.MODULES = {};\n\n/*\n * Method: RemoteStorage.defineModule\n *\n * Method for defining a new remoteStorage data module\n *\n * Parameters:\n *   moduleName - Name of the module\n *   builder    - Builder function defining the module\n *\n * The module builder function should return an object containing another\n * object called exports, which will be exported to any <RemoteStorage>\n * instance under the module's name. So when defining a locations module,\n * like in the example below, it would be accessible via\n * `remoteStorage.locations`, which would in turn have a `features` and a\n * `collections` property.\n *\n * The function receives a private and a public client, which are both\n * instances of <RemoteStorage.BaseClient>. In the following example, the\n * scope of privateClient is `/locations` and the scope of publicClient is\n * `/public/locations`.\n *\n * Example:\n *   (start code)\n *   RemoteStorage.defineModule('locations', function (privateClient, publicClient) {\n *     return {\n *       exports: {\n *         features: privateClient.scope('features/').defaultType('feature'),\n *         collections: privateClient.scope('collections/').defaultType('feature-collection')\n *       }\n *     };\n *   });\n * (end code)\n*/\n\nRemoteStorage.defineModule = function (moduleName, builder) {\n  RemoteStorage.MODULES[moduleName] = builder;\n\n  Object.defineProperty(RemoteStorage.prototype, moduleName, {\n    configurable: true,\n    get: function get() {\n      var instance = this._loadModule(moduleName);\n      Object.defineProperty(this, moduleName, {\n        value: instance\n      });\n      return instance;\n    }\n  });\n\n  if (moduleName.indexOf('-') !== -1) {\n    var camelizedName = moduleName.replace(/\\-[a-z]/g, function (s) {\n      return s[1].toUpperCase();\n    });\n    Object.defineProperty(RemoteStorage.prototype, camelizedName, {\n      get: function get() {\n        return this[moduleName];\n      }\n    });\n  }\n};\n\nRemoteStorage.prototype._loadModule = function (moduleName) {\n  var builder = RemoteStorage.MODULES[moduleName];\n  if (builder) {\n    var module = builder(new BaseClient(this, '/' + moduleName + '/'), new BaseClient(this, '/public/' + moduleName + '/'));\n    return module.exports;\n  } else {\n    throw \"Unknown module: \" + moduleName;\n  }\n};\n\nRemoteStorage.prototype.defineModule = function (moduleName) {\n  console.log(\"remoteStorage.defineModule is deprecated, use RemoteStorage.defineModule instead!\");\n  RemoteStorage.defineModule.apply(RemoteStorage, arguments);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy5qcz9jNzMyIl0sIm5hbWVzIjpbIkJhc2VDbGllbnQiLCJyZXF1aXJlIiwiUmVtb3RlU3RvcmFnZSIsIk1PRFVMRVMiLCJkZWZpbmVNb2R1bGUiLCJtb2R1bGVOYW1lIiwiYnVpbGRlciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiY29uZmlndXJhYmxlIiwiZ2V0IiwiaW5zdGFuY2UiLCJfbG9hZE1vZHVsZSIsInZhbHVlIiwiaW5kZXhPZiIsImNhbWVsaXplZE5hbWUiLCJyZXBsYWNlIiwicyIsInRvVXBwZXJDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbnNvbGUiLCJsb2ciLCJhcHBseSIsImFyZ3VtZW50cyJdLCJtYXBwaW5ncyI6Ijs7QUFBRSxJQUFJQSxhQUFhLG1CQUFBQyxDQUFRLENBQVIsQ0FBakI7QUFDQSxJQUFJQyxnQkFBZ0IsbUJBQUFELENBQVEsRUFBUixDQUFwQjs7QUFFQUMsY0FBY0MsT0FBZCxHQUF3QixFQUF4Qjs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQUQsY0FBY0UsWUFBZCxHQUE2QixVQUFVQyxVQUFWLEVBQXNCQyxPQUF0QixFQUErQjtBQUMxREosZ0JBQWNDLE9BQWQsQ0FBc0JFLFVBQXRCLElBQW9DQyxPQUFwQzs7QUFFQUMsU0FBT0MsY0FBUCxDQUFzQk4sY0FBY08sU0FBcEMsRUFBK0NKLFVBQS9DLEVBQTJEO0FBQ3pESyxrQkFBYyxJQUQyQztBQUV6REMsU0FBSyxlQUFZO0FBQ2YsVUFBSUMsV0FBVyxLQUFLQyxXQUFMLENBQWlCUixVQUFqQixDQUFmO0FBQ0FFLGFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEJILFVBQTVCLEVBQXdDO0FBQ3RDUyxlQUFPRjtBQUQrQixPQUF4QztBQUdBLGFBQU9BLFFBQVA7QUFDRDtBQVJ3RCxHQUEzRDs7QUFXQSxNQUFJUCxXQUFXVSxPQUFYLENBQW1CLEdBQW5CLE1BQTRCLENBQUMsQ0FBakMsRUFBb0M7QUFDbEMsUUFBSUMsZ0JBQWdCWCxXQUFXWSxPQUFYLENBQW1CLFVBQW5CLEVBQStCLFVBQVVDLENBQVYsRUFBYTtBQUM5RCxhQUFPQSxFQUFFLENBQUYsRUFBS0MsV0FBTCxFQUFQO0FBQ0QsS0FGbUIsQ0FBcEI7QUFHQVosV0FBT0MsY0FBUCxDQUFzQk4sY0FBY08sU0FBcEMsRUFBK0NPLGFBQS9DLEVBQThEO0FBQzVETCxXQUFLLGVBQVk7QUFDZixlQUFPLEtBQUtOLFVBQUwsQ0FBUDtBQUNEO0FBSDJELEtBQTlEO0FBS0Q7QUFDRixDQXhCRDs7QUEwQkFILGNBQWNPLFNBQWQsQ0FBd0JJLFdBQXhCLEdBQXNDLFVBQVVSLFVBQVYsRUFBc0I7QUFDMUQsTUFBSUMsVUFBVUosY0FBY0MsT0FBZCxDQUFzQkUsVUFBdEIsQ0FBZDtBQUNBLE1BQUlDLE9BQUosRUFBYTtBQUNYLFFBQUljLFNBQVNkLFFBQVEsSUFBSU4sVUFBSixDQUFlLElBQWYsRUFBcUIsTUFBTUssVUFBTixHQUFtQixHQUF4QyxDQUFSLEVBQ1EsSUFBSUwsVUFBSixDQUFlLElBQWYsRUFBcUIsYUFBYUssVUFBYixHQUEwQixHQUEvQyxDQURSLENBQWI7QUFFQSxXQUFPZSxPQUFPQyxPQUFkO0FBQ0QsR0FKRCxNQUlPO0FBQ0wsVUFBTSxxQkFBcUJoQixVQUEzQjtBQUNEO0FBQ0YsQ0FURDs7QUFXQUgsY0FBY08sU0FBZCxDQUF3QkwsWUFBeEIsR0FBdUMsVUFBVUMsVUFBVixFQUFzQjtBQUMzRGlCLFVBQVFDLEdBQVIsQ0FBWSxtRkFBWjtBQUNBckIsZ0JBQWNFLFlBQWQsQ0FBMkJvQixLQUEzQixDQUFpQ3RCLGFBQWpDLEVBQWdEdUIsU0FBaEQ7QUFDRCxDQUhEIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiICB2YXIgQmFzZUNsaWVudCA9IHJlcXVpcmUoJy4vYmFzZWNsaWVudCcpO1xuICB2YXIgUmVtb3RlU3RvcmFnZSA9IHJlcXVpcmUoJy4vcmVtb3Rlc3RvcmFnZScpO1xuICBcbiAgUmVtb3RlU3RvcmFnZS5NT0RVTEVTID0ge307XG5cbiAgLypcbiAgICogTWV0aG9kOiBSZW1vdGVTdG9yYWdlLmRlZmluZU1vZHVsZVxuICAgKlxuICAgKiBNZXRob2QgZm9yIGRlZmluaW5nIGEgbmV3IHJlbW90ZVN0b3JhZ2UgZGF0YSBtb2R1bGVcbiAgICpcbiAgICogUGFyYW1ldGVyczpcbiAgICogICBtb2R1bGVOYW1lIC0gTmFtZSBvZiB0aGUgbW9kdWxlXG4gICAqICAgYnVpbGRlciAgICAtIEJ1aWxkZXIgZnVuY3Rpb24gZGVmaW5pbmcgdGhlIG1vZHVsZVxuICAgKlxuICAgKiBUaGUgbW9kdWxlIGJ1aWxkZXIgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBhbm90aGVyXG4gICAqIG9iamVjdCBjYWxsZWQgZXhwb3J0cywgd2hpY2ggd2lsbCBiZSBleHBvcnRlZCB0byBhbnkgPFJlbW90ZVN0b3JhZ2U+XG4gICAqIGluc3RhbmNlIHVuZGVyIHRoZSBtb2R1bGUncyBuYW1lLiBTbyB3aGVuIGRlZmluaW5nIGEgbG9jYXRpb25zIG1vZHVsZSxcbiAgICogbGlrZSBpbiB0aGUgZXhhbXBsZSBiZWxvdywgaXQgd291bGQgYmUgYWNjZXNzaWJsZSB2aWFcbiAgICogYHJlbW90ZVN0b3JhZ2UubG9jYXRpb25zYCwgd2hpY2ggd291bGQgaW4gdHVybiBoYXZlIGEgYGZlYXR1cmVzYCBhbmQgYVxuICAgKiBgY29sbGVjdGlvbnNgIHByb3BlcnR5LlxuICAgKlxuICAgKiBUaGUgZnVuY3Rpb24gcmVjZWl2ZXMgYSBwcml2YXRlIGFuZCBhIHB1YmxpYyBjbGllbnQsIHdoaWNoIGFyZSBib3RoXG4gICAqIGluc3RhbmNlcyBvZiA8UmVtb3RlU3RvcmFnZS5CYXNlQ2xpZW50Pi4gSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlLCB0aGVcbiAgICogc2NvcGUgb2YgcHJpdmF0ZUNsaWVudCBpcyBgL2xvY2F0aW9uc2AgYW5kIHRoZSBzY29wZSBvZiBwdWJsaWNDbGllbnQgaXNcbiAgICogYC9wdWJsaWMvbG9jYXRpb25zYC5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogICAoc3RhcnQgY29kZSlcbiAgICogICBSZW1vdGVTdG9yYWdlLmRlZmluZU1vZHVsZSgnbG9jYXRpb25zJywgZnVuY3Rpb24gKHByaXZhdGVDbGllbnQsIHB1YmxpY0NsaWVudCkge1xuICAgKiAgICAgcmV0dXJuIHtcbiAgICogICAgICAgZXhwb3J0czoge1xuICAgKiAgICAgICAgIGZlYXR1cmVzOiBwcml2YXRlQ2xpZW50LnNjb3BlKCdmZWF0dXJlcy8nKS5kZWZhdWx0VHlwZSgnZmVhdHVyZScpLFxuICAgKiAgICAgICAgIGNvbGxlY3Rpb25zOiBwcml2YXRlQ2xpZW50LnNjb3BlKCdjb2xsZWN0aW9ucy8nKS5kZWZhdWx0VHlwZSgnZmVhdHVyZS1jb2xsZWN0aW9uJylcbiAgICogICAgICAgfVxuICAgKiAgICAgfTtcbiAgICogICB9KTtcbiAgICogKGVuZCBjb2RlKVxuICAqL1xuXG4gIFJlbW90ZVN0b3JhZ2UuZGVmaW5lTW9kdWxlID0gZnVuY3Rpb24gKG1vZHVsZU5hbWUsIGJ1aWxkZXIpIHtcbiAgICBSZW1vdGVTdG9yYWdlLk1PRFVMRVNbbW9kdWxlTmFtZV0gPSBidWlsZGVyO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlbW90ZVN0b3JhZ2UucHJvdG90eXBlLCBtb2R1bGVOYW1lLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5fbG9hZE1vZHVsZShtb2R1bGVOYW1lKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG1vZHVsZU5hbWUsIHtcbiAgICAgICAgICB2YWx1ZTogaW5zdGFuY2VcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChtb2R1bGVOYW1lLmluZGV4T2YoJy0nKSAhPT0gLTEpIHtcbiAgICAgIHZhciBjYW1lbGl6ZWROYW1lID0gbW9kdWxlTmFtZS5yZXBsYWNlKC9cXC1bYS16XS9nLCBmdW5jdGlvbiAocykge1xuICAgICAgICByZXR1cm4gc1sxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVtb3RlU3RvcmFnZS5wcm90b3R5cGUsIGNhbWVsaXplZE5hbWUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbbW9kdWxlTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBSZW1vdGVTdG9yYWdlLnByb3RvdHlwZS5fbG9hZE1vZHVsZSA9IGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgdmFyIGJ1aWxkZXIgPSBSZW1vdGVTdG9yYWdlLk1PRFVMRVNbbW9kdWxlTmFtZV07XG4gICAgaWYgKGJ1aWxkZXIpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBidWlsZGVyKG5ldyBCYXNlQ2xpZW50KHRoaXMsICcvJyArIG1vZHVsZU5hbWUgKyAnLycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEJhc2VDbGllbnQodGhpcywgJy9wdWJsaWMvJyArIG1vZHVsZU5hbWUgKyAnLycpKTtcbiAgICAgIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgXCJVbmtub3duIG1vZHVsZTogXCIgKyBtb2R1bGVOYW1lO1xuICAgIH1cbiAgfTtcblxuICBSZW1vdGVTdG9yYWdlLnByb3RvdHlwZS5kZWZpbmVNb2R1bGUgPSBmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgIGNvbnNvbGUubG9nKFwicmVtb3RlU3RvcmFnZS5kZWZpbmVNb2R1bGUgaXMgZGVwcmVjYXRlZCwgdXNlIFJlbW90ZVN0b3JhZ2UuZGVmaW5lTW9kdWxlIGluc3RlYWQhXCIpO1xuICAgIFJlbW90ZVN0b3JhZ2UuZGVmaW5lTW9kdWxlLmFwcGx5KFJlbW90ZVN0b3JhZ2UsIGFyZ3VtZW50cyk7XG4gIH07XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar log = __webpack_require__(1);\n\nfunction shareFirst(path) {\n  return this.backend === 'dropbox' && path.match(/^\\/public\\/.*[^\\/]$/);\n}\n\nvar SyncedGetPutDelete = {\n  get: function get(path, maxAge) {\n    if (this.local) {\n      if (maxAge === undefined) {\n        if (_typeof(this.remote) === 'object' && this.remote.connected && this.remote.online) {\n          maxAge = 2 * this.getSyncInterval();\n        } else {\n          log('Not setting default maxAge, because remote is offline or not connected');\n          maxAge = false;\n        }\n      }\n      var maxAgeInvalid = function maxAgeInvalid(maxAge) {\n        return maxAge !== false && typeof maxAge !== 'number';\n      };\n\n      if (maxAgeInvalid(maxAge)) {\n        return Promise.reject('Argument \\'maxAge\\' must be false or a number');\n      }\n      return this.local.get(path, maxAge, this.sync.queueGetRequest.bind(this.sync));\n    } else {\n      return this.remote.get(path);\n    }\n  },\n\n  put: function put(path, body, contentType) {\n    if (shareFirst.bind(this)(path)) {\n      return SyncedGetPutDelete._wrapBusyDone.call(this, this.remote.put(path, body, contentType));\n    } else if (this.local) {\n      return this.local.put(path, body, contentType);\n    } else {\n      return SyncedGetPutDelete._wrapBusyDone.call(this, this.remote.put(path, body, contentType));\n    }\n  },\n\n  'delete': function _delete(path) {\n    if (this.local) {\n      return this.local.delete(path);\n    } else {\n      return SyncedGetPutDelete._wrapBusyDone.call(this, this.remote.delete(path));\n    }\n  },\n\n  _wrapBusyDone: function _wrapBusyDone(result) {\n    var self = this;\n    this._emit('wire-busy');\n    return result.then(function (r) {\n      self._emit('wire-done', { success: true });\n      return Promise.resolve(r);\n    }, function (err) {\n      self._emit('wire-done', { success: false });\n      return Promise.reject(err);\n    });\n  }\n};\n\nmodule.exports = SyncedGetPutDelete;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3luY2VkZ2V0cHV0ZGVsZXRlLmpzPzkyNjQiXSwibmFtZXMiOlsibG9nIiwicmVxdWlyZSIsInNoYXJlRmlyc3QiLCJwYXRoIiwiYmFja2VuZCIsIm1hdGNoIiwiU3luY2VkR2V0UHV0RGVsZXRlIiwiZ2V0IiwibWF4QWdlIiwibG9jYWwiLCJ1bmRlZmluZWQiLCJyZW1vdGUiLCJjb25uZWN0ZWQiLCJvbmxpbmUiLCJnZXRTeW5jSW50ZXJ2YWwiLCJtYXhBZ2VJbnZhbGlkIiwiUHJvbWlzZSIsInJlamVjdCIsInN5bmMiLCJxdWV1ZUdldFJlcXVlc3QiLCJiaW5kIiwicHV0IiwiYm9keSIsImNvbnRlbnRUeXBlIiwiX3dyYXBCdXN5RG9uZSIsImNhbGwiLCJkZWxldGUiLCJyZXN1bHQiLCJzZWxmIiwiX2VtaXQiLCJ0aGVuIiwiciIsInN1Y2Nlc3MiLCJyZXNvbHZlIiwiZXJyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLElBQUlBLE1BQU0sbUJBQUFDLENBQVEsQ0FBUixDQUFWOztBQUVBLFNBQVNDLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0FBQ3hCLFNBQVMsS0FBS0MsT0FBTCxLQUFpQixTQUFqQixJQUNBRCxLQUFLRSxLQUFMLENBQVcscUJBQVgsQ0FEVDtBQUVEOztBQUVELElBQUlDLHFCQUFxQjtBQUN2QkMsT0FBSyxhQUFVSixJQUFWLEVBQWdCSyxNQUFoQixFQUF3QjtBQUMzQixRQUFJLEtBQUtDLEtBQVQsRUFBZ0I7QUFDZCxVQUFJRCxXQUFXRSxTQUFmLEVBQTBCO0FBQ3hCLFlBQUssUUFBTyxLQUFLQyxNQUFaLE1BQXVCLFFBQXhCLElBQ0MsS0FBS0EsTUFBTCxDQUFZQyxTQURiLElBQzBCLEtBQUtELE1BQUwsQ0FBWUUsTUFEMUMsRUFDa0Q7QUFDaERMLG1CQUFTLElBQUUsS0FBS00sZUFBTCxFQUFYO0FBQ0QsU0FIRCxNQUdPO0FBQ0xkLGNBQUksd0VBQUo7QUFDQVEsbUJBQVMsS0FBVDtBQUNEO0FBQ0Y7QUFDRCxVQUFJTyxnQkFBZ0IsU0FBaEJBLGFBQWdCLENBQVVQLE1BQVYsRUFBa0I7QUFDcEMsZUFBT0EsV0FBVyxLQUFYLElBQW9CLE9BQU9BLE1BQVAsS0FBbUIsUUFBOUM7QUFDRCxPQUZEOztBQUlBLFVBQUlPLGNBQWNQLE1BQWQsQ0FBSixFQUEyQjtBQUN6QixlQUFPUSxRQUFRQyxNQUFSLENBQWUsK0NBQWYsQ0FBUDtBQUNEO0FBQ0QsYUFBTyxLQUFLUixLQUFMLENBQVdGLEdBQVgsQ0FBZUosSUFBZixFQUFxQkssTUFBckIsRUFBNkIsS0FBS1UsSUFBTCxDQUFVQyxlQUFWLENBQTBCQyxJQUExQixDQUErQixLQUFLRixJQUFwQyxDQUE3QixDQUFQO0FBQ0QsS0FsQkQsTUFrQk87QUFDTCxhQUFPLEtBQUtQLE1BQUwsQ0FBWUosR0FBWixDQUFnQkosSUFBaEIsQ0FBUDtBQUNEO0FBQ0YsR0F2QnNCOztBQXlCdkJrQixPQUFLLGFBQVVsQixJQUFWLEVBQWdCbUIsSUFBaEIsRUFBc0JDLFdBQXRCLEVBQW1DO0FBQ3RDLFFBQUlyQixXQUFXa0IsSUFBWCxDQUFnQixJQUFoQixFQUFzQmpCLElBQXRCLENBQUosRUFBaUM7QUFDL0IsYUFBT0csbUJBQW1Ca0IsYUFBbkIsQ0FBaUNDLElBQWpDLENBQXNDLElBQXRDLEVBQTRDLEtBQUtkLE1BQUwsQ0FBWVUsR0FBWixDQUFnQmxCLElBQWhCLEVBQXNCbUIsSUFBdEIsRUFBNEJDLFdBQTVCLENBQTVDLENBQVA7QUFDRCxLQUZELE1BR0ssSUFBSSxLQUFLZCxLQUFULEVBQWdCO0FBQ25CLGFBQU8sS0FBS0EsS0FBTCxDQUFXWSxHQUFYLENBQWVsQixJQUFmLEVBQXFCbUIsSUFBckIsRUFBMkJDLFdBQTNCLENBQVA7QUFDRCxLQUZJLE1BRUU7QUFDTCxhQUFPakIsbUJBQW1Ca0IsYUFBbkIsQ0FBaUNDLElBQWpDLENBQXNDLElBQXRDLEVBQTRDLEtBQUtkLE1BQUwsQ0FBWVUsR0FBWixDQUFnQmxCLElBQWhCLEVBQXNCbUIsSUFBdEIsRUFBNEJDLFdBQTVCLENBQTVDLENBQVA7QUFDRDtBQUNGLEdBbENzQjs7QUFvQ3ZCLFlBQVUsaUJBQVVwQixJQUFWLEVBQWdCO0FBQ3hCLFFBQUksS0FBS00sS0FBVCxFQUFnQjtBQUNkLGFBQU8sS0FBS0EsS0FBTCxDQUFXaUIsTUFBWCxDQUFrQnZCLElBQWxCLENBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPRyxtQkFBbUJrQixhQUFuQixDQUFpQ0MsSUFBakMsQ0FBc0MsSUFBdEMsRUFBNEMsS0FBS2QsTUFBTCxDQUFZZSxNQUFaLENBQW1CdkIsSUFBbkIsQ0FBNUMsQ0FBUDtBQUNEO0FBQ0YsR0ExQ3NCOztBQTRDdkJxQixpQkFBZSx1QkFBVUcsTUFBVixFQUFrQjtBQUMvQixRQUFJQyxPQUFPLElBQVg7QUFDQSxTQUFLQyxLQUFMLENBQVcsV0FBWDtBQUNBLFdBQU9GLE9BQU9HLElBQVAsQ0FBWSxVQUFVQyxDQUFWLEVBQWE7QUFDOUJILFdBQUtDLEtBQUwsQ0FBVyxXQUFYLEVBQXdCLEVBQUVHLFNBQVMsSUFBWCxFQUF4QjtBQUNBLGFBQU9oQixRQUFRaUIsT0FBUixDQUFnQkYsQ0FBaEIsQ0FBUDtBQUNELEtBSE0sRUFHSixVQUFVRyxHQUFWLEVBQWU7QUFDaEJOLFdBQUtDLEtBQUwsQ0FBVyxXQUFYLEVBQXdCLEVBQUVHLFNBQVMsS0FBWCxFQUF4QjtBQUNBLGFBQU9oQixRQUFRQyxNQUFSLENBQWVpQixHQUFmLENBQVA7QUFDRCxLQU5NLENBQVA7QUFPRDtBQXREc0IsQ0FBekI7O0FBeURBQyxPQUFPQyxPQUFQLEdBQWlCOUIsa0JBQWpCIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgbG9nID0gcmVxdWlyZSgnLi9sb2cnKTtcblxuZnVuY3Rpb24gc2hhcmVGaXJzdChwYXRoKSB7XG4gIHJldHVybiAoIHRoaXMuYmFja2VuZCA9PT0gJ2Ryb3Bib3gnICYmXG4gICAgICAgICAgIHBhdGgubWF0Y2goL15cXC9wdWJsaWNcXC8uKlteXFwvXSQvKSApO1xufVxuXG52YXIgU3luY2VkR2V0UHV0RGVsZXRlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChwYXRoLCBtYXhBZ2UpIHtcbiAgICBpZiAodGhpcy5sb2NhbCkge1xuICAgICAgaWYgKG1heEFnZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICgodHlwZW9mIHRoaXMucmVtb3RlID09PSAnb2JqZWN0JykgJiZcbiAgICAgICAgICAgICB0aGlzLnJlbW90ZS5jb25uZWN0ZWQgJiYgdGhpcy5yZW1vdGUub25saW5lKSB7XG4gICAgICAgICAgbWF4QWdlID0gMip0aGlzLmdldFN5bmNJbnRlcnZhbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZygnTm90IHNldHRpbmcgZGVmYXVsdCBtYXhBZ2UsIGJlY2F1c2UgcmVtb3RlIGlzIG9mZmxpbmUgb3Igbm90IGNvbm5lY3RlZCcpO1xuICAgICAgICAgIG1heEFnZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbWF4QWdlSW52YWxpZCA9IGZ1bmN0aW9uIChtYXhBZ2UpIHtcbiAgICAgICAgcmV0dXJuIG1heEFnZSAhPT0gZmFsc2UgJiYgdHlwZW9mKG1heEFnZSkgIT09ICdudW1iZXInO1xuICAgICAgfTtcblxuICAgICAgaWYgKG1heEFnZUludmFsaWQobWF4QWdlKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0FyZ3VtZW50IFxcJ21heEFnZVxcJyBtdXN0IGJlIGZhbHNlIG9yIGEgbnVtYmVyJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5sb2NhbC5nZXQocGF0aCwgbWF4QWdlLCB0aGlzLnN5bmMucXVldWVHZXRSZXF1ZXN0LmJpbmQodGhpcy5zeW5jKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbW90ZS5nZXQocGF0aCk7XG4gICAgfVxuICB9LFxuXG4gIHB1dDogZnVuY3Rpb24gKHBhdGgsIGJvZHksIGNvbnRlbnRUeXBlKSB7XG4gICAgaWYgKHNoYXJlRmlyc3QuYmluZCh0aGlzKShwYXRoKSkge1xuICAgICAgcmV0dXJuIFN5bmNlZEdldFB1dERlbGV0ZS5fd3JhcEJ1c3lEb25lLmNhbGwodGhpcywgdGhpcy5yZW1vdGUucHV0KHBhdGgsIGJvZHksIGNvbnRlbnRUeXBlKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMubG9jYWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvY2FsLnB1dChwYXRoLCBib2R5LCBjb250ZW50VHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBTeW5jZWRHZXRQdXREZWxldGUuX3dyYXBCdXN5RG9uZS5jYWxsKHRoaXMsIHRoaXMucmVtb3RlLnB1dChwYXRoLCBib2R5LCBjb250ZW50VHlwZSkpO1xuICAgIH1cbiAgfSxcblxuICAnZGVsZXRlJzogZnVuY3Rpb24gKHBhdGgpIHtcbiAgICBpZiAodGhpcy5sb2NhbCkge1xuICAgICAgcmV0dXJuIHRoaXMubG9jYWwuZGVsZXRlKHBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gU3luY2VkR2V0UHV0RGVsZXRlLl93cmFwQnVzeURvbmUuY2FsbCh0aGlzLCB0aGlzLnJlbW90ZS5kZWxldGUocGF0aCkpO1xuICAgIH1cbiAgfSxcblxuICBfd3JhcEJ1c3lEb25lOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX2VtaXQoJ3dpcmUtYnVzeScpO1xuICAgIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAocikge1xuICAgICAgc2VsZi5fZW1pdCgnd2lyZS1kb25lJywgeyBzdWNjZXNzOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyKTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBzZWxmLl9lbWl0KCd3aXJlLWRvbmUnLCB7IHN1Y2Nlc3M6IGZhbHNlIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgfSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3luY2VkR2V0UHV0RGVsZXRlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N5bmNlZGdldHB1dGRlbGV0ZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=");
},function(module,exports,__webpack_require__){eval('\'use strict\';\n\nvar tv4 = __webpack_require__(28);\nvar BaseClient = __webpack_require__(6);\n\n/**\n * Class: BaseClient.Types\n *\n * - Manages and validates types of remoteStorage objects, using JSON-LD and\n *   JSON Schema\n * - Adds schema declaration/validation methods to BaseClient instances.\n **/\nBaseClient.Types = {\n  // <alias> -> <uri>\n  uris: {},\n  // <uri> -> <schema>\n  schemas: {},\n  // <uri> -> <alias>\n  aliases: {},\n\n  declare: function declare(moduleName, alias, uri, schema) {\n    var fullAlias = moduleName + \'/\' + alias;\n\n    if (schema.extends) {\n      var extendedAlias;\n      var parts = schema.extends.split(\'/\');\n      if (parts.length === 1) {\n        extendedAlias = moduleName + \'/\' + parts.shift();\n      } else {\n        extendedAlias = parts.join(\'/\');\n      }\n      var extendedUri = this.uris[extendedAlias];\n      if (!extendedUri) {\n        throw "Type \'" + fullAlias + "\' tries to extend unknown schema \'" + extendedAlias + "\'";\n      }\n      schema.extends = this.schemas[extendedUri];\n    }\n\n    this.uris[fullAlias] = uri;\n    this.aliases[uri] = fullAlias;\n    this.schemas[uri] = schema;\n  },\n\n  resolveAlias: function resolveAlias(alias) {\n    return this.uris[alias];\n  },\n\n  getSchema: function getSchema(uri) {\n    return this.schemas[uri];\n  },\n\n  inScope: function inScope(moduleName) {\n    var ml = moduleName.length;\n    var schemas = {};\n    for (var alias in this.uris) {\n      if (alias.substr(0, ml + 1) === moduleName + \'/\') {\n        var uri = this.uris[alias];\n        schemas[uri] = this.schemas[uri];\n      }\n    }\n    return schemas;\n  }\n};\n\nvar SchemaNotFound = function SchemaNotFound(uri) {\n  var error = new Error("Schema not found: " + uri);\n  error.name = "SchemaNotFound";\n  return error;\n};\n\nSchemaNotFound.prototype = Error.prototype;\n\nBaseClient.Types.SchemaNotFound = SchemaNotFound;\n\n/**\n * Class: BaseClient\n **/\nBaseClient.prototype.extend({\n  /**\n   * Method: declareType\n   *\n   * Declare a remoteStorage object type using a JSON schema.\n   *\n   * Parameters:\n   *   alias  - A type alias/shortname\n   *   uri    - (optional) JSON-LD URI of the schema. Automatically generated if none given\n   *   schema - A JSON Schema object describing the object type\n   *\n   * Example:\n   *\n   * (start code)\n   * client.declareType(\'todo-item\', {\n   *   "type": "object",\n   *   "properties": {\n   *     "id": {\n   *       "type": "string"\n   *     },\n   *     "title": {\n   *       "type": "string"\n   *     },\n   *     "finished": {\n   *       "type": "boolean"\n   *       "default": false\n   *     },\n   *     "createdAt": {\n   *       "type": "date"\n   *     }\n   *   },\n   *   "required": ["id", "title"]\n   * })\n   * (end code)\n   *\n   * Visit <http://json-schema.org> for details on how to use JSON Schema.\n   **/\n  declareType: function declareType(alias, uri, schema) {\n    if (!schema) {\n      schema = uri;\n      uri = this._defaultTypeURI(alias);\n    }\n    BaseClient.Types.declare(this.moduleName, alias, uri, schema);\n  },\n\n  /**\n   * Method: validate\n   *\n   * Validate an object against the associated schema.\n   *\n   * Parameters:\n   *  object - Object to validate. Must have a @context property.\n   *\n   * Returns:\n   *   An object containing information about validation errors\n   **/\n  validate: function validate(object) {\n    var schema = BaseClient.Types.getSchema(object[\'@context\']);\n    if (schema) {\n      return tv4.validateResult(object, schema);\n    } else {\n      throw new SchemaNotFound(object[\'@context\']);\n    }\n  },\n\n  _defaultTypeURI: function _defaultTypeURI(alias) {\n    return \'http://remotestorage.io/spec/modules/\' + encodeURIComponent(this.moduleName) + \'/\' + encodeURIComponent(alias);\n  },\n\n  _attachType: function _attachType(object, alias) {\n    object[\'@context\'] = BaseClient.Types.resolveAlias(this.moduleName + \'/\' + alias) || this._defaultTypeURI(alias);\n  }\n});\n\n// Documented in baseclient.js\nObject.defineProperty(BaseClient.prototype, \'schemas\', {\n  configurable: true,\n  get: function get() {\n    return BaseClient.Types.inScope(this.moduleName);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,')},function(module,exports){eval("'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Jhc2U2NC1qcy9pbmRleC5qcz8yYWRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0MsU0FBUztBQUMzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBDQUEwQyxVQUFVO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gcGxhY2VIb2xkZXJzQ291bnQgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcbiAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAvLyByZXByZXNlbnQgb25lIGJ5dGVcbiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG4gIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgcmV0dXJuIGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDBcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICByZXR1cm4gYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzQ291bnQoYjY0KVxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG4gIHBsYWNlSG9sZGVycyA9IHBsYWNlSG9sZGVyc0NvdW50KGI2NClcblxuICBhcnIgPSBuZXcgQXJyKGxlbiAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuXG5cbiAgdmFyIEwgPSAwXG5cbiAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICsgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKyBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgb3V0cHV0ID0gJydcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDJdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz09J1xuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyAodWludDhbbGVuIC0gMV0pXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPSdcbiAgfVxuXG4gIHBhcnRzLnB1c2gob3V0cHV0KVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Jhc2U2NC1qcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = __webpack_require__(24)\nvar ieee754 = __webpack_require__(26)\nvar isArray = __webpack_require__(27)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports){eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2llZWU3NTQvaW5kZXguanM/NzBmZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxXQUFXOztBQUVuQjtBQUNBO0FBQ0E7QUFDQSxRQUFRLFdBQVc7O0FBRW5CO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLFdBQVc7O0FBRW5CO0FBQ0E7QUFDQSxRQUFRLFVBQVU7O0FBRWxCO0FBQ0EiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pZWVlNzU0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lzYXJyYXkvaW5kZXguanM/ZWFiYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQSIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lzYXJyYXkvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\nAuthor: Geraint Luff and others\nYear: 2013\n\nThis code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.\n\nIf you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.\n*/\n(function (global, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof module !== \'undefined\' && module.exports){\n    // CommonJS. Define export.\n    module.exports = factory();\n  } else {\n    // Browser globals\n    global.tv4 = factory();\n  }\n}(this, function () {\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys\nif (!Object.keys) {\n\tObject.keys = (function () {\n\t\tvar hasOwnProperty = Object.prototype.hasOwnProperty,\n\t\t\thasDontEnumBug = !({toString: null}).propertyIsEnumerable(\'toString\'),\n\t\t\tdontEnums = [\n\t\t\t\t\'toString\',\n\t\t\t\t\'toLocaleString\',\n\t\t\t\t\'valueOf\',\n\t\t\t\t\'hasOwnProperty\',\n\t\t\t\t\'isPrototypeOf\',\n\t\t\t\t\'propertyIsEnumerable\',\n\t\t\t\t\'constructor\'\n\t\t\t],\n\t\t\tdontEnumsLength = dontEnums.length;\n\n\t\treturn function (obj) {\n\t\t\tif (typeof obj !== \'object\' && typeof obj !== \'function\' || obj === null) {\n\t\t\t\tthrow new TypeError(\'Object.keys called on non-object\');\n\t\t\t}\n\n\t\t\tvar result = [];\n\n\t\t\tfor (var prop in obj) {\n\t\t\t\tif (hasOwnProperty.call(obj, prop)) {\n\t\t\t\t\tresult.push(prop);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasDontEnumBug) {\n\t\t\t\tfor (var i=0; i < dontEnumsLength; i++) {\n\t\t\t\t\tif (hasOwnProperty.call(obj, dontEnums[i])) {\n\t\t\t\t\t\tresult.push(dontEnums[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t})();\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\nif (!Object.create) {\n\tObject.create = (function(){\n\t\tfunction F(){}\n\n\t\treturn function(o){\n\t\t\tif (arguments.length !== 1) {\n\t\t\t\tthrow new Error(\'Object.create implementation only accepts one parameter.\');\n\t\t\t}\n\t\t\tF.prototype = o;\n\t\t\treturn new F();\n\t\t};\n\t})();\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray\nif(!Array.isArray) {\n\tArray.isArray = function (vArg) {\n\t\treturn Object.prototype.toString.call(vArg) === "[object Array]";\n\t};\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf\nif (!Array.prototype.indexOf) {\n\tArray.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n\t\tif (this === null) {\n\t\t\tthrow new TypeError();\n\t\t}\n\t\tvar t = Object(this);\n\t\tvar len = t.length >>> 0;\n\n\t\tif (len === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tvar n = 0;\n\t\tif (arguments.length > 1) {\n\t\t\tn = Number(arguments[1]);\n\t\t\tif (n !== n) { // shortcut for verifying if it\'s NaN\n\t\t\t\tn = 0;\n\t\t\t} else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n\t\t\t\tn = (n > 0 || -1) * Math.floor(Math.abs(n));\n\t\t\t}\n\t\t}\n\t\tif (n >= len) {\n\t\t\treturn -1;\n\t\t}\n\t\tvar k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n\t\tfor (; k < len; k++) {\n\t\t\tif (k in t && t[k] === searchElement) {\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n}\n\n// Grungey Object.isFrozen hack\nif (!Object.isFrozen) {\n\tObject.isFrozen = function (obj) {\n\t\tvar key = "tv4_test_frozen_key";\n\t\twhile (obj.hasOwnProperty(key)) {\n\t\t\tkey += Math.random();\n\t\t}\n\t\ttry {\n\t\t\tobj[key] = true;\n\t\t\tdelete obj[key];\n\t\t\treturn false;\n\t\t} catch (e) {\n\t\t\treturn true;\n\t\t}\n\t};\n}\n// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed\n\nvar uriTemplateGlobalModifiers = {\n\t"+": true,\n\t"#": true,\n\t".": true,\n\t"/": true,\n\t";": true,\n\t"?": true,\n\t"&": true\n};\nvar uriTemplateSuffices = {\n\t"*": true\n};\n\nfunction notReallyPercentEncode(string) {\n\treturn encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {\n\t\treturn "%" + doubleEncoded.substring(3);\n\t});\n}\n\nfunction uriTemplateSubstitution(spec) {\n\tvar modifier = "";\n\tif (uriTemplateGlobalModifiers[spec.charAt(0)]) {\n\t\tmodifier = spec.charAt(0);\n\t\tspec = spec.substring(1);\n\t}\n\tvar separator = "";\n\tvar prefix = "";\n\tvar shouldEscape = true;\n\tvar showVariables = false;\n\tvar trimEmptyString = false;\n\tif (modifier === \'+\') {\n\t\tshouldEscape = false;\n\t} else if (modifier === ".") {\n\t\tprefix = ".";\n\t\tseparator = ".";\n\t} else if (modifier === "/") {\n\t\tprefix = "/";\n\t\tseparator = "/";\n\t} else if (modifier === \'#\') {\n\t\tprefix = "#";\n\t\tshouldEscape = false;\n\t} else if (modifier === \';\') {\n\t\tprefix = ";";\n\t\tseparator = ";";\n\t\tshowVariables = true;\n\t\ttrimEmptyString = true;\n\t} else if (modifier === \'?\') {\n\t\tprefix = "?";\n\t\tseparator = "&";\n\t\tshowVariables = true;\n\t} else if (modifier === \'&\') {\n\t\tprefix = "&";\n\t\tseparator = "&";\n\t\tshowVariables = true;\n\t}\n\n\tvar varNames = [];\n\tvar varList = spec.split(",");\n\tvar varSpecs = [];\n\tvar varSpecMap = {};\n\tfor (var i = 0; i < varList.length; i++) {\n\t\tvar varName = varList[i];\n\t\tvar truncate = null;\n\t\tif (varName.indexOf(":") !== -1) {\n\t\t\tvar parts = varName.split(":");\n\t\t\tvarName = parts[0];\n\t\t\ttruncate = parseInt(parts[1], 10);\n\t\t}\n\t\tvar suffices = {};\n\t\twhile (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {\n\t\t\tsuffices[varName.charAt(varName.length - 1)] = true;\n\t\t\tvarName = varName.substring(0, varName.length - 1);\n\t\t}\n\t\tvar varSpec = {\n\t\t\ttruncate: truncate,\n\t\t\tname: varName,\n\t\t\tsuffices: suffices\n\t\t};\n\t\tvarSpecs.push(varSpec);\n\t\tvarSpecMap[varName] = varSpec;\n\t\tvarNames.push(varName);\n\t}\n\tvar subFunction = function (valueFunction) {\n\t\tvar result = "";\n\t\tvar startIndex = 0;\n\t\tfor (var i = 0; i < varSpecs.length; i++) {\n\t\t\tvar varSpec = varSpecs[i];\n\t\t\tvar value = valueFunction(varSpec.name);\n\t\t\tif (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || (typeof value === \'object\' && Object.keys(value).length === 0)) {\n\t\t\t\tstartIndex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (i === startIndex) {\n\t\t\t\tresult += prefix;\n\t\t\t} else {\n\t\t\t\tresult += (separator || ",");\n\t\t\t}\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tif (showVariables) {\n\t\t\t\t\tresult += varSpec.name + "=";\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < value.length; j++) {\n\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\tresult += varSpec.suffices[\'*\'] ? (separator || ",") : ",";\n\t\t\t\t\t\tif (varSpec.suffices[\'*\'] && showVariables) {\n\t\t\t\t\t\t\tresult += varSpec.name + "=";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, "%21") : notReallyPercentEncode(value[j]);\n\t\t\t\t}\n\t\t\t} else if (typeof value === "object") {\n\t\t\t\tif (showVariables && !varSpec.suffices[\'*\']) {\n\t\t\t\t\tresult += varSpec.name + "=";\n\t\t\t\t}\n\t\t\t\tvar first = true;\n\t\t\t\tfor (var key in value) {\n\t\t\t\t\tif (!first) {\n\t\t\t\t\t\tresult += varSpec.suffices[\'*\'] ? (separator || ",") : ",";\n\t\t\t\t\t}\n\t\t\t\t\tfirst = false;\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(key).replace(/!/g, "%21") : notReallyPercentEncode(key);\n\t\t\t\t\tresult += varSpec.suffices[\'*\'] ? \'=\' : ",";\n\t\t\t\t\tresult += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, "%21") : notReallyPercentEncode(value[key]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (showVariables) {\n\t\t\t\t\tresult += varSpec.name;\n\t\t\t\t\tif (!trimEmptyString || value !== "") {\n\t\t\t\t\t\tresult += "=";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (varSpec.truncate != null) {\n\t\t\t\t\tvalue = value.substring(0, varSpec.truncate);\n\t\t\t\t}\n\t\t\t\tresult += shouldEscape ? encodeURIComponent(value).replace(/!/g, "%21"): notReallyPercentEncode(value);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\tsubFunction.varNames = varNames;\n\treturn {\n\t\tprefix: prefix,\n\t\tsubstitution: subFunction\n\t};\n}\n\nfunction UriTemplate(template) {\n\tif (!(this instanceof UriTemplate)) {\n\t\treturn new UriTemplate(template);\n\t}\n\tvar parts = template.split("{");\n\tvar textParts = [parts.shift()];\n\tvar prefixes = [];\n\tvar substitutions = [];\n\tvar varNames = [];\n\twhile (parts.length > 0) {\n\t\tvar part = parts.shift();\n\t\tvar spec = part.split("}")[0];\n\t\tvar remainder = part.substring(spec.length + 1);\n\t\tvar funcs = uriTemplateSubstitution(spec);\n\t\tsubstitutions.push(funcs.substitution);\n\t\tprefixes.push(funcs.prefix);\n\t\ttextParts.push(remainder);\n\t\tvarNames = varNames.concat(funcs.substitution.varNames);\n\t}\n\tthis.fill = function (valueFunction) {\n\t\tvar result = textParts[0];\n\t\tfor (var i = 0; i < substitutions.length; i++) {\n\t\t\tvar substitution = substitutions[i];\n\t\t\tresult += substitution(valueFunction);\n\t\t\tresult += textParts[i + 1];\n\t\t}\n\t\treturn result;\n\t};\n\tthis.varNames = varNames;\n\tthis.template = template;\n}\nUriTemplate.prototype = {\n\ttoString: function () {\n\t\treturn this.template;\n\t},\n\tfillFromObject: function (obj) {\n\t\treturn this.fill(function (varName) {\n\t\t\treturn obj[varName];\n\t\t});\n\t}\n};\nvar ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {\n\tthis.missing = [];\n\tthis.missingMap = {};\n\tthis.formatValidators = parent ? Object.create(parent.formatValidators) : {};\n\tthis.schemas = parent ? Object.create(parent.schemas) : {};\n\tthis.collectMultiple = collectMultiple;\n\tthis.errors = [];\n\tthis.handleError = collectMultiple ? this.collectError : this.returnError;\n\tif (checkRecursive) {\n\t\tthis.checkRecursive = true;\n\t\tthis.scanned = [];\n\t\tthis.scannedFrozen = [];\n\t\tthis.scannedFrozenSchemas = [];\n\t\tthis.scannedFrozenValidationErrors = [];\n\t\tthis.validatedSchemasKey = \'tv4_validation_id\';\n\t\tthis.validationErrorsKey = \'tv4_validation_errors_id\';\n\t}\n\tif (trackUnknownProperties) {\n\t\tthis.trackUnknownProperties = true;\n\t\tthis.knownPropertyPaths = {};\n\t\tthis.unknownPropertyPaths = {};\n\t}\n\tthis.errorReporter = errorReporter || defaultErrorReporter(\'en\');\n\tif (typeof this.errorReporter === \'string\') {\n\t\tthrow new Error(\'debug\');\n\t}\n\tthis.definedKeywords = {};\n\tif (parent) {\n\t\tfor (var key in parent.definedKeywords) {\n\t\t\tthis.definedKeywords[key] = parent.definedKeywords[key].slice(0);\n\t\t}\n\t}\n};\nValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {\n\tthis.definedKeywords[keyword] = this.definedKeywords[keyword] || [];\n\tthis.definedKeywords[keyword].push(keywordFunction);\n};\nValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {\n\tvar error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);\n\terror.message = this.errorReporter(error, data, schema);\n\treturn error;\n};\nValidatorContext.prototype.returnError = function (error) {\n\treturn error;\n};\nValidatorContext.prototype.collectError = function (error) {\n\tif (error) {\n\t\tthis.errors.push(error);\n\t}\n\treturn null;\n};\nValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {\n\tfor (var i = startIndex; i < this.errors.length; i++) {\n\t\tthis.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);\n\t}\n\treturn this;\n};\nValidatorContext.prototype.banUnknownProperties = function (data, schema) {\n\tfor (var unknownPath in this.unknownPropertyPaths) {\n\t\tvar error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, {path: unknownPath}, unknownPath, "", null, data, schema);\n\t\tvar result = this.handleError(error);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.addFormat = function (format, validator) {\n\tif (typeof format === \'object\') {\n\t\tfor (var key in format) {\n\t\t\tthis.addFormat(key, format[key]);\n\t\t}\n\t\treturn this;\n\t}\n\tthis.formatValidators[format] = validator;\n};\nValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {\n\tif (schema[\'$ref\'] !== undefined) {\n\t\turlHistory = urlHistory || {};\n\t\tif (urlHistory[schema[\'$ref\']]) {\n\t\t\treturn this.createError(ErrorCodes.CIRCULAR_REFERENCE, {urls: Object.keys(urlHistory).join(\', \')}, \'\', \'\', null, undefined, schema);\n\t\t}\n\t\turlHistory[schema[\'$ref\']] = true;\n\t\tschema = this.getSchema(schema[\'$ref\'], urlHistory);\n\t}\n\treturn schema;\n};\nValidatorContext.prototype.getSchema = function (url, urlHistory) {\n\tvar schema;\n\tif (this.schemas[url] !== undefined) {\n\t\tschema = this.schemas[url];\n\t\treturn this.resolveRefs(schema, urlHistory);\n\t}\n\tvar baseUrl = url;\n\tvar fragment = "";\n\tif (url.indexOf(\'#\') !== -1) {\n\t\tfragment = url.substring(url.indexOf("#") + 1);\n\t\tbaseUrl = url.substring(0, url.indexOf("#"));\n\t}\n\tif (typeof this.schemas[baseUrl] === \'object\') {\n\t\tschema = this.schemas[baseUrl];\n\t\tvar pointerPath = decodeURIComponent(fragment);\n\t\tif (pointerPath === "") {\n\t\t\treturn this.resolveRefs(schema, urlHistory);\n\t\t} else if (pointerPath.charAt(0) !== "/") {\n\t\t\treturn undefined;\n\t\t}\n\t\tvar parts = pointerPath.split("/").slice(1);\n\t\tfor (var i = 0; i < parts.length; i++) {\n\t\t\tvar component = parts[i].replace(/~1/g, "/").replace(/~0/g, "~");\n\t\t\tif (schema[component] === undefined) {\n\t\t\t\tschema = undefined;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tschema = schema[component];\n\t\t}\n\t\tif (schema !== undefined) {\n\t\t\treturn this.resolveRefs(schema, urlHistory);\n\t\t}\n\t}\n\tif (this.missing[baseUrl] === undefined) {\n\t\tthis.missing.push(baseUrl);\n\t\tthis.missing[baseUrl] = baseUrl;\n\t\tthis.missingMap[baseUrl] = baseUrl;\n\t}\n};\nValidatorContext.prototype.searchSchemas = function (schema, url) {\n\tif (Array.isArray(schema)) {\n\t\tfor (var i = 0; i < schema.length; i++) {\n\t\t\tthis.searchSchemas(schema[i], url);\n\t\t}\n\t} else if (schema && typeof schema === "object") {\n\t\tif (typeof schema.id === "string") {\n\t\t\tif (isTrustedUrl(url, schema.id)) {\n\t\t\t\tif (this.schemas[schema.id] === undefined) {\n\t\t\t\t\tthis.schemas[schema.id] = schema;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (var key in schema) {\n\t\t\tif (key !== "enum") {\n\t\t\t\tif (typeof schema[key] === "object") {\n\t\t\t\t\tthis.searchSchemas(schema[key], url);\n\t\t\t\t} else if (key === "$ref") {\n\t\t\t\t\tvar uri = getDocumentUri(schema[key]);\n\t\t\t\t\tif (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {\n\t\t\t\t\t\tthis.missingMap[uri] = uri;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nValidatorContext.prototype.addSchema = function (url, schema) {\n\t//overload\n\tif (typeof url !== \'string\' || typeof schema === \'undefined\') {\n\t\tif (typeof url === \'object\' && typeof url.id === \'string\') {\n\t\t\tschema = url;\n\t\t\turl = schema.id;\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\t}\n\tif (url === getDocumentUri(url) + "#") {\n\t\t// Remove empty fragment\n\t\turl = getDocumentUri(url);\n\t}\n\tthis.schemas[url] = schema;\n\tdelete this.missingMap[url];\n\tnormSchema(schema, url);\n\tthis.searchSchemas(schema, url);\n};\n\nValidatorContext.prototype.getSchemaMap = function () {\n\tvar map = {};\n\tfor (var key in this.schemas) {\n\t\tmap[key] = this.schemas[key];\n\t}\n\treturn map;\n};\n\nValidatorContext.prototype.getSchemaUris = function (filterRegExp) {\n\tvar list = [];\n\tfor (var key in this.schemas) {\n\t\tif (!filterRegExp || filterRegExp.test(key)) {\n\t\t\tlist.push(key);\n\t\t}\n\t}\n\treturn list;\n};\n\nValidatorContext.prototype.getMissingUris = function (filterRegExp) {\n\tvar list = [];\n\tfor (var key in this.missingMap) {\n\t\tif (!filterRegExp || filterRegExp.test(key)) {\n\t\t\tlist.push(key);\n\t\t}\n\t}\n\treturn list;\n};\n\nValidatorContext.prototype.dropSchemas = function () {\n\tthis.schemas = {};\n\tthis.reset();\n};\nValidatorContext.prototype.reset = function () {\n\tthis.missing = [];\n\tthis.missingMap = {};\n\tthis.errors = [];\n};\n\nValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {\n\tvar topLevel;\n\tschema = this.resolveRefs(schema);\n\tif (!schema) {\n\t\treturn null;\n\t} else if (schema instanceof ValidationError) {\n\t\tthis.errors.push(schema);\n\t\treturn schema;\n\t}\n\n\tvar startErrorCount = this.errors.length;\n\tvar frozenIndex, scannedFrozenSchemaIndex = null, scannedSchemasIndex = null;\n\tif (this.checkRecursive && data && typeof data === \'object\') {\n\t\ttopLevel = !this.scanned.length;\n\t\tif (data[this.validatedSchemasKey]) {\n\t\t\tvar schemaIndex = data[this.validatedSchemasKey].indexOf(schema);\n\t\t\tif (schemaIndex !== -1) {\n\t\t\t\tthis.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tif (Object.isFrozen(data)) {\n\t\t\tfrozenIndex = this.scannedFrozen.indexOf(data);\n\t\t\tif (frozenIndex !== -1) {\n\t\t\t\tvar frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);\n\t\t\t\tif (frozenSchemaIndex !== -1) {\n\t\t\t\t\tthis.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.scanned.push(data);\n\t\tif (Object.isFrozen(data)) {\n\t\t\tif (frozenIndex === -1) {\n\t\t\t\tfrozenIndex = this.scannedFrozen.length;\n\t\t\t\tthis.scannedFrozen.push(data);\n\t\t\t\tthis.scannedFrozenSchemas.push([]);\n\t\t\t}\n\t\t\tscannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;\n\t\t\tthis.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;\n\t\t\tthis.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];\n\t\t} else {\n\t\t\tif (!data[this.validatedSchemasKey]) {\n\t\t\t\ttry {\n\t\t\t\t\tObject.defineProperty(data, this.validatedSchemasKey, {\n\t\t\t\t\t\tvalue: [],\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t});\n\t\t\t\t\tObject.defineProperty(data, this.validationErrorsKey, {\n\t\t\t\t\t\tvalue: [],\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\t//IE 7/8 workaround\n\t\t\t\t\tdata[this.validatedSchemasKey] = [];\n\t\t\t\t\tdata[this.validationErrorsKey] = [];\n\t\t\t\t}\n\t\t\t}\n\t\t\tscannedSchemasIndex = data[this.validatedSchemasKey].length;\n\t\t\tdata[this.validatedSchemasKey][scannedSchemasIndex] = schema;\n\t\t\tdata[this.validationErrorsKey][scannedSchemasIndex] = [];\n\t\t}\n\t}\n\n\tvar errorCount = this.errors.length;\n\tvar error = this.validateBasic(data, schema, dataPointerPath)\n\t\t|| this.validateNumeric(data, schema, dataPointerPath)\n\t\t|| this.validateString(data, schema, dataPointerPath)\n\t\t|| this.validateArray(data, schema, dataPointerPath)\n\t\t|| this.validateObject(data, schema, dataPointerPath)\n\t\t|| this.validateCombinations(data, schema, dataPointerPath)\n\t\t|| this.validateHypermedia(data, schema, dataPointerPath)\n\t\t|| this.validateFormat(data, schema, dataPointerPath)\n\t\t|| this.validateDefinedKeywords(data, schema, dataPointerPath)\n\t\t|| null;\n\n\tif (topLevel) {\n\t\twhile (this.scanned.length) {\n\t\t\tvar item = this.scanned.pop();\n\t\t\tdelete item[this.validatedSchemasKey];\n\t\t}\n\t\tthis.scannedFrozen = [];\n\t\tthis.scannedFrozenSchemas = [];\n\t}\n\n\tif (error || errorCount !== this.errors.length) {\n\t\twhile ((dataPathParts && dataPathParts.length) || (schemaPathParts && schemaPathParts.length)) {\n\t\t\tvar dataPart = (dataPathParts && dataPathParts.length) ? "" + dataPathParts.pop() : null;\n\t\t\tvar schemaPart = (schemaPathParts && schemaPathParts.length) ? "" + schemaPathParts.pop() : null;\n\t\t\tif (error) {\n\t\t\t\terror = error.prefixWith(dataPart, schemaPart);\n\t\t\t}\n\t\t\tthis.prefixErrors(errorCount, dataPart, schemaPart);\n\t\t}\n\t}\n\n\tif (scannedFrozenSchemaIndex !== null) {\n\t\tthis.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);\n\t} else if (scannedSchemasIndex !== null) {\n\t\tdata[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);\n\t}\n\n\treturn this.handleError(error);\n};\nValidatorContext.prototype.validateFormat = function (data, schema) {\n\tif (typeof schema.format !== \'string\' || !this.formatValidators[schema.format]) {\n\t\treturn null;\n\t}\n\tvar errorMessage = this.formatValidators[schema.format].call(null, data, schema);\n\tif (typeof errorMessage === \'string\' || typeof errorMessage === \'number\') {\n\t\treturn this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage}, \'\', \'/format\', null, data, schema);\n\t} else if (errorMessage && typeof errorMessage === \'object\') {\n\t\treturn this.createError(ErrorCodes.FORMAT_CUSTOM, {message: errorMessage.message || "?"}, errorMessage.dataPath || \'\', errorMessage.schemaPath || "/format", null, data, schema);\n\t}\n\treturn null;\n};\nValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {\n\tfor (var key in this.definedKeywords) {\n\t\tif (typeof schema[key] === \'undefined\') {\n\t\t\tcontinue;\n\t\t}\n\t\tvar validationFunctions = this.definedKeywords[key];\n\t\tfor (var i = 0; i < validationFunctions.length; i++) {\n\t\t\tvar func = validationFunctions[i];\n\t\t\tvar result = func(data, schema[key], schema, dataPointerPath);\n\t\t\tif (typeof result === \'string\' || typeof result === \'number\') {\n\t\t\t\treturn this.createError(ErrorCodes.KEYWORD_CUSTOM, {key: key, message: result}, \'\', \'\', null, data, schema).prefixWith(null, key);\n\t\t\t} else if (result && typeof result === \'object\') {\n\t\t\t\tvar code = result.code;\n\t\t\t\tif (typeof code === \'string\') {\n\t\t\t\t\tif (!ErrorCodes[code]) {\n\t\t\t\t\t\tthrow new Error(\'Undefined error code (use defineError): \' + code);\n\t\t\t\t\t}\n\t\t\t\t\tcode = ErrorCodes[code];\n\t\t\t\t} else if (typeof code !== \'number\') {\n\t\t\t\t\tcode = ErrorCodes.KEYWORD_CUSTOM;\n\t\t\t\t}\n\t\t\t\tvar messageParams = (typeof result.message === \'object\') ? result.message : {key: key, message: result.message || "?"};\n\t\t\t\tvar schemaPath = result.schemaPath || ("/" + key.replace(/~/g, \'~0\').replace(/\\//g, \'~1\'));\n\t\t\t\treturn this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nfunction recursiveCompare(A, B) {\n\tif (A === B) {\n\t\treturn true;\n\t}\n\tif (A && B && typeof A === "object" && typeof B === "object") {\n\t\tif (Array.isArray(A) !== Array.isArray(B)) {\n\t\t\treturn false;\n\t\t} else if (Array.isArray(A)) {\n\t\t\tif (A.length !== B.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (var i = 0; i < A.length; i++) {\n\t\t\t\tif (!recursiveCompare(A[i], B[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar key;\n\t\t\tfor (key in A) {\n\t\t\t\tif (B[key] === undefined && A[key] !== undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (key in B) {\n\t\t\t\tif (A[key] === undefined && B[key] !== undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (key in A) {\n\t\t\t\tif (!recursiveCompare(A[key], B[key])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {\n\tvar error;\n\tif (error = this.validateType(data, schema, dataPointerPath)) {\n\t\treturn error.prefixWith(null, "type");\n\t}\n\tif (error = this.validateEnum(data, schema, dataPointerPath)) {\n\t\treturn error.prefixWith(null, "type");\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateType = function validateType(data, schema) {\n\tif (schema.type === undefined) {\n\t\treturn null;\n\t}\n\tvar dataType = typeof data;\n\tif (data === null) {\n\t\tdataType = "null";\n\t} else if (Array.isArray(data)) {\n\t\tdataType = "array";\n\t}\n\tvar allowedTypes = schema.type;\n\tif (!Array.isArray(allowedTypes)) {\n\t\tallowedTypes = [allowedTypes];\n\t}\n\n\tfor (var i = 0; i < allowedTypes.length; i++) {\n\t\tvar type = allowedTypes[i];\n\t\tif (type === dataType || (type === "integer" && dataType === "number" && (data % 1 === 0))) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn this.createError(ErrorCodes.INVALID_TYPE, {type: dataType, expected: allowedTypes.join("/")}, \'\', \'\', null, data, schema);\n};\n\nValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {\n\tif (schema["enum"] === undefined) {\n\t\treturn null;\n\t}\n\tfor (var i = 0; i < schema["enum"].length; i++) {\n\t\tvar enumVal = schema["enum"][i];\n\t\tif (recursiveCompare(data, enumVal)) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn this.createError(ErrorCodes.ENUM_MISMATCH, {value: (typeof JSON !== \'undefined\') ? JSON.stringify(data) : data}, \'\', \'\', null, data, schema);\n};\n\nValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {\n\treturn this.validateMultipleOf(data, schema, dataPointerPath)\n\t\t|| this.validateMinMax(data, schema, dataPointerPath)\n\t\t|| this.validateNaN(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nvar CLOSE_ENOUGH_LOW = Math.pow(2, -51);\nvar CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;\nValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {\n\tvar multipleOf = schema.multipleOf || schema.divisibleBy;\n\tif (multipleOf === undefined) {\n\t\treturn null;\n\t}\n\tif (typeof data === "number") {\n\t\tvar remainder = (data/multipleOf)%1;\n\t\tif (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {value: data, multipleOf: multipleOf}, \'\', \'\', null, data, schema);\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {\n\tif (typeof data !== "number") {\n\t\treturn null;\n\t}\n\tif (schema.minimum !== undefined) {\n\t\tif (data < schema.minimum) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MINIMUM, {value: data, minimum: schema.minimum}, \'\', \'/minimum\', null, data, schema);\n\t\t}\n\t\tif (schema.exclusiveMinimum && data === schema.minimum) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {value: data, minimum: schema.minimum}, \'\', \'/exclusiveMinimum\', null, data, schema);\n\t\t}\n\t}\n\tif (schema.maximum !== undefined) {\n\t\tif (data > schema.maximum) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MAXIMUM, {value: data, maximum: schema.maximum}, \'\', \'/maximum\', null, data, schema);\n\t\t}\n\t\tif (schema.exclusiveMaximum && data === schema.maximum) {\n\t\t\treturn this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {value: data, maximum: schema.maximum}, \'\', \'/exclusiveMaximum\', null, data, schema);\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {\n\tif (typeof data !== "number") {\n\t\treturn null;\n\t}\n\tif (isNaN(data) === true || data === Infinity || data === -Infinity) {\n\t\treturn this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, {value: data}, \'\', \'/type\', null, data, schema);\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {\n\treturn this.validateStringLength(data, schema, dataPointerPath)\n\t\t|| this.validateStringPattern(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {\n\tif (typeof data !== "string") {\n\t\treturn null;\n\t}\n\tif (schema.minLength !== undefined) {\n\t\tif (data.length < schema.minLength) {\n\t\t\treturn this.createError(ErrorCodes.STRING_LENGTH_SHORT, {length: data.length, minimum: schema.minLength}, \'\', \'/minLength\', null, data, schema);\n\t\t}\n\t}\n\tif (schema.maxLength !== undefined) {\n\t\tif (data.length > schema.maxLength) {\n\t\t\treturn this.createError(ErrorCodes.STRING_LENGTH_LONG, {length: data.length, maximum: schema.maxLength}, \'\', \'/maxLength\', null, data, schema);\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {\n\tif (typeof data !== "string" || (typeof schema.pattern !== "string" && !(schema.pattern instanceof RegExp))) {\n\t\treturn null;\n\t}\n\tvar regexp;\n\tif (schema.pattern instanceof RegExp) {\n\t  regexp = schema.pattern;\n\t}\n\telse {\n\t  var body, flags = \'\';\n\t  // Check for regular expression literals\n\t  // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5\n\t  var literal = schema.pattern.match(/^\\/(.+)\\/([img]*)$/);\n\t  if (literal) {\n\t    body = literal[1];\n\t    flags = literal[2];\n\t  }\n\t  else {\n\t    body = schema.pattern;\n\t  }\n\t  regexp = new RegExp(body, flags);\n\t}\n\tif (!regexp.test(data)) {\n\t\treturn this.createError(ErrorCodes.STRING_PATTERN, {pattern: schema.pattern}, \'\', \'/pattern\', null, data, schema);\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {\n\tif (!Array.isArray(data)) {\n\t\treturn null;\n\t}\n\treturn this.validateArrayLength(data, schema, dataPointerPath)\n\t\t|| this.validateArrayUniqueItems(data, schema, dataPointerPath)\n\t\t|| this.validateArrayItems(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {\n\tvar error;\n\tif (schema.minItems !== undefined) {\n\t\tif (data.length < schema.minItems) {\n\t\t\terror = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {length: data.length, minimum: schema.minItems}, \'\', \'/minItems\', null, data, schema);\n\t\t\tif (this.handleError(error)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\tif (schema.maxItems !== undefined) {\n\t\tif (data.length > schema.maxItems) {\n\t\t\terror = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {length: data.length, maximum: schema.maxItems}, \'\', \'/maxItems\', null, data, schema);\n\t\t\tif (this.handleError(error)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {\n\tif (schema.uniqueItems) {\n\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\tfor (var j = i + 1; j < data.length; j++) {\n\t\t\t\tif (recursiveCompare(data[i], data[j])) {\n\t\t\t\t\tvar error = this.createError(ErrorCodes.ARRAY_UNIQUE, {match1: i, match2: j}, \'\', \'/uniqueItems\', null, data, schema);\n\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\treturn error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {\n\tif (schema.items === undefined) {\n\t\treturn null;\n\t}\n\tvar error, i;\n\tif (Array.isArray(schema.items)) {\n\t\tfor (i = 0; i < data.length; i++) {\n\t\t\tif (i < schema.items.length) {\n\t\t\t\tif (error = this.validateAll(data[i], schema.items[i], [i], ["items", i], dataPointerPath + "/" + i)) {\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\t\t\t} else if (schema.additionalItems !== undefined) {\n\t\t\t\tif (typeof schema.additionalItems === "boolean") {\n\t\t\t\t\tif (!schema.additionalItems) {\n\t\t\t\t\t\terror = (this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, \'/\' + i, \'/additionalItems\', null, data, schema));\n\t\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\t\treturn error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (error = this.validateAll(data[i], schema.additionalItems, [i], ["additionalItems"], dataPointerPath + "/" + i)) {\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (i = 0; i < data.length; i++) {\n\t\t\tif (error = this.validateAll(data[i], schema.items, [i], ["items"], dataPointerPath + "/" + i)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {\n\tif (typeof data !== "object" || data === null || Array.isArray(data)) {\n\t\treturn null;\n\t}\n\treturn this.validateObjectMinMaxProperties(data, schema, dataPointerPath)\n\t\t|| this.validateObjectRequiredProperties(data, schema, dataPointerPath)\n\t\t|| this.validateObjectProperties(data, schema, dataPointerPath)\n\t\t|| this.validateObjectDependencies(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {\n\tvar keys = Object.keys(data);\n\tvar error;\n\tif (schema.minProperties !== undefined) {\n\t\tif (keys.length < schema.minProperties) {\n\t\t\terror = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {propertyCount: keys.length, minimum: schema.minProperties}, \'\', \'/minProperties\', null, data, schema);\n\t\t\tif (this.handleError(error)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\tif (schema.maxProperties !== undefined) {\n\t\tif (keys.length > schema.maxProperties) {\n\t\t\terror = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {propertyCount: keys.length, maximum: schema.maxProperties}, \'\', \'/maxProperties\', null, data, schema);\n\t\t\tif (this.handleError(error)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {\n\tif (schema.required !== undefined) {\n\t\tfor (var i = 0; i < schema.required.length; i++) {\n\t\t\tvar key = schema.required[i];\n\t\t\tif (data[key] === undefined) {\n\t\t\t\tvar error = this.createError(ErrorCodes.OBJECT_REQUIRED, {key: key}, \'\', \'/required/\' + i, null, data, schema);\n\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {\n\tvar error;\n\tfor (var key in data) {\n\t\tvar keyPointerPath = dataPointerPath + "/" + key.replace(/~/g, \'~0\').replace(/\\//g, \'~1\');\n\t\tvar foundMatch = false;\n\t\tif (schema.properties !== undefined && schema.properties[key] !== undefined) {\n\t\t\tfoundMatch = true;\n\t\t\tif (error = this.validateAll(data[key], schema.properties[key], [key], ["properties", key], keyPointerPath)) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\n\t\tif (schema.patternProperties !== undefined) {\n\t\t\tfor (var patternKey in schema.patternProperties) {\n\t\t\t\tvar regexp = new RegExp(patternKey);\n\t\t\t\tif (regexp.test(key)) {\n\t\t\t\t\tfoundMatch = true;\n\t\t\t\t\tif (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], ["patternProperties", patternKey], keyPointerPath)) {\n\t\t\t\t\t\treturn error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!foundMatch) {\n\t\t\tif (schema.additionalProperties !== undefined) {\n\t\t\t\tif (this.trackUnknownProperties) {\n\t\t\t\t\tthis.knownPropertyPaths[keyPointerPath] = true;\n\t\t\t\t\tdelete this.unknownPropertyPaths[keyPointerPath];\n\t\t\t\t}\n\t\t\t\tif (typeof schema.additionalProperties === "boolean") {\n\t\t\t\t\tif (!schema.additionalProperties) {\n\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, {key: key}, \'\', \'/additionalProperties\', null, data, schema).prefixWith(key, null);\n\t\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\t\treturn error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (error = this.validateAll(data[key], schema.additionalProperties, [key], ["additionalProperties"], keyPointerPath)) {\n\t\t\t\t\t\treturn error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {\n\t\t\t\tthis.unknownPropertyPaths[keyPointerPath] = true;\n\t\t\t}\n\t\t} else if (this.trackUnknownProperties) {\n\t\t\tthis.knownPropertyPaths[keyPointerPath] = true;\n\t\t\tdelete this.unknownPropertyPaths[keyPointerPath];\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {\n\tvar error;\n\tif (schema.dependencies !== undefined) {\n\t\tfor (var depKey in schema.dependencies) {\n\t\t\tif (data[depKey] !== undefined) {\n\t\t\t\tvar dep = schema.dependencies[depKey];\n\t\t\t\tif (typeof dep === "string") {\n\t\t\t\t\tif (data[dep] === undefined) {\n\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: dep}, \'\', \'\', null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");\n\t\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\t\treturn error;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (Array.isArray(dep)) {\n\t\t\t\t\tfor (var i = 0; i < dep.length; i++) {\n\t\t\t\t\t\tvar requiredKey = dep[i];\n\t\t\t\t\t\tif (data[requiredKey] === undefined) {\n\t\t\t\t\t\t\terror = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {key: depKey, missing: requiredKey}, \'\', \'/\' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");\n\t\t\t\t\t\t\tif (this.handleError(error)) {\n\t\t\t\t\t\t\t\treturn error;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (error = this.validateAll(data, dep, [], ["dependencies", depKey], dataPointerPath)) {\n\t\t\t\t\t\treturn error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {\n\treturn this.validateAllOf(data, schema, dataPointerPath)\n\t\t|| this.validateAnyOf(data, schema, dataPointerPath)\n\t\t|| this.validateOneOf(data, schema, dataPointerPath)\n\t\t|| this.validateNot(data, schema, dataPointerPath)\n\t\t|| null;\n};\n\nValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {\n\tif (schema.allOf === undefined) {\n\t\treturn null;\n\t}\n\tvar error;\n\tfor (var i = 0; i < schema.allOf.length; i++) {\n\t\tvar subSchema = schema.allOf[i];\n\t\tif (error = this.validateAll(data, subSchema, [], ["allOf", i], dataPointerPath)) {\n\t\t\treturn error;\n\t\t}\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {\n\tif (schema.anyOf === undefined) {\n\t\treturn null;\n\t}\n\tvar errors = [];\n\tvar startErrorCount = this.errors.length;\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\n\tif (this.trackUnknownProperties) {\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\n\t}\n\tvar errorAtEnd = true;\n\tfor (var i = 0; i < schema.anyOf.length; i++) {\n\t\tif (this.trackUnknownProperties) {\n\t\t\tthis.unknownPropertyPaths = {};\n\t\t\tthis.knownPropertyPaths = {};\n\t\t}\n\t\tvar subSchema = schema.anyOf[i];\n\n\t\tvar errorCount = this.errors.length;\n\t\tvar error = this.validateAll(data, subSchema, [], ["anyOf", i], dataPointerPath);\n\n\t\tif (error === null && errorCount === this.errors.length) {\n\t\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\n\t\t\tif (this.trackUnknownProperties) {\n\t\t\t\tfor (var knownKey in this.knownPropertyPaths) {\n\t\t\t\t\toldKnownPropertyPaths[knownKey] = true;\n\t\t\t\t\tdelete oldUnknownPropertyPaths[knownKey];\n\t\t\t\t}\n\t\t\t\tfor (var unknownKey in this.unknownPropertyPaths) {\n\t\t\t\t\tif (!oldKnownPropertyPaths[unknownKey]) {\n\t\t\t\t\t\toldUnknownPropertyPaths[unknownKey] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// We need to continue looping so we catch all the property definitions, but we don\'t want to return an error\n\t\t\t\terrorAtEnd = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\tif (error) {\n\t\t\terrors.push(error.prefixWith(null, "" + i).prefixWith(null, "anyOf"));\n\t\t}\n\t}\n\tif (this.trackUnknownProperties) {\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\n\t}\n\tif (errorAtEnd) {\n\t\terrors = errors.concat(this.errors.slice(startErrorCount));\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\t\treturn this.createError(ErrorCodes.ANY_OF_MISSING, {}, "", "/anyOf", errors, data, schema);\n\t}\n};\n\nValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {\n\tif (schema.oneOf === undefined) {\n\t\treturn null;\n\t}\n\tvar validIndex = null;\n\tvar errors = [];\n\tvar startErrorCount = this.errors.length;\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\n\tif (this.trackUnknownProperties) {\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\n\t}\n\tfor (var i = 0; i < schema.oneOf.length; i++) {\n\t\tif (this.trackUnknownProperties) {\n\t\t\tthis.unknownPropertyPaths = {};\n\t\t\tthis.knownPropertyPaths = {};\n\t\t}\n\t\tvar subSchema = schema.oneOf[i];\n\n\t\tvar errorCount = this.errors.length;\n\t\tvar error = this.validateAll(data, subSchema, [], ["oneOf", i], dataPointerPath);\n\n\t\tif (error === null && errorCount === this.errors.length) {\n\t\t\tif (validIndex === null) {\n\t\t\t\tvalidIndex = i;\n\t\t\t} else {\n\t\t\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\t\t\t\treturn this.createError(ErrorCodes.ONE_OF_MULTIPLE, {index1: validIndex, index2: i}, "", "/oneOf", null, data, schema);\n\t\t\t}\n\t\t\tif (this.trackUnknownProperties) {\n\t\t\t\tfor (var knownKey in this.knownPropertyPaths) {\n\t\t\t\t\toldKnownPropertyPaths[knownKey] = true;\n\t\t\t\t\tdelete oldUnknownPropertyPaths[knownKey];\n\t\t\t\t}\n\t\t\t\tfor (var unknownKey in this.unknownPropertyPaths) {\n\t\t\t\t\tif (!oldKnownPropertyPaths[unknownKey]) {\n\t\t\t\t\t\toldUnknownPropertyPaths[unknownKey] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (error) {\n\t\t\terrors.push(error);\n\t\t}\n\t}\n\tif (this.trackUnknownProperties) {\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\n\t}\n\tif (validIndex === null) {\n\t\terrors = errors.concat(this.errors.slice(startErrorCount));\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\t\treturn this.createError(ErrorCodes.ONE_OF_MISSING, {}, "", "/oneOf", errors, data, schema);\n\t} else {\n\t\tthis.errors = this.errors.slice(0, startErrorCount);\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {\n\tif (schema.not === undefined) {\n\t\treturn null;\n\t}\n\tvar oldErrorCount = this.errors.length;\n\tvar oldUnknownPropertyPaths, oldKnownPropertyPaths;\n\tif (this.trackUnknownProperties) {\n\t\toldUnknownPropertyPaths = this.unknownPropertyPaths;\n\t\toldKnownPropertyPaths = this.knownPropertyPaths;\n\t\tthis.unknownPropertyPaths = {};\n\t\tthis.knownPropertyPaths = {};\n\t}\n\tvar error = this.validateAll(data, schema.not, null, null, dataPointerPath);\n\tvar notErrors = this.errors.slice(oldErrorCount);\n\tthis.errors = this.errors.slice(0, oldErrorCount);\n\tif (this.trackUnknownProperties) {\n\t\tthis.unknownPropertyPaths = oldUnknownPropertyPaths;\n\t\tthis.knownPropertyPaths = oldKnownPropertyPaths;\n\t}\n\tif (error === null && notErrors.length === 0) {\n\t\treturn this.createError(ErrorCodes.NOT_PASSED, {}, "", "/not", null, data, schema);\n\t}\n\treturn null;\n};\n\nValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {\n\tif (!schema.links) {\n\t\treturn null;\n\t}\n\tvar error;\n\tfor (var i = 0; i < schema.links.length; i++) {\n\t\tvar ldo = schema.links[i];\n\t\tif (ldo.rel === "describedby") {\n\t\t\tvar template = new UriTemplate(ldo.href);\n\t\t\tvar allPresent = true;\n\t\t\tfor (var j = 0; j < template.varNames.length; j++) {\n\t\t\t\tif (!(template.varNames[j] in data)) {\n\t\t\t\t\tallPresent = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (allPresent) {\n\t\t\t\tvar schemaUrl = template.fillFromObject(data);\n\t\t\t\tvar subSchema = {"$ref": schemaUrl};\n\t\t\t\tif (error = this.validateAll(data, subSchema, [], ["links", i], dataPointerPath)) {\n\t\t\t\t\treturn error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// parseURI() and resolveUrl() are from https://gist.github.com/1088850\n//   -  released as public domain by author ("Yaffle") - see comments on gist\n\nfunction parseURI(url) {\n\tvar m = String(url).replace(/^\\s+|\\s+$/g, \'\').match(/^([^:\\/?#]+:)?(\\/\\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);\n\t// authority = \'//\' + user + \':\' + pass \'@\' + hostname + \':\' port\n\treturn (m ? {\n\t\thref     : m[0] || \'\',\n\t\tprotocol : m[1] || \'\',\n\t\tauthority: m[2] || \'\',\n\t\thost     : m[3] || \'\',\n\t\thostname : m[4] || \'\',\n\t\tport     : m[5] || \'\',\n\t\tpathname : m[6] || \'\',\n\t\tsearch   : m[7] || \'\',\n\t\thash     : m[8] || \'\'\n\t} : null);\n}\n\nfunction resolveUrl(base, href) {// RFC 3986\n\n\tfunction removeDotSegments(input) {\n\t\tvar output = [];\n\t\tinput.replace(/^(\\.\\.?(\\/|$))+/, \'\')\n\t\t\t.replace(/\\/(\\.(\\/|$))+/g, \'/\')\n\t\t\t.replace(/\\/\\.\\.$/, \'/../\')\n\t\t\t.replace(/\\/?[^\\/]*/g, function (p) {\n\t\t\t\tif (p === \'/..\') {\n\t\t\t\t\toutput.pop();\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(p);\n\t\t\t\t}\n\t\t});\n\t\treturn output.join(\'\').replace(/^\\//, input.charAt(0) === \'/\' ? \'/\' : \'\');\n\t}\n\n\thref = parseURI(href || \'\');\n\tbase = parseURI(base || \'\');\n\n\treturn !href || !base ? null : (href.protocol || base.protocol) +\n\t\t(href.protocol || href.authority ? href.authority : base.authority) +\n\t\tremoveDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === \'/\' ? href.pathname : (href.pathname ? ((base.authority && !base.pathname ? \'/\' : \'\') + base.pathname.slice(0, base.pathname.lastIndexOf(\'/\') + 1) + href.pathname) : base.pathname)) +\n\t\t(href.protocol || href.authority || href.pathname ? href.search : (href.search || base.search)) +\n\t\thref.hash;\n}\n\nfunction getDocumentUri(uri) {\n\treturn uri.split(\'#\')[0];\n}\nfunction normSchema(schema, baseUri) {\n\tif (schema && typeof schema === "object") {\n\t\tif (baseUri === undefined) {\n\t\t\tbaseUri = schema.id;\n\t\t} else if (typeof schema.id === "string") {\n\t\t\tbaseUri = resolveUrl(baseUri, schema.id);\n\t\t\tschema.id = baseUri;\n\t\t}\n\t\tif (Array.isArray(schema)) {\n\t\t\tfor (var i = 0; i < schema.length; i++) {\n\t\t\t\tnormSchema(schema[i], baseUri);\n\t\t\t}\n\t\t} else {\n\t\t\tif (typeof schema[\'$ref\'] === "string") {\n\t\t\t\tschema[\'$ref\'] = resolveUrl(baseUri, schema[\'$ref\']);\n\t\t\t}\n\t\t\tfor (var key in schema) {\n\t\t\t\tif (key !== "enum") {\n\t\t\t\t\tnormSchema(schema[key], baseUri);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction defaultErrorReporter(language) {\n\tlanguage = language || \'en\';\n\n\tvar errorMessages = languages[language];\n\n\treturn function (error) {\n\t\tvar messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];\n\t\tif (typeof messageTemplate !== \'string\') {\n\t\t\treturn "Unknown error code " + error.code + ": " + JSON.stringify(error.messageParams);\n\t\t}\n\t\tvar messageParams = error.params;\n\t\t// Adapted from Crockford\'s supplant()\n\t\treturn messageTemplate.replace(/\\{([^{}]*)\\}/g, function (whole, varName) {\n\t\t\tvar subValue = messageParams[varName];\n\t\t\treturn typeof subValue === \'string\' || typeof subValue === \'number\' ? subValue : whole;\n\t\t});\n\t};\n}\n\nvar ErrorCodes = {\n\tINVALID_TYPE: 0,\n\tENUM_MISMATCH: 1,\n\tANY_OF_MISSING: 10,\n\tONE_OF_MISSING: 11,\n\tONE_OF_MULTIPLE: 12,\n\tNOT_PASSED: 13,\n\t// Numeric errors\n\tNUMBER_MULTIPLE_OF: 100,\n\tNUMBER_MINIMUM: 101,\n\tNUMBER_MINIMUM_EXCLUSIVE: 102,\n\tNUMBER_MAXIMUM: 103,\n\tNUMBER_MAXIMUM_EXCLUSIVE: 104,\n\tNUMBER_NOT_A_NUMBER: 105,\n\t// String errors\n\tSTRING_LENGTH_SHORT: 200,\n\tSTRING_LENGTH_LONG: 201,\n\tSTRING_PATTERN: 202,\n\t// Object errors\n\tOBJECT_PROPERTIES_MINIMUM: 300,\n\tOBJECT_PROPERTIES_MAXIMUM: 301,\n\tOBJECT_REQUIRED: 302,\n\tOBJECT_ADDITIONAL_PROPERTIES: 303,\n\tOBJECT_DEPENDENCY_KEY: 304,\n\t// Array errors\n\tARRAY_LENGTH_SHORT: 400,\n\tARRAY_LENGTH_LONG: 401,\n\tARRAY_UNIQUE: 402,\n\tARRAY_ADDITIONAL_ITEMS: 403,\n\t// Custom/user-defined errors\n\tFORMAT_CUSTOM: 500,\n\tKEYWORD_CUSTOM: 501,\n\t// Schema structure\n\tCIRCULAR_REFERENCE: 600,\n\t// Non-standard validation options\n\tUNKNOWN_PROPERTY: 1000\n};\nvar ErrorCodeLookup = {};\nfor (var key in ErrorCodes) {\n\tErrorCodeLookup[ErrorCodes[key]] = key;\n}\nvar ErrorMessagesDefault = {\n\tINVALID_TYPE: "Invalid type: {type} (expected {expected})",\n\tENUM_MISMATCH: "No enum match for: {value}",\n\tANY_OF_MISSING: "Data does not match any schemas from \\"anyOf\\"",\n\tONE_OF_MISSING: "Data does not match any schemas from \\"oneOf\\"",\n\tONE_OF_MULTIPLE: "Data is valid against more than one schema from \\"oneOf\\": indices {index1} and {index2}",\n\tNOT_PASSED: "Data matches schema from \\"not\\"",\n\t// Numeric errors\n\tNUMBER_MULTIPLE_OF: "Value {value} is not a multiple of {multipleOf}",\n\tNUMBER_MINIMUM: "Value {value} is less than minimum {minimum}",\n\tNUMBER_MINIMUM_EXCLUSIVE: "Value {value} is equal to exclusive minimum {minimum}",\n\tNUMBER_MAXIMUM: "Value {value} is greater than maximum {maximum}",\n\tNUMBER_MAXIMUM_EXCLUSIVE: "Value {value} is equal to exclusive maximum {maximum}",\n\tNUMBER_NOT_A_NUMBER: "Value {value} is not a valid number",\n\t// String errors\n\tSTRING_LENGTH_SHORT: "String is too short ({length} chars), minimum {minimum}",\n\tSTRING_LENGTH_LONG: "String is too long ({length} chars), maximum {maximum}",\n\tSTRING_PATTERN: "String does not match pattern: {pattern}",\n\t// Object errors\n\tOBJECT_PROPERTIES_MINIMUM: "Too few properties defined ({propertyCount}), minimum {minimum}",\n\tOBJECT_PROPERTIES_MAXIMUM: "Too many properties defined ({propertyCount}), maximum {maximum}",\n\tOBJECT_REQUIRED: "Missing required property: {key}",\n\tOBJECT_ADDITIONAL_PROPERTIES: "Additional properties not allowed",\n\tOBJECT_DEPENDENCY_KEY: "Dependency failed - key must exist: {missing} (due to key: {key})",\n\t// Array errors\n\tARRAY_LENGTH_SHORT: "Array is too short ({length}), minimum {minimum}",\n\tARRAY_LENGTH_LONG: "Array is too long ({length}), maximum {maximum}",\n\tARRAY_UNIQUE: "Array items are not unique (indices {match1} and {match2})",\n\tARRAY_ADDITIONAL_ITEMS: "Additional items not allowed",\n\t// Format errors\n\tFORMAT_CUSTOM: "Format validation failed ({message})",\n\tKEYWORD_CUSTOM: "Keyword failed: {key} ({message})",\n\t// Schema structure\n\tCIRCULAR_REFERENCE: "Circular $refs: {urls}",\n\t// Non-standard validation options\n\tUNKNOWN_PROPERTY: "Unknown property (not in schema)"\n};\n\nfunction ValidationError(code, params, dataPath, schemaPath, subErrors) {\n\tError.call(this);\n\tif (code === undefined) {\n\t\tthrow new Error ("No error code supplied: " + schemaPath);\n\t}\n\tthis.message = \'\';\n\tthis.params = params;\n\tthis.code = code;\n\tthis.dataPath = dataPath || "";\n\tthis.schemaPath = schemaPath || "";\n\tthis.subErrors = subErrors || null;\n\n\tvar err = new Error(this.message);\n\tthis.stack = err.stack || err.stacktrace;\n\tif (!this.stack) {\n\t\ttry {\n\t\t\tthrow err;\n\t\t}\n\t\tcatch(err) {\n\t\t\tthis.stack = err.stack || err.stacktrace;\n\t\t}\n\t}\n}\nValidationError.prototype = Object.create(Error.prototype);\nValidationError.prototype.constructor = ValidationError;\nValidationError.prototype.name = \'ValidationError\';\n\nValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {\n\tif (dataPrefix !== null) {\n\t\tdataPrefix = dataPrefix.replace(/~/g, "~0").replace(/\\//g, "~1");\n\t\tthis.dataPath = "/" + dataPrefix + this.dataPath;\n\t}\n\tif (schemaPrefix !== null) {\n\t\tschemaPrefix = schemaPrefix.replace(/~/g, "~0").replace(/\\//g, "~1");\n\t\tthis.schemaPath = "/" + schemaPrefix + this.schemaPath;\n\t}\n\tif (this.subErrors !== null) {\n\t\tfor (var i = 0; i < this.subErrors.length; i++) {\n\t\t\tthis.subErrors[i].prefixWith(dataPrefix, schemaPrefix);\n\t\t}\n\t}\n\treturn this;\n};\n\nfunction isTrustedUrl(baseUrl, testUrl) {\n\tif(testUrl.substring(0, baseUrl.length) === baseUrl){\n\t\tvar remainder = testUrl.substring(baseUrl.length);\n\t\tif ((testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === "/")\n\t\t\t|| remainder.charAt(0) === "#"\n\t\t\t|| remainder.charAt(0) === "?") {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nvar languages = {};\nfunction createApi(language) {\n\tvar globalContext = new ValidatorContext();\n\tvar currentLanguage;\n\tvar customErrorReporter;\n\tvar api = {\n\t\tsetErrorReporter: function (reporter) {\n\t\t\tif (typeof reporter === \'string\') {\n\t\t\t\treturn this.language(reporter);\n\t\t\t}\n\t\t\tcustomErrorReporter = reporter;\n\t\t\treturn true;\n\t\t},\n\t\taddFormat: function () {\n\t\t\tglobalContext.addFormat.apply(globalContext, arguments);\n\t\t},\n\t\tlanguage: function (code) {\n\t\t\tif (!code) {\n\t\t\t\treturn currentLanguage;\n\t\t\t}\n\t\t\tif (!languages[code]) {\n\t\t\t\tcode = code.split(\'-\')[0]; // fall back to base language\n\t\t\t}\n\t\t\tif (languages[code]) {\n\t\t\t\tcurrentLanguage = code;\n\t\t\t\treturn code; // so you can tell if fall-back has happened\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\taddLanguage: function (code, messageMap) {\n\t\t\tvar key;\n\t\t\tfor (key in ErrorCodes) {\n\t\t\t\tif (messageMap[key] && !messageMap[ErrorCodes[key]]) {\n\t\t\t\t\tmessageMap[ErrorCodes[key]] = messageMap[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar rootCode = code.split(\'-\')[0];\n\t\t\tif (!languages[rootCode]) { // use for base language if not yet defined\n\t\t\t\tlanguages[code] = messageMap;\n\t\t\t\tlanguages[rootCode] = messageMap;\n\t\t\t} else {\n\t\t\t\tlanguages[code] = Object.create(languages[rootCode]);\n\t\t\t\tfor (key in messageMap) {\n\t\t\t\t\tif (typeof languages[rootCode][key] === \'undefined\') {\n\t\t\t\t\t\tlanguages[rootCode][key] = messageMap[key];\n\t\t\t\t\t}\n\t\t\t\t\tlanguages[code][key] = messageMap[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\tfreshApi: function (language) {\n\t\t\tvar result = createApi();\n\t\t\tif (language) {\n\t\t\t\tresult.language(language);\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\tvalidate: function (data, schema, checkRecursive, banUnknownProperties) {\n\t\t\tvar def = defaultErrorReporter(currentLanguage);\n\t\t\tvar errorReporter = customErrorReporter ? function (error, data, schema) {\n\t\t\t\treturn customErrorReporter(error, data, schema) || def(error, data, schema);\n\t\t\t} : def;\n\t\t\tvar context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);\n\t\t\tif (typeof schema === "string") {\n\t\t\t\tschema = {"$ref": schema};\n\t\t\t}\n\t\t\tcontext.addSchema("", schema);\n\t\t\tvar error = context.validateAll(data, schema, null, null, "");\n\t\t\tif (!error && banUnknownProperties) {\n\t\t\t\terror = context.banUnknownProperties(data, schema);\n\t\t\t}\n\t\t\tthis.error = error;\n\t\t\tthis.missing = context.missing;\n\t\t\tthis.valid = (error === null);\n\t\t\treturn this.valid;\n\t\t},\n\t\tvalidateResult: function () {\n\t\t\tvar result = {};\n\t\t\tthis.validate.apply(result, arguments);\n\t\t\treturn result;\n\t\t},\n\t\tvalidateMultiple: function (data, schema, checkRecursive, banUnknownProperties) {\n\t\t\tvar def = defaultErrorReporter(currentLanguage);\n\t\t\tvar errorReporter = customErrorReporter ? function (error, data, schema) {\n\t\t\t\treturn customErrorReporter(error, data, schema) || def(error, data, schema);\n\t\t\t} : def;\n\t\t\tvar context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);\n\t\t\tif (typeof schema === "string") {\n\t\t\t\tschema = {"$ref": schema};\n\t\t\t}\n\t\t\tcontext.addSchema("", schema);\n\t\t\tcontext.validateAll(data, schema, null, null, "");\n\t\t\tif (banUnknownProperties) {\n\t\t\t\tcontext.banUnknownProperties(data, schema);\n\t\t\t}\n\t\t\tvar result = {};\n\t\t\tresult.errors = context.errors;\n\t\t\tresult.missing = context.missing;\n\t\t\tresult.valid = (result.errors.length === 0);\n\t\t\treturn result;\n\t\t},\n\t\taddSchema: function () {\n\t\t\treturn globalContext.addSchema.apply(globalContext, arguments);\n\t\t},\n\t\tgetSchema: function () {\n\t\t\treturn globalContext.getSchema.apply(globalContext, arguments);\n\t\t},\n\t\tgetSchemaMap: function () {\n\t\t\treturn globalContext.getSchemaMap.apply(globalContext, arguments);\n\t\t},\n\t\tgetSchemaUris: function () {\n\t\t\treturn globalContext.getSchemaUris.apply(globalContext, arguments);\n\t\t},\n\t\tgetMissingUris: function () {\n\t\t\treturn globalContext.getMissingUris.apply(globalContext, arguments);\n\t\t},\n\t\tdropSchemas: function () {\n\t\t\tglobalContext.dropSchemas.apply(globalContext, arguments);\n\t\t},\n\t\tdefineKeyword: function () {\n\t\t\tglobalContext.defineKeyword.apply(globalContext, arguments);\n\t\t},\n\t\tdefineError: function (codeName, codeNumber, defaultMessage) {\n\t\t\tif (typeof codeName !== \'string\' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {\n\t\t\t\tthrow new Error(\'Code name must be a string in UPPER_CASE_WITH_UNDERSCORES\');\n\t\t\t}\n\t\t\tif (typeof codeNumber !== \'number\' || codeNumber%1 !== 0 || codeNumber < 10000) {\n\t\t\t\tthrow new Error(\'Code number must be an integer > 10000\');\n\t\t\t}\n\t\t\tif (typeof ErrorCodes[codeName] !== \'undefined\') {\n\t\t\t\tthrow new Error(\'Error already defined: \' + codeName + \' as \' + ErrorCodes[codeName]);\n\t\t\t}\n\t\t\tif (typeof ErrorCodeLookup[codeNumber] !== \'undefined\') {\n\t\t\t\tthrow new Error(\'Error code already used: \' + ErrorCodeLookup[codeNumber] + \' as \' + codeNumber);\n\t\t\t}\n\t\t\tErrorCodes[codeName] = codeNumber;\n\t\t\tErrorCodeLookup[codeNumber] = codeName;\n\t\t\tErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;\n\t\t\tfor (var langCode in languages) {\n\t\t\t\tvar language = languages[langCode];\n\t\t\t\tif (language[codeName]) {\n\t\t\t\t\tlanguage[codeNumber] = language[codeNumber] || language[codeName];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\treset: function () {\n\t\t\tglobalContext.reset();\n\t\t\tthis.error = null;\n\t\t\tthis.missing = [];\n\t\t\tthis.valid = true;\n\t\t},\n\t\tmissing: [],\n\t\terror: null,\n\t\tvalid: true,\n\t\tnormSchema: normSchema,\n\t\tresolveUrl: resolveUrl,\n\t\tgetDocumentUri: getDocumentUri,\n\t\terrorCodes: ErrorCodes\n\t};\n\tapi.language(language || \'en\');\n\treturn api;\n}\n\nvar tv4 = createApi();\ntv4.addLanguage(\'en-gb\', ErrorMessagesDefault);\n\n//legacy property\ntv4.tv4 = tv4;\n\nreturn tv4; // used by _header.js to globalise.\n\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,');
},function(module,exports){eval("/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzPzMwNjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIHJldHVybiAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ5dGVzVG9VdWlkO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9")},function(module,exports){eval("/* WEBPACK VAR INJECTION */(function(global) {// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3V1aWQvbGliL3JuZy1icm93c2VyLmpzPzk0NWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiAgSW4gdGhlXG4vLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpXG4vLyBhbmQgaW5jb25zaXN0ZW50IHN1cHBvcnQgZm9yIHRoZSBgY3J5cHRvYCBBUEkuICBXZSBkbyB0aGUgYmVzdCB3ZSBjYW4gdmlhXG4vLyBmZWF0dXJlLWRldGVjdGlvblxudmFyIHJuZztcblxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvOyAvLyBmb3IgSUUgMTFcbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAvLyBXSEFUV0cgY3J5cHRvIFJORyAtIGh0dHA6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9DcnlwdG9cbiAgdmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuICBybmcgPSBmdW5jdGlvbiB3aGF0d2dSTkcoKSB7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG4gICAgcmV0dXJuIHJuZHM4O1xuICB9O1xufVxuXG5pZiAoIXJuZykge1xuICAvLyBNYXRoLnJhbmRvbSgpLWJhc2VkIChSTkcpXG4gIC8vXG4gIC8vIElmIGFsbCBlbHNlIGZhaWxzLCB1c2UgTWF0aC5yYW5kb20oKS4gIEl0J3MgZmFzdCwgYnV0IGlzIG9mIHVuc3BlY2lmaWVkXG4gIC8vIHF1YWxpdHkuXG4gIHZhciAgcm5kcyA9IG5ldyBBcnJheSgxNik7XG4gIHJuZyA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykge1xuICAgICAgaWYgKChpICYgMHgwMykgPT09IDApIHIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDA7XG4gICAgICBybmRzW2ldID0gciA+Pj4gKChpICYgMHgwMykgPDwgMykgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiBybmRzO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJuZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi91dWlkL2xpYi9ybmctYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")},function(module,exports,__webpack_require__){eval("var rng = __webpack_require__(30);\nvar bytesToUuid = __webpack_require__(29);\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3V1aWQvdjQuanM/NDJlNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJuZyA9IHJlcXVpcmUoJy4vbGliL3JuZycpO1xudmFyIGJ5dGVzVG9VdWlkID0gcmVxdWlyZSgnLi9saWIvYnl0ZXNUb1V1aWQnKTtcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG5cbiAgaWYgKHR5cGVvZihvcHRpb25zKSA9PSAnc3RyaW5nJykge1xuICAgIGJ1ZiA9IG9wdGlvbnMgPT0gJ2JpbmFyeScgPyBuZXcgQXJyYXkoMTYpIDogbnVsbDtcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcblxuICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcbiAgaWYgKGJ1Zikge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCAxNjsgKytpaSkge1xuICAgICAgYnVmW2kgKyBpaV0gPSBybmRzW2lpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKHJuZHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHY0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3V1aWQvdjQuanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=")},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */\n/*!\n * webfinger.js\n *   version 2.6.4\n *   http://github.com/silverbucket/webfinger.js\n *\n * Developed and Maintained by:\n *   Nick Jennings <nick@silverbucket.net> 2012\n *\n * webfinger.js is released under the AGPL (see LICENSE).\n *\n * You don't have to do anything special to choose one license or the other and you don't\n * have to notify anyone which license you are using.\n * Please see the corresponding license file for details of these licenses.\n * You are free to use, modify and distribute this software, but all copyright\n * information must remain.\n *\n */\n\nif (typeof XMLHttpRequest === 'undefined') {\n  // XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;\n  XMLHttpRequest = __webpack_require__(33);\n}\n\n(function (global) {\n\n  // URI to property name map\n  var LINK_URI_MAPS = {\n    'http://webfist.org/spec/rel': 'webfist',\n    'http://webfinger.net/rel/avatar': 'avatar',\n    'remotestorage': 'remotestorage',\n    'http://tools.ietf.org/id/draft-dejong-remotestorage': 'remotestorage',\n    'remoteStorage': 'remotestorage',\n    'http://www.packetizer.com/rel/share': 'share',\n    'http://webfinger.net/rel/profile-page': 'profile',\n    'me': 'profile',\n    'vcard': 'vcard',\n    'blog': 'blog',\n    'http://packetizer.com/rel/blog': 'blog',\n    'http://schemas.google.com/g/2010#updates-from': 'updates',\n    'https://camlistore.org/rel/server': 'camilstore'\n  };\n\n  var LINK_PROPERTIES = {\n    'avatar': [],\n    'remotestorage': [],\n    'blog': [],\n    'vcard': [],\n    'updates': [],\n    'share': [],\n    'profile': [],\n    'webfist': [],\n    'camlistore': []\n  };\n\n  // list of endpoints to try, fallback from beginning to end.\n  var URIS = ['webfinger', 'host-meta', 'host-meta.json'];\n\n  function generateErrorObject(obj) {\n    obj.toString = function () {\n      return this.message;\n    };\n    return obj;\n  }\n\n  // given a URL ensures it's HTTPS.\n  // returns false for null string or non-HTTPS URL.\n  function isSecure(url) {\n    if (typeof url !== 'string') {\n      return false;\n    }\n    var parts = url.split('://');\n    if (parts[0] === 'https') {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Function: WebFinger\n   *\n   * WebFinger constructor\n   *\n   * Returns:\n   *\n   *   return WebFinger object\n   */\n  function WebFinger(config) {\n    if (typeof config !== 'object') {\n      config = {};\n    }\n\n    this.config = {\n      tls_only:         (typeof config.tls_only !== 'undefined') ? config.tls_only : true,\n      webfist_fallback: (typeof config.webfist_fallback !== 'undefined') ? config.webfist_fallback : false,\n      uri_fallback:     (typeof config.uri_fallback !== 'undefined') ? config.uri_fallback : false,\n      request_timeout:  (typeof config.request_timeout !== 'undefined') ? config.request_timeout : 10000\n    };\n  }\n\n  // make an http request and look for JRD response, fails if request fails\n  // or response not json.\n  WebFinger.prototype.__fetchJRD = function (url, errorHandler, sucessHandler) {\n    var self = this;\n\n    var xhr = new XMLHttpRequest();\n    xhr.timeout = this.config.request_timeout;\n\n    function __processState() {\n      if (xhr.status === 200) {\n        if (self.__isValidJSON(xhr.responseText)) {\n          return sucessHandler(xhr.responseText);\n        } else {\n          return errorHandler(generateErrorObject({\n            message: 'invalid json',\n            url: url,\n            status: xhr.status\n          }));\n        }\n      } else if (xhr.status === 404) {\n        return errorHandler(generateErrorObject({\n          message: 'resource not found',\n          url: url,\n          status: xhr.status\n        }));\n      } else if ((xhr.status >= 301) && (xhr.status <= 302)) {\n        var location = xhr.getResponseHeader('Location');\n        if (isSecure(location)) {\n          return __makeRequest(location); // follow redirect\n        } else {\n          return errorHandler(generateErrorObject({\n            message: 'no redirect URL found',\n            url: url,\n            status: xhr.status\n          }));\n        }\n      } else {\n        return errorHandler(generateErrorObject({\n          message: 'error during request',\n          url: url,\n          status: xhr.status\n        }));\n      }\n    }\n\n    function __makeRequest() {\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          __processState();\n        }\n      };\n\n      xhr.onload = function () {\n        __processState();\n      };\n\n      xhr.ontimeout = function () {\n        return errorHandler(generateErrorObject({\n          message: 'request timed out',\n          url: url,\n          status: xhr.status\n        }));\n      };\n\n      xhr.open('GET', url, true);\n      xhr.setRequestHeader('Accept', 'application/jrd+json, application/json');\n      xhr.send();\n    }\n\n    return __makeRequest();\n  };\n\n  WebFinger.prototype.__isValidJSON = function (str) {\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  };\n\n  WebFinger.prototype.__isLocalhost = function (host) {\n    var local = /^localhost(\\.localdomain)?(\\:[0-9]+)?$/;\n    return local.test(host);\n  };\n\n  // processes JRD object as if it's a webfinger response object\n  // looks for known properties and adds them to profile datat struct.\n  WebFinger.prototype.__processJRD = function (URL, JRD, errorHandler, successHandler) {\n    var parsedJRD = JSON.parse(JRD);\n    if ((typeof parsedJRD !== 'object') ||\n        (typeof parsedJRD.links !== 'object')) {\n      if (typeof parsedJRD.error !== 'undefined') {\n        return errorHandler(generateErrorObject({ message: parsedJRD.error, request: URL }));\n      } else {\n        return errorHandler(generateErrorObject({ message: 'unknown response from server', request: URL }));\n      }\n    }\n\n    var links = parsedJRD.links;\n    if (!Array.isArray(links)) {\n      links = [];\n    }\n    var result = {  // webfinger JRD - object, json, and our own indexing\n      object: parsedJRD,\n      json: JRD,\n      idx: {}\n    };\n\n    result.idx.properties = {\n      'name': undefined\n    };\n    result.idx.links = JSON.parse(JSON.stringify(LINK_PROPERTIES));\n\n    // process links\n    links.map(function (link, i) {\n      if (LINK_URI_MAPS.hasOwnProperty(link.rel)) {\n        if (result.idx.links[LINK_URI_MAPS[link.rel]]) {\n          var entry = {};\n          Object.keys(link).map(function (item, n) {\n            entry[item] = link[item];\n          });\n          result.idx.links[LINK_URI_MAPS[link.rel]].push(entry);\n        }\n      }\n    });\n\n    // process properties\n    var props = JSON.parse(JRD).properties;\n    for (var key in props) {\n      if (props.hasOwnProperty(key)) {\n        if (key === 'http://packetizer.com/ns/name') {\n          result.idx.properties.name = props[key];\n        }\n      }\n    }\n    return successHandler(result);\n  };\n\n  WebFinger.prototype.lookup = function (address, cb) {\n    if (typeof address !== 'string') {\n      throw new Error('first parameter must be a user address');\n    } else if (typeof cb !== 'function') {\n      throw new Error('second parameter must be a callback');\n    }\n\n    var self = this;\n    var host = '';\n    if (address.indexOf('://') > -1) {\n      // other uri format\n      host = address.replace(/ /g,'').split('/')[2];\n    } else {\n      // useraddress\n      host = address.replace(/ /g,'').split('@')[1];\n    }\n    var uri_index = 0;      // track which URIS we've tried already\n    var protocol = 'https'; // we use https by default\n\n    if (self.__isLocalhost(host)) {\n      protocol = 'http';\n    }\n\n    function __buildURL() {\n      var uri = '';\n      if (! address.split('://')[1]) {\n        // the URI has not been defined, default to acct\n        uri = 'acct:';\n      }\n      return protocol + '://' + host + '/.well-known/' +\n             URIS[uri_index] + '?resource=' + uri + address;\n    }\n\n    // control flow for failures, what to do in various cases, etc.\n    function __fallbackChecks(err) {\n      if ((self.config.uri_fallback) && (host !== 'webfist.org') && (uri_index !== URIS.length - 1)) { // we have uris left to try\n        uri_index = uri_index + 1;\n        return __call();\n      } else if ((!self.config.tls_only) && (protocol === 'https')) { // try normal http\n        uri_index = 0;\n        protocol = 'http';\n        return __call();\n      } else if ((self.config.webfist_fallback) && (host !== 'webfist.org')) { // webfist attempt\n        uri_index = 0;\n        protocol = 'http';\n        host = 'webfist.org';\n        // webfist will\n        // 1. make a query to the webfist server for the users account\n        // 2. from the response, get a link to the actual webfinger json data\n        //    (stored somewhere in control of the user)\n        // 3. make a request to that url and get the json\n        // 4. process it like a normal webfinger response\n        var URL = __buildURL();\n        self.__fetchJRD(URL, cb, function (data) { // get link to users JRD\n          self.__processJRD(URL, data, cb, function (result) {\n            if ((typeof result.idx.links.webfist === 'object') &&\n                (typeof result.idx.links.webfist[0].href === 'string')) {\n              self.__fetchJRD(result.idx.links.webfist[0].href, cb, function (JRD) {\n                self.__processJRD(URL, JRD, cb, function (result) {\n                  return cb(null, cb);\n                });\n              });\n            }\n          });\n        });\n      } else {\n        return cb(err);\n      }\n    }\n\n    function __call() {\n      // make request\n      var URL = __buildURL();\n      self.__fetchJRD(URL, __fallbackChecks, function (JRD) {\n        self.__processJRD(URL, JRD, cb, function (result) { cb(null, result); });\n      });\n    }\n\n    return setTimeout(__call, 0);\n  };\n\n  WebFinger.prototype.lookupLink = function (address, rel, cb) {\n    if (LINK_PROPERTIES.hasOwnProperty(rel)) {\n      this.lookup(address, function (err, p) {\n        var links  = p.idx.links[rel];\n        if (err) {\n          return cb(err);\n        } else if (links.length === 0) {\n          return cb('no links found with rel=\"' + rel + '\"');\n        } else {\n          return cb(null, links[0]);\n        }\n      });\n    } else {\n      return cb('unsupported rel ' + rel);\n    }\n  };\n\n\n\n  // AMD support\n  if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return WebFinger; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  // CommonJS and Node.js module support.\n  } else if (typeof exports !== 'undefined') {\n    // Support Node.js specific `module.exports` (which can be a function)\n    if (typeof module !== 'undefined' && module.exports) {\n        exports = module.exports = WebFinger;\n    }\n    // But always support CommonJS module 1.1.1 spec (`exports` cannot be a function)\n    exports.WebFinger = WebFinger;\n  } else {\n    // browser <script> support\n    global.WebFinger = WebFinger;\n  }\n})(this);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports){eval("module.exports = XMLHttpRequest;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3hocjIvbGliL2Jyb3dzZXIuanM/MjQyMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gWE1MSHR0cFJlcXVlc3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34veGhyMi9saWIvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==")}])});